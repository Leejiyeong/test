
MobileRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  000037a6  0000383a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  0080023a  0080023a  00003974  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005d5  00000000  00000000  00003bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000378d  00000000  00000000  00004189  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b59  00000000  00000000  00007916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002734  00000000  00000000  0000946f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000bba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000720  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000197a  00000000  00000000  0000c774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <__vector_18+0x56>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e6 ea       	ldi	r30, 0xA6	; 166
      be:	f7 e3       	ldi	r31, 0x37	; 55
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	aa 33       	cpi	r26, 0x3A	; 58
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	aa e3       	ldi	r26, 0x3A	; 58
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a6 3f       	cpi	r26, 0xF6	; 246
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <main>
      e4:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	//UBRR1H=0x00;
	//UBRR1L=0x5F;
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x07;
     100:	87 e0       	ldi	r24, 0x07	; 7
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	ef 93       	push	r30
     11e:	ff 93       	push	r31
	char data;
	
	data=UDR1;
     120:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     124:	80 91 9b 00 	lds	r24, 0x009B
     128:	88 7b       	andi	r24, 0xB8	; 184
     12a:	e1 f3       	breq	.-8      	; 0x124 <__vector_30+0x1a>
	rx1_flg=1;              //수신완료 플레그 set
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 3a 02 	sts	0x023A, r24
	rx1_buff=data;
     132:	90 93 3b 02 	sts	0x023B, r25

	if(CameraV1_EN){
     136:	80 91 3c 02 	lds	r24, 0x023C
     13a:	88 23       	and	r24, r24
     13c:	91 f0       	breq	.+36     	; 0x162 <__vector_30+0x58>
		//PORTB^=0X07;
		if(rx1_buff=='V'){
     13e:	80 91 3b 02 	lds	r24, 0x023B
     142:	86 35       	cpi	r24, 0x56	; 86
     144:	11 f4       	brne	.+4      	; 0x14a <__vector_30+0x40>
			CameraV1_cnt=0;
     146:	10 92 3e 02 	sts	0x023E, r1
			//PORTB^=0X07;
		}
		CameraV1_buff[CameraV1_cnt++]=rx1_buff;
     14a:	80 91 3e 02 	lds	r24, 0x023E
     14e:	e8 2f       	mov	r30, r24
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	90 91 3b 02 	lds	r25, 0x023B
     156:	e1 5a       	subi	r30, 0xA1	; 161
     158:	fd 4f       	sbci	r31, 0xFD	; 253
     15a:	90 83       	st	Z, r25
     15c:	8f 5f       	subi	r24, 0xFF	; 255
     15e:	80 93 3e 02 	sts	0x023E, r24
	}
}
     162:	ff 91       	pop	r31
     164:	ef 91       	pop	r30
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	0f 90       	pop	r0
     16c:	0b be       	out	0x3b, r0	; 59
     16e:	0f 90       	pop	r0
     170:	0f be       	out	0x3f, r0	; 63
     172:	0f 90       	pop	r0
     174:	1f 90       	pop	r1
     176:	18 95       	reti

00000178 <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     178:	80 91 3b 02 	lds	r24, 0x023B
	rx1_buff=0;
     17c:	10 92 3b 02 	sts	0x023B, r1
	cli();           //글로벌 인터럽트 disable
     180:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     182:	10 92 3a 02 	sts	0x023A, r1
	sei();           //글로벌 인터럽트 enable          
     186:	78 94       	sei
	return data;     //수신데이터 반환
}
     188:	08 95       	ret

0000018a <putchar1>:

void putchar1(char data) //uart 송신화기
{
     18a:	98 2f       	mov	r25, r24
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     18c:	80 91 9b 00 	lds	r24, 0x009B
     190:	85 ff       	sbrs	r24, 5
     192:	fc cf       	rjmp	.-8      	; 0x18c <putchar1+0x2>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     194:	90 93 9c 00 	sts	0x009C, r25
}
     198:	08 95       	ret

0000019a <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     1a0:	88 e4       	ldi	r24, 0x48	; 72
     1a2:	80 93 70 00 	sts	0x0070, r24
}
     1a6:	08 95       	ret

000001a8 <lcd_write_data>:
// Function  : I2C를 사용하여 LCD모듈로 한바이트 전송
// Parameter :
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
     1a8:	98 2f       	mov	r25, r24
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     1aa:	84 ea       	ldi	r24, 0xA4	; 164
     1ac:	80 93 74 00 	sts	0x0074, r24
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     1b0:	80 91 74 00 	lds	r24, 0x0074
     1b4:	87 ff       	sbrs	r24, 7
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <lcd_write_data+0x8>
	
	// 주소 전송
    TWDR = SLA << 1;
     1b8:	8e e0       	ldi	r24, 0x0E	; 14
     1ba:	80 93 73 00 	sts	0x0073, r24
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     1be:	84 e8       	ldi	r24, 0x84	; 132
     1c0:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     1c4:	80 91 74 00 	lds	r24, 0x0074
     1c8:	87 ff       	sbrs	r24, 7
     1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <lcd_write_data+0x1c>
	
	TWDR = data;
     1cc:	90 93 73 00 	sts	0x0073, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
     1d0:	84 e8       	ldi	r24, 0x84	; 132
     1d2:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     1d6:	80 91 74 00 	lds	r24, 0x0074
     1da:	87 ff       	sbrs	r24, 7
     1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <lcd_write_data+0x2e>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     1de:	84 e9       	ldi	r24, 0x94	; 148
     1e0:	80 93 74 00 	sts	0x0074, r24
}
     1e4:	08 95       	ret

000001e6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	e8 2e       	mov	r14, r24
     1f6:	f6 2e       	mov	r15, r22
     1f8:	8a 01       	movw	r16, r20
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	8e 15       	cp	r24, r14
     1fe:	58 f1       	brcs	.+86     	; 0x256 <lcd_display_str+0x70>
     200:	e3 e1       	ldi	r30, 0x13	; 19
     202:	e6 17       	cp	r30, r22
     204:	40 f1       	brcs	.+80     	; 0x256 <lcd_display_str+0x70>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     206:	8b e1       	ldi	r24, 0x1B	; 27
     208:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     20c:	8c e4       	ldi	r24, 0x4C	; 76
     20e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     212:	8f 2d       	mov	r24, r15
     214:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     218:	8e 2d       	mov	r24, r14
     21a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21e:	80 e7       	ldi	r24, 0x70	; 112
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_display_str+0x3c>
     226:	c0 e0       	ldi	r28, 0x00	; 0
     228:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_us(100);
    	while(((i++)<20)&&*string){
     22a:	ef 2c       	mov	r14, r15
     22c:	ff 24       	eor	r15, r15
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     22e:	84 ec       	ldi	r24, 0xC4	; 196
     230:	d8 2e       	mov	r13, r24
     232:	07 c0       	rjmp	.+14     	; 0x242 <lcd_display_str+0x5c>
        	lcd_write_data(*string++);
     234:	0f 5f       	subi	r16, 0xFF	; 255
     236:	1f 4f       	sbci	r17, 0xFF	; 255
     238:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     23c:	8d 2d       	mov	r24, r13
     23e:	8a 95       	dec	r24
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_display_str+0x58>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     242:	ce 01       	movw	r24, r28
     244:	8e 0d       	add	r24, r14
     246:	9f 1d       	adc	r25, r15
     248:	44 97       	sbiw	r24, 0x14	; 20
     24a:	2c f4       	brge	.+10     	; 0x256 <lcd_display_str+0x70>
     24c:	f8 01       	movw	r30, r16
     24e:	80 81       	ld	r24, Z
     250:	21 96       	adiw	r28, 0x01	; 1
     252:	88 23       	and	r24, r24
     254:	79 f7       	brne	.-34     	; 0x234 <lcd_display_str+0x4e>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	08 95       	ret

00000266 <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	08 2f       	mov	r16, r24
     26e:	16 2f       	mov	r17, r22
     270:	f2 2e       	mov	r15, r18
    if(Y_line<4 && X_line<20){
     272:	84 30       	cpi	r24, 0x04	; 4
     274:	c0 f4       	brcc	.+48     	; 0x2a6 <write_lcd_data+0x40>
     276:	64 31       	cpi	r22, 0x14	; 20
     278:	b0 f4       	brcc	.+44     	; 0x2a6 <write_lcd_data+0x40>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     27a:	8b e1       	ldi	r24, 0x1B	; 27
     27c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     280:	8c e4       	ldi	r24, 0x4C	; 76
     282:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     286:	81 2f       	mov	r24, r17
     288:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     28c:	80 2f       	mov	r24, r16
     28e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     292:	80 e7       	ldi	r24, 0x70	; 112
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <write_lcd_data+0x30>
		_delay_us(100);
		lcd_write_data(data);
     29a:	8f 2d       	mov	r24, r15
     29c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2a0:	84 ec       	ldi	r24, 0xC4	; 196
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <write_lcd_data+0x3c>
		_delay_us(40);
    }
}
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	08 95       	ret

000002ae <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     2ae:	8b e1       	ldi	r24, 0x1B	; 27
     2b0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     2b4:	83 e4       	ldi	r24, 0x43	; 67
     2b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_data>
     2ba:	88 ec       	ldi	r24, 0xC8	; 200
     2bc:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2be:	20 e7       	ldi	r18, 0x70	; 112
     2c0:	31 e0       	ldi	r19, 0x01	; 1
     2c2:	f9 01       	movw	r30, r18
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_clear_screen+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <lcd_clear_screen+0x14>
     2cc:	08 95       	ret

000002ce <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	e8 2e       	mov	r14, r24
     2da:	f6 2e       	mov	r15, r22
     2dc:	d4 2e       	mov	r13, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
	write_lcd_data(line, col, val_buff+'0' );
     2de:	84 2f       	mov	r24, r20
     2e0:	64 e6       	ldi	r22, 0x64	; 100
     2e2:	0e 94 cf 19 	call	0x339e	; 0x339e <__udivmodqi4>
     2e6:	08 2f       	mov	r16, r24
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	00 5d       	subi	r16, 0xD0	; 208
     2ec:	1f 4f       	sbci	r17, 0xFF	; 255
     2ee:	98 01       	movw	r18, r16
     2f0:	44 27       	eor	r20, r20
     2f2:	37 fd       	sbrc	r19, 7
     2f4:	40 95       	com	r20
     2f6:	54 2f       	mov	r21, r20
     2f8:	00 53       	subi	r16, 0x30	; 48
     2fa:	10 40       	sbci	r17, 0x00	; 0
     2fc:	8e 2d       	mov	r24, r14
     2fe:	6f 2d       	mov	r22, r15
     300:	0e 94 33 01 	call	0x266	; 0x266 <write_lcd_data>
	val=val-(100*val_buff);
     304:	8c e9       	ldi	r24, 0x9C	; 156
     306:	9f ef       	ldi	r25, 0xFF	; 255
     308:	9c 01       	movw	r18, r24
     30a:	02 9f       	mul	r16, r18
     30c:	c0 01       	movw	r24, r0
     30e:	03 9f       	mul	r16, r19
     310:	90 0d       	add	r25, r0
     312:	12 9f       	mul	r17, r18
     314:	90 0d       	add	r25, r0
     316:	11 24       	eor	r1, r1
     318:	d8 0e       	add	r13, r24

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
     31a:	8d 2d       	mov	r24, r13
     31c:	6a e0       	ldi	r22, 0x0A	; 10
     31e:	0e 94 cf 19 	call	0x339e	; 0x339e <__udivmodqi4>
     322:	08 2f       	mov	r16, r24
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	f3 94       	inc	r15
     328:	00 5d       	subi	r16, 0xD0	; 208
     32a:	1f 4f       	sbci	r17, 0xFF	; 255
     32c:	98 01       	movw	r18, r16
     32e:	44 27       	eor	r20, r20
     330:	37 fd       	sbrc	r19, 7
     332:	40 95       	com	r20
     334:	54 2f       	mov	r21, r20
     336:	00 53       	subi	r16, 0x30	; 48
     338:	10 40       	sbci	r17, 0x00	; 0
     33a:	8e 2d       	mov	r24, r14
     33c:	6f 2d       	mov	r22, r15
     33e:	0e 94 33 01 	call	0x266	; 0x266 <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     342:	f3 94       	inc	r15
     344:	86 ef       	ldi	r24, 0xF6	; 246
     346:	9f ef       	ldi	r25, 0xFF	; 255
     348:	9c 01       	movw	r18, r24
     34a:	02 9f       	mul	r16, r18
     34c:	c0 01       	movw	r24, r0
     34e:	03 9f       	mul	r16, r19
     350:	90 0d       	add	r25, r0
     352:	12 9f       	mul	r17, r18
     354:	90 0d       	add	r25, r0
     356:	11 24       	eor	r1, r1
     358:	d8 0e       	add	r13, r24
     35a:	8d 2d       	mov	r24, r13
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	c0 96       	adiw	r24, 0x30	; 48
     360:	9c 01       	movw	r18, r24
     362:	44 27       	eor	r20, r20
     364:	37 fd       	sbrc	r19, 7
     366:	40 95       	com	r20
     368:	54 2f       	mov	r21, r20
     36a:	8e 2d       	mov	r24, r14
     36c:	6f 2d       	mov	r22, r15
     36e:	0e 94 33 01 	call	0x266	; 0x266 <write_lcd_data>
}
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	08 95       	ret

0000037e <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     37e:	e8 2f       	mov	r30, r24
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	b0 96       	adiw	r30, 0x20	; 32
     384:	be 2f       	mov	r27, r30
     386:	aa 27       	eor	r26, r26
     388:	b0 97       	sbiw	r30, 0x20	; 32
     38a:	8c 91       	ld	r24, X
     38c:	80 93 e8 02 	sts	0x02E8, r24
     390:	80 fd       	sbrc	r24, 0
     392:	fb cf       	rjmp	.-10     	; 0x38a <ReadData+0xc>
    // 데이터 입력
    data = MOTOR_DATA(motor);
     394:	b8 96       	adiw	r30, 0x28	; 40
     396:	fe 2f       	mov	r31, r30
     398:	ee 27       	eor	r30, r30
     39a:	e0 81       	ld	r30, Z

	CHECK_BUSY(motor, status);
     39c:	8c 91       	ld	r24, X
     39e:	80 93 e8 02 	sts	0x02E8, r24
     3a2:	80 fd       	sbrc	r24, 0
     3a4:	fb cf       	rjmp	.-10     	; 0x39c <ReadData+0x1e>
    // 입력된 데이터 리턴
    return data;
}    
     3a6:	8e 2f       	mov	r24, r30
     3a8:	08 95       	ret

000003aa <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	80 96       	adiw	r24, 0x20	; 32
     3ae:	f8 2f       	mov	r31, r24
     3b0:	ee 27       	eor	r30, r30
     3b2:	80 81       	ld	r24, Z
     3b4:	80 93 e8 02 	sts	0x02E8, r24
     3b8:	80 fd       	sbrc	r24, 0
     3ba:	fb cf       	rjmp	.-10     	; 0x3b2 <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
     3bc:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
     3be:	80 81       	ld	r24, Z
     3c0:	80 93 e8 02 	sts	0x02E8, r24
     3c4:	80 fd       	sbrc	r24, 0
     3c6:	fb cf       	rjmp	.-10     	; 0x3be <WriteCommand+0x14>
}
     3c8:	08 95       	ret

000003ca <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	20 5e       	subi	r18, 0xE0	; 224
     3d0:	3f 4f       	sbci	r19, 0xFF	; 255
     3d2:	f2 2f       	mov	r31, r18
     3d4:	ee 27       	eor	r30, r30
     3d6:	20 52       	subi	r18, 0x20	; 32
     3d8:	30 40       	sbci	r19, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	80 93 e8 02 	sts	0x02E8, r24
     3e0:	80 fd       	sbrc	r24, 0
     3e2:	fb cf       	rjmp	.-10     	; 0x3da <WriteDataTwoByte+0x10>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
     3e4:	28 5d       	subi	r18, 0xD8	; 216
     3e6:	3f 4f       	sbci	r19, 0xFF	; 255
     3e8:	b2 2f       	mov	r27, r18
     3ea:	aa 27       	eor	r26, r26
     3ec:	7c 93       	st	X, r23
	CHECK_BUSY(motor, status);
     3ee:	80 81       	ld	r24, Z
     3f0:	80 93 e8 02 	sts	0x02E8, r24
     3f4:	80 fd       	sbrc	r24, 0
     3f6:	fb cf       	rjmp	.-10     	; 0x3ee <WriteDataTwoByte+0x24>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
     3f8:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
     3fa:	80 81       	ld	r24, Z
     3fc:	80 93 e8 02 	sts	0x02E8, r24
     400:	80 fd       	sbrc	r24, 0
     402:	fb cf       	rjmp	.-10     	; 0x3fa <WriteDataTwoByte+0x30>
}
     404:	08 95       	ret

00000406 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	d8 2e       	mov	r13, r24
     412:	7a 01       	movw	r14, r20
     414:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
     416:	98 01       	movw	r18, r16
     418:	55 27       	eor	r21, r21
     41a:	37 fd       	sbrc	r19, 7
     41c:	50 95       	com	r21
     41e:	45 2f       	mov	r20, r21
     420:	b9 01       	movw	r22, r18
     422:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
     426:	8d 2d       	mov	r24, r13
     428:	b7 01       	movw	r22, r14
     42a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
}
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	08 95       	ret

0000043a <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
     43a:	1f 93       	push	r17
     43c:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
     444:	8c ec       	ldi	r24, 0xCC	; 204
     446:	9c e1       	ldi	r25, 0x1C	; 28
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <Motor_Reset+0xe>
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
     44c:	81 2f       	mov	r24, r17
     44e:	6d e1       	ldi	r22, 0x1D	; 29
     450:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
     454:	81 2f       	mov	r24, r17
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
}
     45e:	1f 91       	pop	r17
     460:	08 95       	ret

00000462 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	18 2f       	mov	r17, r24
     478:	eb 01       	movw	r28, r22
     47a:	6a 01       	movw	r12, r20
     47c:	59 01       	movw	r10, r18
     47e:	00 e0       	ldi	r16, 0x00	; 0
     480:	61 15       	cp	r22, r1
     482:	71 05       	cpc	r23, r1
     484:	09 f0       	breq	.+2      	; 0x488 <SetGain+0x26>
     486:	01 e0       	ldi	r16, 0x01	; 1
     488:	ff 24       	eor	r15, r15
     48a:	c1 14       	cp	r12, r1
     48c:	d1 04       	cpc	r13, r1
     48e:	11 f0       	breq	.+4      	; 0x494 <SetGain+0x32>
     490:	ff 24       	eor	r15, r15
     492:	f3 94       	inc	r15
     494:	ee 24       	eor	r14, r14
     496:	a1 14       	cp	r10, r1
     498:	b1 04       	cpc	r11, r1
     49a:	11 f0       	breq	.+4      	; 0x4a0 <SetGain+0x3e>
     49c:	ee 24       	eor	r14, r14
     49e:	e3 94       	inc	r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
     4a0:	81 2f       	mov	r24, r17
     4a2:	6e e1       	ldi	r22, 0x1E	; 30
     4a4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
     4a8:	6f 2d       	mov	r22, r15
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	66 0f       	add	r22, r22
     4ae:	77 1f       	adc	r23, r23
     4b0:	66 0f       	add	r22, r22
     4b2:	77 1f       	adc	r23, r23
     4b4:	80 2f       	mov	r24, r16
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	f3 e0       	ldi	r31, 0x03	; 3
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	fa 95       	dec	r31
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <SetGain+0x58>
     4c2:	68 2b       	or	r22, r24
     4c4:	79 2b       	or	r23, r25
     4c6:	8e 2d       	mov	r24, r14
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	68 2b       	or	r22, r24
     4d0:	79 2b       	or	r23, r25
     4d2:	81 2f       	mov	r24, r17
     4d4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
     4d8:	00 23       	and	r16, r16
     4da:	21 f0       	breq	.+8      	; 0x4e4 <SetGain+0x82>
     4dc:	81 2f       	mov	r24, r17
     4de:	be 01       	movw	r22, r28
     4e0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
     4e4:	ff 20       	and	r15, r15
     4e6:	21 f0       	breq	.+8      	; 0x4f0 <SetGain+0x8e>
     4e8:	81 2f       	mov	r24, r17
     4ea:	b6 01       	movw	r22, r12
     4ec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
     4f0:	ee 20       	and	r14, r14
     4f2:	21 f0       	breq	.+8      	; 0x4fc <SetGain+0x9a>
     4f4:	81 2f       	mov	r24, r17
     4f6:	b5 01       	movw	r22, r10
     4f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
     4fc:	81 2f       	mov	r24, r17
     4fe:	64 e0       	ldi	r22, 0x04	; 4
     500:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	bf 90       	pop	r11
     516:	af 90       	pop	r10
     518:	08 95       	ret

0000051a <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	1f 93       	push	r17
     524:	18 2f       	mov	r17, r24
     526:	6a 01       	movw	r12, r20
     528:	7b 01       	movw	r14, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
     52a:	6f e1       	ldi	r22, 0x1F	; 31
     52c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
     530:	81 2f       	mov	r24, r17
     532:	60 e2       	ldi	r22, 0x20	; 32
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
     53a:	81 2f       	mov	r24, r17
     53c:	b7 01       	movw	r22, r14
     53e:	a6 01       	movw	r20, r12
     540:	0e 94 03 02 	call	0x406	; 0x406 <WriteDataFourByte>
}
     544:	1f 91       	pop	r17
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	08 95       	ret

00000550 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 10, 5, 3);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	6a e0       	ldi	r22, 0x0A	; 10
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	45 e0       	ldi	r20, 0x05	; 5
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	23 e0       	ldi	r18, 0x03	; 3
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	0e 94 31 02 	call	0x462	; 0x462 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 10, 3, 3);
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	6a e0       	ldi	r22, 0x0A	; 10
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	43 e0       	ldi	r20, 0x03	; 3
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	23 e0       	ldi	r18, 0x03	; 3
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	0e 94 31 02 	call	0x462	; 0x462 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 10, 5, 3);
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	6a e0       	ldi	r22, 0x0A	; 10
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	45 e0       	ldi	r20, 0x05	; 5
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	23 e0       	ldi	r18, 0x03	; 3
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	0e 94 31 02 	call	0x462	; 0x462 <SetGain>

    SetAcceleration(MOTOR0, 0xFFFF);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	4f ef       	ldi	r20, 0xFF	; 255
     58a:	5f ef       	ldi	r21, 0xFF	; 255
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	0e 94 8d 02 	call	0x51a	; 0x51a <SetAcceleration>
    SetAcceleration(MOTOR1, 0xFFFF);
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	4f ef       	ldi	r20, 0xFF	; 255
     598:	5f ef       	ldi	r21, 0xFF	; 255
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	0e 94 8d 02 	call	0x51a	; 0x51a <SetAcceleration>
    SetAcceleration(MOTOR2, 0xFFFF);
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	4f ef       	ldi	r20, 0xFF	; 255
     5a6:	5f ef       	ldi	r21, 0xFF	; 255
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	0e 94 8d 02 	call	0x51a	; 0x51a <SetAcceleration>
}
     5b0:	08 95       	ret

000005b2 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	d8 2e       	mov	r13, r24
     5c0:	7a 01       	movw	r14, r20
     5c2:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
     5c4:	77 fd       	sbrc	r23, 7
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <SetVelocity+0x1c>
     5c8:	cc 24       	eor	r12, r12
     5ca:	c3 94       	inc	r12
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <SetVelocity+0x2e>
		velocity*=(-1);
     5ce:	10 95       	com	r17
     5d0:	00 95       	com	r16
     5d2:	f0 94       	com	r15
     5d4:	e0 94       	com	r14
     5d6:	e1 1c       	adc	r14, r1
     5d8:	f1 1c       	adc	r15, r1
     5da:	01 1d       	adc	r16, r1
     5dc:	11 1d       	adc	r17, r1
     5de:	cc 24       	eor	r12, r12
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
     5e0:	8d 2d       	mov	r24, r13
     5e2:	6f e1       	ldi	r22, 0x1F	; 31
     5e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
     5e8:	7c 2d       	mov	r23, r12
     5ea:	72 95       	swap	r23
     5ec:	70 7f       	andi	r23, 0xF0	; 240
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	68 60       	ori	r22, 0x08	; 8
     5f2:	78 60       	ori	r23, 0x08	; 8
     5f4:	8d 2d       	mov	r24, r13
     5f6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
     5fa:	8d 2d       	mov	r24, r13
     5fc:	b8 01       	movw	r22, r16
     5fe:	a7 01       	movw	r20, r14
     600:	0e 94 03 02 	call	0x406	; 0x406 <WriteDataFourByte>
}
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	08 95       	ret

00000612 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)count
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
     612:	4f 92       	push	r4
     614:	5f 92       	push	r5
     616:	6f 92       	push	r6
     618:	7f 92       	push	r7
     61a:	8f 92       	push	r8
     61c:	9f 92       	push	r9
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	88 2e       	mov	r8, r24
     630:	96 2e       	mov	r9, r22
     632:	29 01       	movw	r4, r18
     634:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
     636:	6f e1       	ldi	r22, 0x1F	; 31
     638:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
     63c:	8a e2       	ldi	r24, 0x2A	; 42
     63e:	98 2a       	or	r9, r24
     640:	88 2d       	mov	r24, r8
     642:	69 2d       	mov	r22, r9
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
     64a:	88 2d       	mov	r24, r8
     64c:	b3 01       	movw	r22, r6
     64e:	a2 01       	movw	r20, r4
     650:	0e 94 03 02 	call	0x406	; 0x406 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
     654:	88 2d       	mov	r24, r8
     656:	b8 01       	movw	r22, r16
     658:	a7 01       	movw	r20, r14
     65a:	0e 94 03 02 	call	0x406	; 0x406 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
     65e:	88 2d       	mov	r24, r8
     660:	b6 01       	movw	r22, r12
     662:	a5 01       	movw	r20, r10
     664:	0e 94 03 02 	call	0x406	; 0x406 <WriteDataFourByte>
}
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	7f 90       	pop	r7
     67e:	6f 90       	pop	r6
     680:	5f 90       	pop	r5
     682:	4f 90       	pop	r4
     684:	08 95       	ret

00000686 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
     686:	3f 92       	push	r3
     688:	4f 92       	push	r4
     68a:	5f 92       	push	r5
     68c:	6f 92       	push	r6
     68e:	7f 92       	push	r7
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <LM629_HW_Reset+0x24>
     6aa:	0f 92       	push	r0
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	5e 01       	movw	r10, r28
     6b4:	08 94       	sec
     6b6:	a1 1c       	adc	r10, r1
     6b8:	b1 1c       	adc	r11, r1
     6ba:	f5 01       	movw	r30, r10
     6bc:	89 2f       	mov	r24, r25
     6be:	11 92       	st	Z+, r1
     6c0:	8a 95       	dec	r24
     6c2:	e9 f7       	brne	.-6      	; 0x6be <LM629_HW_Reset+0x38>
	
	DDRA=0x00;
     6c4:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
     6c6:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
     6cc:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
     6d0:	90 93 64 00 	sts	0x0064, r25
     6d4:	23 e3       	ldi	r18, 0x33	; 51
     6d6:	62 2e       	mov	r6, r18
     6d8:	2b e2       	ldi	r18, 0x2B	; 43
     6da:	72 2e       	mov	r7, r18
		}
		
		if(step==1){
			
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
     6dc:	9c ec       	ldi	r25, 0xCC	; 204
     6de:	89 2e       	mov	r8, r25
     6e0:	9c e1       	ldi	r25, 0x1C	; 28
     6e2:	99 2e       	mov	r9, r25
     6e4:	80 e8       	ldi	r24, 0x80	; 128
     6e6:	38 2e       	mov	r3, r24
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
     6e8:	02 e0       	ldi	r16, 0x02	; 2
     6ea:	40 2e       	mov	r4, r16
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
     6ec:	14 e8       	ldi	r17, 0x84	; 132
     6ee:	51 2e       	mov	r5, r17
     6f0:	0a 2d       	mov	r16, r10
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
     6f2:	85 b3       	in	r24, 0x15	; 21
     6f4:	85 60       	ori	r24, 0x05	; 5
     6f6:	85 bb       	out	0x15, r24	; 21
     6f8:	c3 01       	movw	r24, r6
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <LM629_HW_Reset+0x74>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
     6fe:	85 b3       	in	r24, 0x15	; 21
     700:	8a 7f       	andi	r24, 0xFA	; 250
     702:	85 bb       	out	0x15, r24	; 21
     704:	c4 01       	movw	r24, r8
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LM629_HW_Reset+0x80>
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
     70a:	80 91 65 00 	lds	r24, 0x0065
     70e:	8d 7f       	andi	r24, 0xFD	; 253
     710:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
     714:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
     716:	85 b3       	in	r24, 0x15	; 21
     718:	88 7f       	andi	r24, 0xF8	; 248
     71a:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
     71c:	29 b3       	in	r18, 0x19	; 25
				
				PORTC |=0x01;	//cs motor1
     71e:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
     720:	99 b3       	in	r25, 0x19	; 25
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
     722:	85 b3       	in	r24, 0x15	; 21
     724:	88 7f       	andi	r24, 0xF8	; 248
     726:	82 60       	ori	r24, 0x02	; 2
     728:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
     72a:	89 b3       	in	r24, 0x19	; 25

				
				if( (status[0]==0xC4||status[0]==0x84) && 
     72c:	24 3c       	cpi	r18, 0xC4	; 196
     72e:	19 f0       	breq	.+6      	; 0x736 <LM629_HW_Reset+0xb0>
     730:	24 38       	cpi	r18, 0x84	; 132
     732:	09 f0       	breq	.+2      	; 0x736 <LM629_HW_Reset+0xb0>
     734:	3f c0       	rjmp	.+126    	; 0x7b4 <LM629_HW_Reset+0x12e>
     736:	94 3c       	cpi	r25, 0xC4	; 196
     738:	11 f0       	breq	.+4      	; 0x73e <LM629_HW_Reset+0xb8>
     73a:	94 38       	cpi	r25, 0x84	; 132
     73c:	d9 f5       	brne	.+118    	; 0x7b4 <LM629_HW_Reset+0x12e>
     73e:	84 3c       	cpi	r24, 0xC4	; 196
     740:	11 f0       	breq	.+4      	; 0x746 <LM629_HW_Reset+0xc0>
     742:	84 38       	cpi	r24, 0x84	; 132
     744:	b9 f5       	brne	.+110    	; 0x7b4 <LM629_HW_Reset+0x12e>
     746:	8b 83       	std	Y+3, r24	; 0x03
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	29 83       	std	Y+1, r18	; 0x01
		}
		
		if(step==1){
			
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
     74c:	35 be       	out	0x35, r3	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
     74e:	40 92 6d 00 	sts	0x006D, r4
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
     752:	50 92 6c 00 	sts	0x006C, r5
     756:	65 01       	movw	r12, r10
     758:	e1 2c       	mov	r14, r1
     75a:	b0 e2       	ldi	r27, 0x20	; 32
     75c:	fb 2e       	mov	r15, r27
     75e:	1c 2d       	mov	r17, r12
     760:	10 1b       	sub	r17, r16
			while(1){
				for(i=0;i<3;++i){
					WriteCommand(i, RSTI);
     762:	81 2f       	mov	r24, r17
     764:	6d e1       	ldi	r22, 0x1D	; 29
     766:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
     76a:	81 2f       	mov	r24, r17
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
     774:	f7 01       	movw	r30, r14
     776:	80 81       	ld	r24, Z
     778:	f6 01       	movw	r30, r12
     77a:	81 93       	st	Z+, r24
     77c:	6f 01       	movw	r12, r30
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	e8 0e       	add	r14, r24
     784:	f9 1e       	adc	r15, r25
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	e9 16       	cp	r14, r25
     78a:	93 e2       	ldi	r25, 0x23	; 35
     78c:	f9 06       	cpc	r15, r25
     78e:	39 f7       	brne	.-50     	; 0x75e <LM629_HW_Reset+0xd8>
					WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}

				if( (status[0]==0xC0||status[0]==0x80)  && 
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	80 3c       	cpi	r24, 0xC0	; 192
     794:	11 f0       	breq	.+4      	; 0x79a <LM629_HW_Reset+0x114>
     796:	80 38       	cpi	r24, 0x80	; 128
     798:	51 f4       	brne	.+20     	; 0x7ae <LM629_HW_Reset+0x128>
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	80 3c       	cpi	r24, 0xC0	; 192
     79e:	11 f0       	breq	.+4      	; 0x7a4 <LM629_HW_Reset+0x11e>
     7a0:	80 38       	cpi	r24, 0x80	; 128
     7a2:	29 f4       	brne	.+10     	; 0x7ae <LM629_HW_Reset+0x128>
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	80 3c       	cpi	r24, 0xC0	; 192
     7a8:	69 f0       	breq	.+26     	; 0x7c4 <LM629_HW_Reset+0x13e>
     7aa:	80 38       	cpi	r24, 0x80	; 128
     7ac:	59 f0       	breq	.+22     	; 0x7c4 <LM629_HW_Reset+0x13e>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
     7ae:	85 b7       	in	r24, 0x35	; 53
     7b0:	8f 73       	andi	r24, 0x3F	; 63
     7b2:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
     7b4:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	51 e0       	ldi	r21, 0x01	; 1
     7be:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_display_str>
     7c2:	97 cf       	rjmp	.-210    	; 0x6f2 <LM629_HW_Reset+0x6c>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	4f e0       	ldi	r20, 0x0F	; 15
     7ca:	51 e0       	ldi	r21, 0x01	; 1
     7cc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_display_str>
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	40 e7       	ldi	r20, 0x70	; 112
     7d4:	51 e0       	ldi	r21, 0x01	; 1
			for(i=0;i<3;++i){
				PORTB|=0x07;
     7d6:	88 b3       	in	r24, 0x18	; 24
     7d8:	87 60       	ori	r24, 0x07	; 7
     7da:	88 bb       	out	0x18, r24	; 24
     7dc:	8c ed       	ldi	r24, 0xDC	; 220
     7de:	95 e0       	ldi	r25, 0x05	; 5
     7e0:	fa 01       	movw	r30, r20
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LM629_HW_Reset+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e8:	d9 f7       	brne	.-10     	; 0x7e0 <LM629_HW_Reset+0x15a>
				_delay_ms(150);
				PORTB&=~0x07;
     7ea:	88 b3       	in	r24, 0x18	; 24
     7ec:	88 7f       	andi	r24, 0xF8	; 248
     7ee:	88 bb       	out	0x18, r24	; 24
     7f0:	8c ed       	ldi	r24, 0xDC	; 220
     7f2:	95 e0       	ldi	r25, 0x05	; 5
     7f4:	fa 01       	movw	r30, r20
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <LM629_HW_Reset+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fc:	d9 f7       	brne	.-10     	; 0x7f4 <LM629_HW_Reset+0x16e>
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	23 30       	cpi	r18, 0x03	; 3
     802:	49 f7       	brne	.-46     	; 0x7d6 <LM629_HW_Reset+0x150>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
     804:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_clear_screen>
			break;
		}
	}
}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	bf 90       	pop	r11
     820:	af 90       	pop	r10
     822:	9f 90       	pop	r9
     824:	8f 90       	pop	r8
     826:	7f 90       	pop	r7
     828:	6f 90       	pop	r6
     82a:	5f 90       	pop	r5
     82c:	4f 90       	pop	r4
     82e:	3f 90       	pop	r3
     830:	08 95       	ret

00000832 <StartMotion>:
// Parameter : 없음
// Return    : 없음
void StartMotion(void)

{
    WriteCommand(MOTOR0, STT);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    WriteCommand(MOTOR1, STT);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    WriteCommand(MOTOR2, STT);
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
}
     84a:	08 95       	ret

0000084c <MOTOR_CTR>:
    WriteCommand(MOTOR0, STT);
    WriteCommand(MOTOR1, STT);
    WriteCommand(MOTOR2, STT);
}

void MOTOR_CTR(long MT0,long MT1,long MT2){
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	df 93       	push	r29
     85e:	cf 93       	push	r28
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	2c 97       	sbiw	r28, 0x0c	; 12
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	59 01       	movw	r10, r18
     872:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
     874:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
     878:	69 83       	std	Y+1, r22	; 0x01
     87a:	7a 83       	std	Y+2, r23	; 0x02
     87c:	8b 83       	std	Y+3, r24	; 0x03
     87e:	9c 83       	std	Y+4, r25	; 0x04
     880:	c6 01       	movw	r24, r12
     882:	b5 01       	movw	r22, r10
     884:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
     888:	6d 83       	std	Y+5, r22	; 0x05
     88a:	7e 83       	std	Y+6, r23	; 0x06
     88c:	8f 83       	std	Y+7, r24	; 0x07
     88e:	98 87       	std	Y+8, r25	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
     898:	69 87       	std	Y+9, r22	; 0x09
     89a:	7a 87       	std	Y+10, r23	; 0x0a
     89c:	8b 87       	std	Y+11, r24	; 0x0b
     89e:	9c 87       	std	Y+12, r25	; 0x0c
     8a0:	8e 01       	movw	r16, r28
     8a2:	0f 5f       	subi	r16, 0xFF	; 255
     8a4:	1f 4f       	sbci	r17, 0xFF	; 255
     8a6:	ff 24       	eor	r15, r15

	for(i=0;i<3;++i){
		
		V[i]=V[i]*0.2728;
     8a8:	f8 01       	movw	r30, r16
     8aa:	60 81       	ld	r22, Z
     8ac:	71 81       	ldd	r23, Z+1	; 0x01
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	93 81       	ldd	r25, Z+3	; 0x03
     8b2:	21 e7       	ldi	r18, 0x71	; 113
     8b4:	3c ea       	ldi	r19, 0xAC	; 172
     8b6:	4b e8       	ldi	r20, 0x8B	; 139
     8b8:	5e e3       	ldi	r21, 0x3E	; 62
     8ba:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     8be:	f8 01       	movw	r30, r16
     8c0:	61 93       	st	Z+, r22
     8c2:	71 93       	st	Z+, r23
     8c4:	81 93       	st	Z+, r24
     8c6:	91 93       	st	Z+, r25
     8c8:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e8       	ldi	r20, 0x80	; 128
     8d0:	57 e4       	ldi	r21, 0x47	; 71
     8d2:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     8d6:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
     8da:	ab 01       	movw	r20, r22
     8dc:	bc 01       	movw	r22, r24
     8de:	8f 2d       	mov	r24, r15
     8e0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
     8e4:	f3 94       	inc	r15
     8e6:	f3 e0       	ldi	r31, 0x03	; 3
     8e8:	ff 16       	cp	r15, r31
     8ea:	f1 f6       	brne	.-68     	; 0x8a8 <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
     8ec:	0e 94 19 04 	call	0x832	; 0x832 <StartMotion>
}
     8f0:	2c 96       	adiw	r28, 0x0c	; 12
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	cf 91       	pop	r28
     8fe:	df 91       	pop	r29
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	df 90       	pop	r13
     90a:	cf 90       	pop	r12
     90c:	bf 90       	pop	r11
     90e:	af 90       	pop	r10
     910:	08 95       	ret

00000912 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	f8 2e       	mov	r15, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	6f e1       	ldi	r22, 0x1F	; 31
     91e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
     922:	01 e0       	ldi	r16, 0x01	; 1
     924:	10 e0       	ldi	r17, 0x00	; 0
     926:	02 c0       	rjmp	.+4      	; 0x92c <StopMotion+0x1a>
     928:	00 0f       	add	r16, r16
     92a:	11 1f       	adc	r17, r17
     92c:	fa 94       	dec	r15
     92e:	e2 f7       	brpl	.-8      	; 0x928 <StopMotion+0x16>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	b8 01       	movw	r22, r16
     934:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	6f e1       	ldi	r22, 0x1F	; 31
     93c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	b8 01       	movw	r22, r16
     944:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
     948:	82 e0       	ldi	r24, 0x02	; 2
     94a:	6f e1       	ldi	r22, 0x1F	; 31
     94c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	b8 01       	movw	r22, r16
     954:	0e 94 e5 01 	call	0x3ca	; 0x3ca <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    WriteCommand(MOTOR1, STT);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
    WriteCommand(MOTOR2, STT);
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <WriteCommand>
}
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	08 95       	ret

00000978 <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
     978:	82 b1       	in	r24, 0x02	; 2
     97a:	83 7e       	andi	r24, 0xE3	; 227
     97c:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
     97e:	e4 e6       	ldi	r30, 0x64	; 100
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	87 7e       	andi	r24, 0xE7	; 231
     986:	80 83       	st	Z, r24

    UCSR0A = 0x00;
     988:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
     98a:	88 e9       	ldi	r24, 0x98	; 152
     98c:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
     994:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
     998:	8f e0       	ldi	r24, 0x0F	; 15
     99a:	89 b9       	out	0x09, r24	; 9

    sei();
     99c:	78 94       	sei
}
     99e:	08 95       	ret

000009a0 <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	0b b6       	in	r0, 0x3b	; 59
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
     9ba:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
     9bc:	8b b1       	in	r24, 0x0b	; 11
     9be:	88 7b       	andi	r24, 0xB8	; 184
     9c0:	e9 f3       	breq	.-6      	; 0x9bc <__vector_18+0x1c>

    if(rxbuf == 0xFF)
     9c2:	9f 3f       	cpi	r25, 0xFF	; 255
     9c4:	21 f4       	brne	.+8      	; 0x9ce <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 4c 02 	sts	0x024C, r24
     9cc:	49 c0       	rjmp	.+146    	; 0xa60 <__vector_18+0xc0>
    }
    else if(rx_en == 1)
     9ce:	80 91 4c 02 	lds	r24, 0x024C
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_18+0x38>
     9d6:	44 c0       	rjmp	.+136    	; 0xa60 <__vector_18+0xc0>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
     9d8:	80 91 4b 02 	lds	r24, 0x024B
     9dc:	e8 2f       	mov	r30, r24
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	e1 5c       	subi	r30, 0xC1	; 193
     9e2:	fd 4f       	sbci	r31, 0xFD	; 253
     9e4:	90 83       	st	Z, r25
     9e6:	8f 5f       	subi	r24, 0xFF	; 255
     9e8:	80 93 4b 02 	sts	0x024B, r24

        if(rx_cnt > 10)
     9ec:	80 91 4b 02 	lds	r24, 0x024B
     9f0:	8b 30       	cpi	r24, 0x0B	; 11
     9f2:	b0 f1       	brcs	.+108    	; 0xa60 <__vector_18+0xc0>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
     9f4:	10 92 4b 02 	sts	0x024B, r1
     9f8:	80 91 4b 02 	lds	r24, 0x024B
     9fc:	80 93 4c 02 	sts	0x024C, r24
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
     a04:	80 91 4a 02 	lds	r24, 0x024A
     a08:	f9 01       	movw	r30, r18
     a0a:	e1 5c       	subi	r30, 0xC1	; 193
     a0c:	fd 4f       	sbci	r31, 0xFD	; 253
     a0e:	90 81       	ld	r25, Z
     a10:	98 0f       	add	r25, r24
     a12:	90 93 4a 02 	sts	0x024A, r25
     a16:	2f 5f       	subi	r18, 0xFF	; 255
     a18:	3f 4f       	sbci	r19, 0xFF	; 255
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
     a1a:	2a 30       	cpi	r18, 0x0A	; 10
     a1c:	31 05       	cpc	r19, r1
     a1e:	91 f7       	brne	.-28     	; 0xa04 <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
     a20:	80 91 4a 02 	lds	r24, 0x024A
     a24:	8f 3f       	cpi	r24, 0xFF	; 255
     a26:	29 f4       	brne	.+10     	; 0xa32 <__vector_18+0x92>
     a28:	80 91 4a 02 	lds	r24, 0x024A
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	80 93 4a 02 	sts	0x024A, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
     a32:	90 91 4a 02 	lds	r25, 0x024A
     a36:	80 91 49 02 	lds	r24, 0x0249
     a3a:	98 17       	cp	r25, r24
     a3c:	79 f4       	brne	.+30     	; 0xa5c <__vector_18+0xbc>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
     a42:	f9 01       	movw	r30, r18
     a44:	e1 5c       	subi	r30, 0xC1	; 193
     a46:	fd 4f       	sbci	r31, 0xFD	; 253
     a48:	80 81       	ld	r24, Z
     a4a:	f9 01       	movw	r30, r18
     a4c:	e4 51       	subi	r30, 0x14	; 20
     a4e:	fd 4f       	sbci	r31, 0xFD	; 253
     a50:	80 83       	st	Z, r24
     a52:	2f 5f       	subi	r18, 0xFF	; 255
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
     a56:	2a 30       	cpi	r18, 0x0A	; 10
     a58:	31 05       	cpc	r19, r1
     a5a:	99 f7       	brne	.-26     	; 0xa42 <__vector_18+0xa2>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
     a5c:	10 92 4a 02 	sts	0x024A, r1
    	}
    }
}
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	3f 91       	pop	r19
     a6a:	2f 91       	pop	r18
     a6c:	0f 90       	pop	r0
     a6e:	0b be       	out	0x3b, r0	; 59
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <Camera_Cmd>:
		buff=getchar1();
		if(buff)break;
	}
}

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <Camera_Cmd+0x6>
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
     a84:	19 82       	std	Y+1, r1	; 0x01
     a86:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
     a88:	9a e0       	ldi	r25, 0x0A	; 10
     a8a:	89 9f       	mul	r24, r25
     a8c:	c0 01       	movw	r24, r0
     a8e:	11 24       	eor	r1, r1
     a90:	68 0f       	add	r22, r24
     a92:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	0e 94 c5 00 	call	0x18a	; 0x18a <putchar1>
	while(!rx1_flg);
     a9a:	80 91 3a 02 	lds	r24, 0x023A
     a9e:	88 23       	and	r24, r24
     aa0:	e1 f3       	breq	.-8      	; 0xa9a <Camera_Cmd+0x20>
	buff=getchar1();
     aa2:	0e 94 bc 00 	call	0x178	; 0x178 <getchar1>
     aa6:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
     ab4:	8b e0       	ldi	r24, 0x0B	; 11
     ab6:	0e 94 c5 00 	call	0x18a	; 0x18a <putchar1>
		while(!rx1_flg); 
     aba:	80 91 3a 02 	lds	r24, 0x023A
     abe:	88 23       	and	r24, r24
     ac0:	e1 f3       	breq	.-8      	; 0xaba <Camera_init+0x6>
		buff=getchar1();
     ac2:	0e 94 bc 00 	call	0x178	; 0x178 <getchar1>
		if(buff){
     ac6:	88 23       	and	r24, r24
     ac8:	a9 f3       	breq	.-22     	; 0xab4 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
     aca:	81 e1       	ldi	r24, 0x11	; 17
     acc:	0e 94 c5 00 	call	0x18a	; 0x18a <putchar1>
		putchar1(255);
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	0e 94 c5 00 	call	0x18a	; 0x18a <putchar1>
		while(!rx1_flg);
     ad6:	80 91 3a 02 	lds	r24, 0x023A
     ada:	88 23       	and	r24, r24
     adc:	e1 f3       	breq	.-8      	; 0xad6 <Camera_init+0x22>
		buff=getchar1();
     ade:	0e 94 bc 00 	call	0x178	; 0x178 <getchar1>
		if(buff)break;
     ae2:	88 23       	and	r24, r24
     ae4:	91 f3       	breq	.-28     	; 0xaca <Camera_init+0x16>
	}
}
     ae6:	08 95       	ret

00000ae8 <__vector_14>:
	non_Holonomic(0, 0, 0);
	lcd_clear_screen();
}

ISR (TIMER1_OVF_vect)
{
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	0b b6       	in	r0, 0x3b	; 59
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
//	TCNT1H=0xC7; TCNT1L=0xC0; //1초

//	TCNT1H=0xFA; TCNT1L=0x60; //0.1초

	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	8d bd       	out	0x2d, r24	; 45
     b12:	80 e7       	ldi	r24, 0x70	; 112
     b14:	8c bd       	out	0x2c, r24	; 44

	++sec;
     b16:	80 91 5d 02 	lds	r24, 0x025D
     b1a:	90 91 5e 02 	lds	r25, 0x025E
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 5e 02 	sts	0x025E, r25
     b24:	80 93 5d 02 	sts	0x025D, r24

	if(next_speed>speed){
     b28:	60 91 51 02 	lds	r22, 0x0251
     b2c:	70 91 52 02 	lds	r23, 0x0252
     b30:	80 91 53 02 	lds	r24, 0x0253
     b34:	90 91 54 02 	lds	r25, 0x0254
     b38:	20 91 4d 02 	lds	r18, 0x024D
     b3c:	30 91 4e 02 	lds	r19, 0x024E
     b40:	40 91 4f 02 	lds	r20, 0x024F
     b44:	50 91 50 02 	lds	r21, 0x0250
     b48:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__gtsf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	84 f5       	brge	.+96     	; 0xbb0 <__vector_14+0xc8>
		speed+=acc;
     b50:	60 91 4d 02 	lds	r22, 0x024D
     b54:	70 91 4e 02 	lds	r23, 0x024E
     b58:	80 91 4f 02 	lds	r24, 0x024F
     b5c:	90 91 50 02 	lds	r25, 0x0250
     b60:	20 91 25 01 	lds	r18, 0x0125
     b64:	30 91 26 01 	lds	r19, 0x0126
     b68:	40 91 27 01 	lds	r20, 0x0127
     b6c:	50 91 28 01 	lds	r21, 0x0128
     b70:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     b74:	60 93 4d 02 	sts	0x024D, r22
     b78:	70 93 4e 02 	sts	0x024E, r23
     b7c:	80 93 4f 02 	sts	0x024F, r24
     b80:	90 93 50 02 	sts	0x0250, r25
		if(next_speed<=speed)speed=next_speed;
     b84:	60 91 51 02 	lds	r22, 0x0251
     b88:	70 91 52 02 	lds	r23, 0x0252
     b8c:	80 91 53 02 	lds	r24, 0x0253
     b90:	90 91 54 02 	lds	r25, 0x0254
     b94:	20 91 4d 02 	lds	r18, 0x024D
     b98:	30 91 4e 02 	lds	r19, 0x024E
     b9c:	40 91 4f 02 	lds	r20, 0x024F
     ba0:	50 91 50 02 	lds	r21, 0x0250
     ba4:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__lesf2>
     ba8:	18 16       	cp	r1, r24
     baa:	0c f4       	brge	.+2      	; 0xbae <__vector_14+0xc6>
     bac:	54 c0       	rjmp	.+168    	; 0xc56 <__vector_14+0x16e>
     bae:	43 c0       	rjmp	.+134    	; 0xc36 <__vector_14+0x14e>
	}
	else if(next_speed<speed){
     bb0:	60 91 51 02 	lds	r22, 0x0251
     bb4:	70 91 52 02 	lds	r23, 0x0252
     bb8:	80 91 53 02 	lds	r24, 0x0253
     bbc:	90 91 54 02 	lds	r25, 0x0254
     bc0:	20 91 4d 02 	lds	r18, 0x024D
     bc4:	30 91 4e 02 	lds	r19, 0x024E
     bc8:	40 91 4f 02 	lds	r20, 0x024F
     bcc:	50 91 50 02 	lds	r21, 0x0250
     bd0:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	0c f0       	brlt	.+2      	; 0xbda <__vector_14+0xf2>
     bd8:	3e c0       	rjmp	.+124    	; 0xc56 <__vector_14+0x16e>
		speed-=acc;
     bda:	60 91 4d 02 	lds	r22, 0x024D
     bde:	70 91 4e 02 	lds	r23, 0x024E
     be2:	80 91 4f 02 	lds	r24, 0x024F
     be6:	90 91 50 02 	lds	r25, 0x0250
     bea:	20 91 25 01 	lds	r18, 0x0125
     bee:	30 91 26 01 	lds	r19, 0x0126
     bf2:	40 91 27 01 	lds	r20, 0x0127
     bf6:	50 91 28 01 	lds	r21, 0x0128
     bfa:	0e 94 97 14 	call	0x292e	; 0x292e <__subsf3>
     bfe:	60 93 4d 02 	sts	0x024D, r22
     c02:	70 93 4e 02 	sts	0x024E, r23
     c06:	80 93 4f 02 	sts	0x024F, r24
     c0a:	90 93 50 02 	sts	0x0250, r25
		if(next_speed>=speed)speed=next_speed;
     c0e:	60 91 51 02 	lds	r22, 0x0251
     c12:	70 91 52 02 	lds	r23, 0x0252
     c16:	80 91 53 02 	lds	r24, 0x0253
     c1a:	90 91 54 02 	lds	r25, 0x0254
     c1e:	20 91 4d 02 	lds	r18, 0x024D
     c22:	30 91 4e 02 	lds	r19, 0x024E
     c26:	40 91 4f 02 	lds	r20, 0x024F
     c2a:	50 91 50 02 	lds	r21, 0x0250
     c2e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
     c32:	88 23       	and	r24, r24
     c34:	84 f0       	brlt	.+32     	; 0xc56 <__vector_14+0x16e>
     c36:	80 91 51 02 	lds	r24, 0x0251
     c3a:	90 91 52 02 	lds	r25, 0x0252
     c3e:	a0 91 53 02 	lds	r26, 0x0253
     c42:	b0 91 54 02 	lds	r27, 0x0254
     c46:	80 93 4d 02 	sts	0x024D, r24
     c4a:	90 93 4e 02 	sts	0x024E, r25
     c4e:	a0 93 4f 02 	sts	0x024F, r26
     c52:	b0 93 50 02 	sts	0x0250, r27
	}
	if(next_wspeed>wspeed){
     c56:	60 91 59 02 	lds	r22, 0x0259
     c5a:	70 91 5a 02 	lds	r23, 0x025A
     c5e:	80 91 5b 02 	lds	r24, 0x025B
     c62:	90 91 5c 02 	lds	r25, 0x025C
     c66:	20 91 55 02 	lds	r18, 0x0255
     c6a:	30 91 56 02 	lds	r19, 0x0256
     c6e:	40 91 57 02 	lds	r20, 0x0257
     c72:	50 91 58 02 	lds	r21, 0x0258
     c76:	0e 94 ef 15 	call	0x2bde	; 0x2bde <__gtsf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	84 f5       	brge	.+96     	; 0xcde <__vector_14+0x1f6>
		wspeed+=acc_W;
     c7e:	60 91 55 02 	lds	r22, 0x0255
     c82:	70 91 56 02 	lds	r23, 0x0256
     c86:	80 91 57 02 	lds	r24, 0x0257
     c8a:	90 91 58 02 	lds	r25, 0x0258
     c8e:	20 91 2d 01 	lds	r18, 0x012D
     c92:	30 91 2e 01 	lds	r19, 0x012E
     c96:	40 91 2f 01 	lds	r20, 0x012F
     c9a:	50 91 30 01 	lds	r21, 0x0130
     c9e:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     ca2:	60 93 55 02 	sts	0x0255, r22
     ca6:	70 93 56 02 	sts	0x0256, r23
     caa:	80 93 57 02 	sts	0x0257, r24
     cae:	90 93 58 02 	sts	0x0258, r25
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
     cb2:	60 91 59 02 	lds	r22, 0x0259
     cb6:	70 91 5a 02 	lds	r23, 0x025A
     cba:	80 91 5b 02 	lds	r24, 0x025B
     cbe:	90 91 5c 02 	lds	r25, 0x025C
     cc2:	20 91 55 02 	lds	r18, 0x0255
     cc6:	30 91 56 02 	lds	r19, 0x0256
     cca:	40 91 57 02 	lds	r20, 0x0257
     cce:	50 91 58 02 	lds	r21, 0x0258
     cd2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__lesf2>
     cd6:	18 16       	cp	r1, r24
     cd8:	0c f4       	brge	.+2      	; 0xcdc <__vector_14+0x1f4>
     cda:	54 c0       	rjmp	.+168    	; 0xd84 <__vector_14+0x29c>
     cdc:	43 c0       	rjmp	.+134    	; 0xd64 <__vector_14+0x27c>
	}
	else if(next_wspeed<wspeed){
     cde:	60 91 59 02 	lds	r22, 0x0259
     ce2:	70 91 5a 02 	lds	r23, 0x025A
     ce6:	80 91 5b 02 	lds	r24, 0x025B
     cea:	90 91 5c 02 	lds	r25, 0x025C
     cee:	20 91 55 02 	lds	r18, 0x0255
     cf2:	30 91 56 02 	lds	r19, 0x0256
     cf6:	40 91 57 02 	lds	r20, 0x0257
     cfa:	50 91 58 02 	lds	r21, 0x0258
     cfe:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	0c f0       	brlt	.+2      	; 0xd08 <__vector_14+0x220>
     d06:	3e c0       	rjmp	.+124    	; 0xd84 <__vector_14+0x29c>
		wspeed-=acc_W;
     d08:	60 91 55 02 	lds	r22, 0x0255
     d0c:	70 91 56 02 	lds	r23, 0x0256
     d10:	80 91 57 02 	lds	r24, 0x0257
     d14:	90 91 58 02 	lds	r25, 0x0258
     d18:	20 91 2d 01 	lds	r18, 0x012D
     d1c:	30 91 2e 01 	lds	r19, 0x012E
     d20:	40 91 2f 01 	lds	r20, 0x012F
     d24:	50 91 30 01 	lds	r21, 0x0130
     d28:	0e 94 97 14 	call	0x292e	; 0x292e <__subsf3>
     d2c:	60 93 55 02 	sts	0x0255, r22
     d30:	70 93 56 02 	sts	0x0256, r23
     d34:	80 93 57 02 	sts	0x0257, r24
     d38:	90 93 58 02 	sts	0x0258, r25
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
     d3c:	60 91 59 02 	lds	r22, 0x0259
     d40:	70 91 5a 02 	lds	r23, 0x025A
     d44:	80 91 5b 02 	lds	r24, 0x025B
     d48:	90 91 5c 02 	lds	r25, 0x025C
     d4c:	20 91 55 02 	lds	r18, 0x0255
     d50:	30 91 56 02 	lds	r19, 0x0256
     d54:	40 91 57 02 	lds	r20, 0x0257
     d58:	50 91 58 02 	lds	r21, 0x0258
     d5c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
     d60:	88 23       	and	r24, r24
     d62:	84 f0       	brlt	.+32     	; 0xd84 <__vector_14+0x29c>
     d64:	80 91 59 02 	lds	r24, 0x0259
     d68:	90 91 5a 02 	lds	r25, 0x025A
     d6c:	a0 91 5b 02 	lds	r26, 0x025B
     d70:	b0 91 5c 02 	lds	r27, 0x025C
     d74:	80 93 55 02 	sts	0x0255, r24
     d78:	90 93 56 02 	sts	0x0256, r25
     d7c:	a0 93 57 02 	sts	0x0257, r26
     d80:	b0 93 58 02 	sts	0x0258, r27
	}
}
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0b be       	out	0x3b, r0	; 59
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <non_Holonomic>:
	}	

	non_Holonomic(Fx,Fy,Fw);
}

void non_Holonomic(float Fx, float Fy, float Fw){
     daa:	2f 92       	push	r2
     dac:	3f 92       	push	r3
     dae:	4f 92       	push	r4
     db0:	5f 92       	push	r5
     db2:	6f 92       	push	r6
     db4:	7f 92       	push	r7
     db6:	8f 92       	push	r8
     db8:	9f 92       	push	r9
     dba:	af 92       	push	r10
     dbc:	bf 92       	push	r11
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	1b 01       	movw	r2, r22
     dcc:	2c 01       	movw	r4, r24
     dce:	59 01       	movw	r10, r18
     dd0:	6a 01       	movw	r12, r20

	float V[3]={0,0,0};

	V[0]=( 0.056*Fx)+(0.033*Fy)+(0.14*Fw);
     dd2:	ca 01       	movw	r24, r20
     dd4:	b9 01       	movw	r22, r18
     dd6:	22 e0       	ldi	r18, 0x02	; 2
     dd8:	3b e2       	ldi	r19, 0x2B	; 43
     dda:	47 e0       	ldi	r20, 0x07	; 7
     ddc:	5d e3       	ldi	r21, 0x3D	; 61
     dde:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     de2:	3b 01       	movw	r6, r22
     de4:	4c 01       	movw	r8, r24
     de6:	c8 01       	movw	r24, r16
     de8:	b7 01       	movw	r22, r14
     dea:	29 e2       	ldi	r18, 0x29	; 41
     dec:	3c e5       	ldi	r19, 0x5C	; 92
     dee:	4f e0       	ldi	r20, 0x0F	; 15
     df0:	5e e3       	ldi	r21, 0x3E	; 62
     df2:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     df6:	7b 01       	movw	r14, r22
     df8:	8c 01       	movw	r16, r24
	V[1]=(-0.065*Fy)+(0.14*Fw);
	V[2]=(-0.056*Fx)+(0.033*Fy)+(0.14*Fw);

	SetVelocity(0, V[0]*65536);
     dfa:	c2 01       	movw	r24, r4
     dfc:	b1 01       	movw	r22, r2
     dfe:	22 e4       	ldi	r18, 0x42	; 66
     e00:	30 e6       	ldi	r19, 0x60	; 96
     e02:	45 e6       	ldi	r20, 0x65	; 101
     e04:	5d e3       	ldi	r21, 0x3D	; 61
     e06:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     e0a:	a4 01       	movw	r20, r8
     e0c:	93 01       	movw	r18, r6
     e0e:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     e12:	a8 01       	movw	r20, r16
     e14:	97 01       	movw	r18, r14
     e16:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e8       	ldi	r20, 0x80	; 128
     e20:	57 e4       	ldi	r21, 0x47	; 71
     e22:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     e26:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
     e2a:	ab 01       	movw	r20, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SetVelocity>
	SetVelocity(1, V[1]*65536);
     e34:	c6 01       	movw	r24, r12
     e36:	b5 01       	movw	r22, r10
     e38:	28 eb       	ldi	r18, 0xB8	; 184
     e3a:	3e e1       	ldi	r19, 0x1E	; 30
     e3c:	45 e8       	ldi	r20, 0x85	; 133
     e3e:	5d eb       	ldi	r21, 0xBD	; 189
     e40:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     e44:	a8 01       	movw	r20, r16
     e46:	97 01       	movw	r18, r14
     e48:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e8       	ldi	r20, 0x80	; 128
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     e58:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
     e5c:	ab 01       	movw	r20, r22
     e5e:	bc 01       	movw	r22, r24
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SetVelocity>
	SetVelocity(2, V[2]*65536);
     e66:	c2 01       	movw	r24, r4
     e68:	b1 01       	movw	r22, r2
     e6a:	22 e4       	ldi	r18, 0x42	; 66
     e6c:	30 e6       	ldi	r19, 0x60	; 96
     e6e:	45 e6       	ldi	r20, 0x65	; 101
     e70:	5d eb       	ldi	r21, 0xBD	; 189
     e72:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     e76:	a4 01       	movw	r20, r8
     e78:	93 01       	movw	r18, r6
     e7a:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     e7e:	a8 01       	movw	r20, r16
     e80:	97 01       	movw	r18, r14
     e82:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	57 e4       	ldi	r21, 0x47	; 71
     e8e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
     e92:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
     e96:	ab 01       	movw	r20, r22
     e98:	bc 01       	movw	r22, r24
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SetVelocity>

	StartMotion();
     ea0:	0e 94 19 04 	call	0x832	; 0x832 <StartMotion>

}
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	9f 90       	pop	r9
     eb6:	8f 90       	pop	r8
     eb8:	7f 90       	pop	r7
     eba:	6f 90       	pop	r6
     ebc:	5f 90       	pop	r5
     ebe:	4f 90       	pop	r4
     ec0:	3f 90       	pop	r3
     ec2:	2f 90       	pop	r2
     ec4:	08 95       	ret

00000ec6 <PSD_Wall_Follow>:
//5. 종료조건에 따른 거리값(종료조건 1)앞벽은감지경우 앞벽감지거리.
//								   2)옆벽사라짐인경우 사라짐감지거리.
//6. 속도

int PSD_Wall_Follow(int end,int select, int ycm, int psd_end, int value, int speed)  
{
     ec6:	2f 92       	push	r2
     ec8:	3f 92       	push	r3
     eca:	4f 92       	push	r4
     ecc:	5f 92       	push	r5
     ece:	6f 92       	push	r6
     ed0:	7f 92       	push	r7
     ed2:	8f 92       	push	r8
     ed4:	9f 92       	push	r9
     ed6:	af 92       	push	r10
     ed8:	bf 92       	push	r11
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	28 97       	sbiw	r28, 0x08	; 8
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	3b 01       	movw	r6, r22
     f00:	5c 83       	std	Y+4, r21	; 0x04
     f02:	4b 83       	std	Y+3, r20	; 0x03
     f04:	49 01       	movw	r8, r18
     f06:	1e 83       	std	Y+6, r17	; 0x06
     f08:	0d 83       	std	Y+5, r16	; 0x05
	int oldpsd = 0;
	sec=0;
     f0a:	10 92 5e 02 	sts	0x025E, r1
     f0e:	10 92 5d 02 	sts	0x025D, r1
	
	while(1)
	{
		if(select == 1)	
		{
			if(psd_value[select] > 80 || sec < 200)  non_Holonomic(speed,0,(psd_value[select]-ycm));
     f12:	17 01       	movw	r2, r14
     f14:	44 24       	eor	r4, r4
     f16:	37 fc       	sbrc	r3, 7
     f18:	40 94       	com	r4
     f1a:	54 2c       	mov	r5, r4
		}
		else  non_Holonomic(speed,0,-(psd_value[select]-ycm));
     f1c:	9b 01       	movw	r18, r22
     f1e:	24 51       	subi	r18, 0x14	; 20
     f20:	3d 4f       	sbci	r19, 0xFD	; 253
     f22:	38 87       	std	Y+8, r19	; 0x08
     f24:	2f 83       	std	Y+7, r18	; 0x07
		oldpsd = psd_value[select];

		if(end == 1)
		{
			if((psd_value[psd_end] > value) && ( sec > 100 ))
     f26:	8c ee       	ldi	r24, 0xEC	; 236
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	88 0e       	add	r8, r24
     f2c:	99 1e       	adc	r9, r25
	int oldpsd = 0;
	sec=0;
	
	while(1)
	{
		if(select == 1)	
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	69 16       	cp	r6, r25
     f32:	71 04       	cpc	r7, r1
     f34:	f9 f4       	brne	.+62     	; 0xf74 <PSD_Wall_Follow+0xae>
		{
			if(psd_value[select] > 80 || sec < 200)  non_Holonomic(speed,0,(psd_value[select]-ycm));
     f36:	80 91 ed 02 	lds	r24, 0x02ED
     f3a:	81 35       	cpi	r24, 0x51	; 81
     f3c:	38 f4       	brcc	.+14     	; 0xf4c <PSD_Wall_Follow+0x86>
     f3e:	80 91 5d 02 	lds	r24, 0x025D
     f42:	90 91 5e 02 	lds	r25, 0x025E
     f46:	88 3c       	cpi	r24, 0xC8	; 200
     f48:	91 05       	cpc	r25, r1
     f4a:	88 f5       	brcc	.+98     	; 0xfae <PSD_Wall_Follow+0xe8>
     f4c:	e0 90 ed 02 	lds	r14, 0x02ED
     f50:	c2 01       	movw	r24, r4
     f52:	b1 01       	movw	r22, r2
     f54:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
     f58:	5b 01       	movw	r10, r22
     f5a:	6c 01       	movw	r12, r24
     f5c:	ff 24       	eor	r15, r15
     f5e:	eb 81       	ldd	r30, Y+3	; 0x03
     f60:	fc 81       	ldd	r31, Y+4	; 0x04
     f62:	ee 1a       	sub	r14, r30
     f64:	ff 0a       	sbc	r15, r31
     f66:	00 27       	eor	r16, r16
     f68:	f7 fc       	sbrc	r15, 7
     f6a:	00 95       	com	r16
     f6c:	10 2f       	mov	r17, r16
     f6e:	c8 01       	movw	r24, r16
     f70:	b7 01       	movw	r22, r14
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <PSD_Wall_Follow+0xd0>
		}
		else  non_Holonomic(speed,0,-(psd_value[select]-ycm));
     f74:	ef 81       	ldd	r30, Y+7	; 0x07
     f76:	f8 85       	ldd	r31, Y+8	; 0x08
     f78:	10 81       	ld	r17, Z
     f7a:	c2 01       	movw	r24, r4
     f7c:	b1 01       	movw	r22, r2
     f7e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
     f82:	5b 01       	movw	r10, r22
     f84:	6c 01       	movw	r12, r24
     f86:	6b 81       	ldd	r22, Y+3	; 0x03
     f88:	7c 81       	ldd	r23, Y+4	; 0x04
     f8a:	61 1b       	sub	r22, r17
     f8c:	71 09       	sbc	r23, r1
     f8e:	88 27       	eor	r24, r24
     f90:	77 fd       	sbrc	r23, 7
     f92:	80 95       	com	r24
     f94:	98 2f       	mov	r25, r24
     f96:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
     f9a:	7b 01       	movw	r14, r22
     f9c:	8c 01       	movw	r16, r24
     f9e:	c6 01       	movw	r24, r12
     fa0:	b5 01       	movw	r22, r10
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
		oldpsd = psd_value[select];
     fae:	ef 81       	ldd	r30, Y+7	; 0x07
     fb0:	f8 85       	ldd	r31, Y+8	; 0x08
     fb2:	80 81       	ld	r24, Z

		if(end == 1)
     fb4:	29 81       	ldd	r18, Y+1	; 0x01
     fb6:	3a 81       	ldd	r19, Y+2	; 0x02
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	31 05       	cpc	r19, r1
     fbc:	f1 f4       	brne	.+60     	; 0xffa <PSD_Wall_Follow+0x134>
		{
			if((psd_value[psd_end] > value) && ( sec > 100 ))
     fbe:	f4 01       	movw	r30, r8
     fc0:	80 81       	ld	r24, Z
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	2d 81       	ldd	r18, Y+5	; 0x05
     fc6:	3e 81       	ldd	r19, Y+6	; 0x06
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	0c f0       	brlt	.+2      	; 0xfd0 <PSD_Wall_Follow+0x10a>
     fce:	af cf       	rjmp	.-162    	; 0xf2e <PSD_Wall_Follow+0x68>
     fd0:	80 91 5d 02 	lds	r24, 0x025D
     fd4:	90 91 5e 02 	lds	r25, 0x025E
     fd8:	85 36       	cpi	r24, 0x65	; 101
     fda:	91 05       	cpc	r25, r1
     fdc:	08 f4       	brcc	.+2      	; 0xfe0 <PSD_Wall_Follow+0x11a>
     fde:	a7 cf       	rjmp	.-178    	; 0xf2e <PSD_Wall_Follow+0x68>
			{
				non_Holonomic(0,0,0);
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9b 01       	movw	r18, r22
     fea:	ac 01       	movw	r20, r24
     fec:	7b 01       	movw	r14, r22
     fee:	8c 01       	movw	r16, r24
     ff0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	64 c0       	rjmp	.+200    	; 0x10c2 <PSD_Wall_Follow+0x1fc>
				return 1;	
			}
		}
		else if(end == 2)
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	32 97       	sbiw	r30, 0x02	; 2
    1000:	09 f0       	breq	.+2      	; 0x1004 <PSD_Wall_Follow+0x13e>
    1002:	40 c0       	rjmp	.+128    	; 0x1084 <PSD_Wall_Follow+0x1be>
		{
			if( (  (oldpsd - psd_value[select])  > value ) && ( sec > 100 ) )
    1004:	ef 81       	ldd	r30, Y+7	; 0x07
    1006:	f8 85       	ldd	r31, Y+8	; 0x08
    1008:	20 81       	ld	r18, Z
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	82 1b       	sub	r24, r18
    100e:	91 09       	sbc	r25, r1
    1010:	2d 81       	ldd	r18, Y+5	; 0x05
    1012:	3e 81       	ldd	r19, Y+6	; 0x06
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	0c f0       	brlt	.+2      	; 0x101c <PSD_Wall_Follow+0x156>
    101a:	89 cf       	rjmp	.-238    	; 0xf2e <PSD_Wall_Follow+0x68>
    101c:	80 91 5d 02 	lds	r24, 0x025D
    1020:	90 91 5e 02 	lds	r25, 0x025E
    1024:	85 36       	cpi	r24, 0x65	; 101
    1026:	91 05       	cpc	r25, r1
    1028:	08 f4       	brcc	.+2      	; 0x102c <PSD_Wall_Follow+0x166>
    102a:	81 cf       	rjmp	.-254    	; 0xf2e <PSD_Wall_Follow+0x68>
			{
				if(select == 1)
    102c:	31 e0       	ldi	r19, 0x01	; 1
    102e:	63 16       	cp	r6, r19
    1030:	71 04       	cpc	r7, r1
    1032:	d9 f4       	brne	.+54     	; 0x106a <PSD_Wall_Follow+0x1a4>
				{
					non_Holonomic(0,0,-50);
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	0f 2e       	mov	r0, r31
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	ef 2e       	mov	r14, r31
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	ff 2e       	mov	r15, r31
    104a:	f8 e4       	ldi	r31, 0x48	; 72
    104c:	0f 2f       	mov	r16, r31
    104e:	f2 ec       	ldi	r31, 0xC2	; 194
    1050:	1f 2f       	mov	r17, r31
    1052:	f0 2d       	mov	r31, r0
    1054:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    1058:	88 ee       	ldi	r24, 0xE8	; 232
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	20 e7       	ldi	r18, 0x70	; 112
    105e:	31 e0       	ldi	r19, 0x01	; 1
    1060:	f9 01       	movw	r30, r18
    1062:	31 97       	sbiw	r30, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <PSD_Wall_Follow+0x19c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1066:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	d9 f7       	brne	.-10     	; 0x1060 <PSD_Wall_Follow+0x19a>
					_delay_ms(100);
				}
				non_Holonomic(0,0,0);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	7b 01       	movw	r14, r22
    1078:	8c 01       	movw	r16, r24
    107a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    107e:	22 e0       	ldi	r18, 0x02	; 2
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	1f c0       	rjmp	.+62     	; 0x10c2 <PSD_Wall_Follow+0x1fc>
				return 2;
			} 
		}
		else
		{
			if((READ_SENSOR() != 0)&&(sec>100))
    1084:	80 91 63 00 	lds	r24, 0x0063
    1088:	21 b1       	in	r18, 0x01	; 1
    108a:	86 95       	lsr	r24
    108c:	86 95       	lsr	r24
    108e:	86 95       	lsr	r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	83 70       	andi	r24, 0x03	; 3
    1098:	90 70       	andi	r25, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	20 95       	com	r18
    109e:	30 95       	com	r19
    10a0:	2c 71       	andi	r18, 0x1C	; 28
    10a2:	30 70       	andi	r19, 0x00	; 0
    10a4:	82 2b       	or	r24, r18
    10a6:	93 2b       	or	r25, r19
    10a8:	89 2b       	or	r24, r25
    10aa:	09 f4       	brne	.+2      	; 0x10ae <PSD_Wall_Follow+0x1e8>
    10ac:	40 cf       	rjmp	.-384    	; 0xf2e <PSD_Wall_Follow+0x68>
    10ae:	80 91 5d 02 	lds	r24, 0x025D
    10b2:	90 91 5e 02 	lds	r25, 0x025E
    10b6:	85 36       	cpi	r24, 0x65	; 101
    10b8:	91 05       	cpc	r25, r1
    10ba:	08 f4       	brcc	.+2      	; 0x10be <PSD_Wall_Follow+0x1f8>
    10bc:	38 cf       	rjmp	.-400    	; 0xf2e <PSD_Wall_Follow+0x68>
    10be:	23 e0       	ldi	r18, 0x03	; 3
    10c0:	30 e0       	ldi	r19, 0x00	; 0
			return 3;
		}
	}
}
    10c2:	c9 01       	movw	r24, r18
    10c4:	28 96       	adiw	r28, 0x08	; 8
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	6f 90       	pop	r6
    10ec:	5f 90       	pop	r5
    10ee:	4f 90       	pop	r4
    10f0:	3f 90       	pop	r3
    10f2:	2f 90       	pop	r2
    10f4:	08 95       	ret

000010f6 <Sensor_Follow>:
}

//1. 정지조건 (1: 금속센서, 2: 
//2. 속도
void Sensor_Follow(int end, int speed)
{
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	ab 01       	movw	r20, r22
	unsigned char SENSOR=0;
	if(end == 1) {
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	09 f0       	breq	.+2      	; 0x1106 <__stack+0x7>
    1104:	61 c0       	rjmp	.+194    	; 0x11c8 <__stack+0xc9>
		SENSOR = READ_SENSOR();
    1106:	80 91 63 00 	lds	r24, 0x0063
    110a:	91 b1       	in	r25, 0x01	; 1
		if(SENSOR&0X01) return;
    110c:	86 95       	lsr	r24
    110e:	86 95       	lsr	r24
    1110:	86 95       	lsr	r24
    1112:	80 95       	com	r24
    1114:	83 70       	andi	r24, 0x03	; 3
    1116:	90 95       	com	r25
    1118:	9c 71       	andi	r25, 0x1C	; 28
    111a:	89 2b       	or	r24, r25
    111c:	68 2f       	mov	r22, r24
    111e:	80 fd       	sbrc	r24, 0
    1120:	53 c0       	rjmp	.+166    	; 0x11c8 <__stack+0xc9>
		if(READ_SENSOR() == 8) non_Holonomic(speed, 0, 0);
    1122:	80 91 63 00 	lds	r24, 0x0063
    1126:	21 b1       	in	r18, 0x01	; 1
    1128:	86 95       	lsr	r24
    112a:	86 95       	lsr	r24
    112c:	86 95       	lsr	r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	80 95       	com	r24
    1132:	90 95       	com	r25
    1134:	83 70       	andi	r24, 0x03	; 3
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	20 95       	com	r18
    113c:	30 95       	com	r19
    113e:	2c 71       	andi	r18, 0x1C	; 28
    1140:	30 70       	andi	r19, 0x00	; 0
    1142:	82 2b       	or	r24, r18
    1144:	93 2b       	or	r25, r19
    1146:	08 97       	sbiw	r24, 0x08	; 8
    1148:	71 f4       	brne	.+28     	; 0x1166 <__stack+0x67>
    114a:	ba 01       	movw	r22, r20
    114c:	88 27       	eor	r24, r24
    114e:	77 fd       	sbrc	r23, 7
    1150:	80 95       	com	r24
    1152:	98 2f       	mov	r25, r24
    1154:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	79 01       	movw	r14, r18
    1162:	8a 01       	movw	r16, r20
    1164:	2f c0       	rjmp	.+94     	; 0x11c4 <__stack+0xc5>
		else if(SENSOR&0X04) non_Holonomic(speed, 0, -10);
    1166:	62 ff       	sbrs	r22, 2
    1168:	16 c0       	rjmp	.+44     	; 0x1196 <__stack+0x97>
    116a:	ba 01       	movw	r22, r20
    116c:	88 27       	eor	r24, r24
    116e:	77 fd       	sbrc	r23, 7
    1170:	80 95       	com	r24
    1172:	98 2f       	mov	r25, r24
    1174:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	0f 2e       	mov	r0, r31
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	ef 2e       	mov	r14, r31
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	ff 2e       	mov	r15, r31
    118a:	f0 e2       	ldi	r31, 0x20	; 32
    118c:	0f 2f       	mov	r16, r31
    118e:	f1 ec       	ldi	r31, 0xC1	; 193
    1190:	1f 2f       	mov	r17, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	17 c0       	rjmp	.+46     	; 0x11c4 <__stack+0xc5>
		else if(SENSOR&0X10) non_Holonomic(speed, 0, 10);
    1196:	64 ff       	sbrs	r22, 4
    1198:	17 c0       	rjmp	.+46     	; 0x11c8 <__stack+0xc9>
    119a:	ba 01       	movw	r22, r20
    119c:	88 27       	eor	r24, r24
    119e:	77 fd       	sbrc	r23, 7
    11a0:	80 95       	com	r24
    11a2:	98 2f       	mov	r25, r24
    11a4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	0f 2e       	mov	r0, r31
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	ef 2e       	mov	r14, r31
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	ff 2e       	mov	r15, r31
    11ba:	f0 e2       	ldi	r31, 0x20	; 32
    11bc:	0f 2f       	mov	r16, r31
    11be:	f1 e4       	ldi	r31, 0x41	; 65
    11c0:	1f 2f       	mov	r17, r31
    11c2:	f0 2d       	mov	r31, r0
    11c4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
	}
}
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	08 95       	ret

000011d2 <HolonomicW>:
			lcd_display_str(1, 17, "X");
			lcd_display_str(2, 17, "X"); 
		}
	}
}
void HolonomicW(float f_agl, float f_speed, float fw_speed){
    11d2:	2f 92       	push	r2
    11d4:	3f 92       	push	r3
    11d6:	4f 92       	push	r4
    11d8:	5f 92       	push	r5
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	5b 01       	movw	r10, r22
    11f4:	6c 01       	movw	r12, r24
    11f6:	19 01       	movw	r2, r18
    11f8:	2a 01       	movw	r4, r20
    11fa:	37 01       	movw	r6, r14
    11fc:	48 01       	movw	r8, r16
	long Fx=0, Fy=0, Fw=0; //속도

	Fx = f_speed * cos(f_agl*0.017453);
	Fy = f_speed * sin(f_agl*0.017453);
	Fw=fw_speed;
	if(f_agl>=360||f_agl<0){
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	44 eb       	ldi	r20, 0xB4	; 180
    1204:	53 e4       	ldi	r21, 0x43	; 67
    1206:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    120a:	87 ff       	sbrs	r24, 7
    120c:	36 c0       	rjmp	.+108    	; 0x127a <HolonomicW+0xa8>
    120e:	c6 01       	movw	r24, r12
    1210:	b5 01       	movw	r22, r10
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ltsf2>
    121e:	87 fd       	sbrc	r24, 7
    1220:	39 c0       	rjmp	.+114    	; 0x1294 <HolonomicW+0xc2>
	}
}
void HolonomicW(float f_agl, float f_speed, float fw_speed){
	long Fx=0, Fy=0, Fw=0; //속도

	Fx = f_speed * cos(f_agl*0.017453);
    1222:	c6 01       	movw	r24, r12
    1224:	b5 01       	movw	r22, r10
    1226:	28 e9       	ldi	r18, 0x98	; 152
    1228:	39 ef       	ldi	r19, 0xF9	; 249
    122a:	4e e8       	ldi	r20, 0x8E	; 142
    122c:	5c e3       	ldi	r21, 0x3C	; 60
    122e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
    1232:	7b 01       	movw	r14, r22
    1234:	8c 01       	movw	r16, r24
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 39 1a 	call	0x3472	; 0x3472 <cos>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	c2 01       	movw	r24, r4
    1242:	b1 01       	movw	r22, r2
    1244:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
    1248:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
    124c:	5b 01       	movw	r10, r22
    124e:	6c 01       	movw	r12, r24
	Fy = f_speed * sin(f_agl*0.017453);
    1250:	b7 01       	movw	r22, r14
    1252:	c8 01       	movw	r24, r16
    1254:	0e 94 97 1a 	call	0x352e	; 0x352e <sin>
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	c2 01       	movw	r24, r4
    125e:	b1 01       	movw	r22, r2
    1260:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
    1264:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
    1268:	7b 01       	movw	r14, r22
    126a:	8c 01       	movw	r16, r24
	Fw=fw_speed;
    126c:	c4 01       	movw	r24, r8
    126e:	b3 01       	movw	r22, r6
    1270:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
    1274:	1b 01       	movw	r2, r22
    1276:	2c 01       	movw	r4, r24
    1278:	1a c0       	rjmp	.+52     	; 0x12ae <HolonomicW+0xdc>
	if(f_agl>=360||f_agl<0){
		Fx=0;
		Fy=0;
		Fw=f_speed;
		if(f_agl<0)Fw=-f_speed;
    127a:	c6 01       	movw	r24, r12
    127c:	b5 01       	movw	r22, r10
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ltsf2>
    128a:	87 fd       	sbrc	r24, 7
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <HolonomicW+0xc2>
	Fy = f_speed * sin(f_agl*0.017453);
	Fw=fw_speed;
	if(f_agl>=360||f_agl<0){
		Fx=0;
		Fy=0;
		Fw=f_speed;
    128e:	c2 01       	movw	r24, r4
    1290:	b1 01       	movw	r22, r2
    1292:	03 c0       	rjmp	.+6      	; 0x129a <HolonomicW+0xc8>
		if(f_agl<0)Fw=-f_speed;
    1294:	c2 01       	movw	r24, r4
    1296:	b1 01       	movw	r22, r2
    1298:	90 58       	subi	r25, 0x80	; 128
    129a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
    129e:	1b 01       	movw	r2, r22
    12a0:	2c 01       	movw	r4, r24
    12a2:	aa 24       	eor	r10, r10
    12a4:	bb 24       	eor	r11, r11
    12a6:	65 01       	movw	r12, r10
    12a8:	ee 24       	eor	r14, r14
    12aa:	ff 24       	eor	r15, r15
    12ac:	87 01       	movw	r16, r14
	}	

	non_Holonomic(Fx,Fy,Fw);
    12ae:	c6 01       	movw	r24, r12
    12b0:	b5 01       	movw	r22, r10
    12b2:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    12b6:	3b 01       	movw	r6, r22
    12b8:	4c 01       	movw	r8, r24
    12ba:	c8 01       	movw	r24, r16
    12bc:	b7 01       	movw	r22, r14
    12be:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    12c2:	5b 01       	movw	r10, r22
    12c4:	6c 01       	movw	r12, r24
    12c6:	c2 01       	movw	r24, r4
    12c8:	b1 01       	movw	r22, r2
    12ca:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    12ce:	7b 01       	movw	r14, r22
    12d0:	8c 01       	movw	r16, r24
    12d2:	c4 01       	movw	r24, r8
    12d4:	b3 01       	movw	r22, r6
    12d6:	a6 01       	movw	r20, r12
    12d8:	95 01       	movw	r18, r10
    12da:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
}
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	9f 90       	pop	r9
    12f0:	8f 90       	pop	r8
    12f2:	7f 90       	pop	r7
    12f4:	6f 90       	pop	r6
    12f6:	5f 90       	pop	r5
    12f8:	4f 90       	pop	r4
    12fa:	3f 90       	pop	r3
    12fc:	2f 90       	pop	r2
    12fe:	08 95       	ret

00001300 <Turn_and_Drive>:
//이동거리
//회전각
//정지 시점
//회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm, int dgree, unsigned int stop, unsigned int wstop){
    1300:	2f 92       	push	r2
    1302:	3f 92       	push	r3
    1304:	4f 92       	push	r4
    1306:	5f 92       	push	r5
    1308:	6f 92       	push	r6
    130a:	7f 92       	push	r7
    130c:	8f 92       	push	r8
    130e:	9f 92       	push	r9
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	a2 97       	sbiw	r28, 0x22	; 34
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	1b 01       	movw	r2, r22
    1336:	2c 01       	movw	r4, r24
    1338:	39 01       	movw	r6, r18
    133a:	d8 8a       	std	Y+16, r13	; 0x10
    133c:	cf 86       	std	Y+15, r12	; 0x0f
    133e:	ba a2       	std	Y+34, r11	; 0x22
    1340:	a9 a2       	std	Y+33, r10	; 0x21
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;

	TCNT1H=0xFF; TCNT1L=0x70;
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	8d bd       	out	0x2d, r24	; 45
    1346:	80 e7       	ldi	r24, 0x70	; 112
    1348:	8c bd       	out	0x2c, r24	; 44
	sec=1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 93 5e 02 	sts	0x025E, r25
    1352:	80 93 5d 02 	sts	0x025D, r24

	acc=5;	accW=3;
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 ea       	ldi	r26, 0xA0	; 160
    135c:	b0 e4       	ldi	r27, 0x40	; 64
    135e:	80 93 25 01 	sts	0x0125, r24
    1362:	90 93 26 01 	sts	0x0126, r25
    1366:	a0 93 27 01 	sts	0x0127, r26
    136a:	b0 93 28 01 	sts	0x0128, r27
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e4       	ldi	r26, 0x40	; 64
    1374:	b0 e4       	ldi	r27, 0x40	; 64
    1376:	80 93 29 01 	sts	0x0129, r24
    137a:	90 93 2a 01 	sts	0x012A, r25
    137e:	a0 93 2b 01 	sts	0x012B, r26
    1382:	b0 93 2c 01 	sts	0x012C, r27
	next_speed=f_speed;
    1386:	66 27       	eor	r22, r22
    1388:	57 fd       	sbrc	r21, 7
    138a:	60 95       	com	r22
    138c:	76 2f       	mov	r23, r22
    138e:	cb 01       	movw	r24, r22
    1390:	ba 01       	movw	r22, r20
    1392:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1396:	60 93 51 02 	sts	0x0251, r22
    139a:	70 93 52 02 	sts	0x0252, r23
    139e:	80 93 53 02 	sts	0x0253, r24
    13a2:	90 93 54 02 	sts	0x0254, r25
	next_wspeed=fw_speed;
    13a6:	88 24       	eor	r8, r8
    13a8:	77 fc       	sbrc	r7, 7
    13aa:	80 94       	com	r8
    13ac:	98 2c       	mov	r9, r8
    13ae:	c4 01       	movw	r24, r8
    13b0:	b3 01       	movw	r22, r6
    13b2:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    13b6:	60 93 59 02 	sts	0x0259, r22
    13ba:	70 93 5a 02 	sts	0x025A, r23
    13be:	80 93 5b 02 	sts	0x025B, r24
    13c2:	90 93 5c 02 	sts	0x025C, r25
    13c6:	0f 2e       	mov	r0, r31
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	6f 2e       	mov	r6, r31
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	7f 2e       	mov	r7, r31
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8f 2e       	mov	r8, r31
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	9f 2e       	mov	r9, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	6f 82       	std	Y+7, r6	; 0x07
    13dc:	78 86       	std	Y+8, r7	; 0x08
    13de:	89 86       	std	Y+9, r8	; 0x09
    13e0:	9a 86       	std	Y+10, r9	; 0x0a
    13e2:	1a 82       	std	Y+2, r1	; 0x02
    13e4:	19 82       	std	Y+1, r1	; 0x01

			HolonomicW((int)(f_agl),speed,wspeed);

			distance+=S_distance;
			distanceW+=S_distanceW;
			if(distance>=stop && stop!=0)next_speed=100;
    13e6:	af 85       	ldd	r26, Y+15	; 0x0f
    13e8:	b8 89       	ldd	r27, Y+16	; 0x10
    13ea:	cd 01       	movw	r24, r26
    13ec:	a0 e0       	ldi	r26, 0x00	; 0
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	89 8b       	std	Y+17, r24	; 0x11
    13f2:	9a 8b       	std	Y+18, r25	; 0x12
    13f4:	ab 8b       	std	Y+19, r26	; 0x13
    13f6:	bc 8b       	std	Y+20, r27	; 0x14
			if(fabs(distanceW)>=wstop && wstop!=0){
    13f8:	a9 a1       	ldd	r26, Y+33	; 0x21
    13fa:	ba a1       	ldd	r27, Y+34	; 0x22
    13fc:	cd 01       	movw	r24, r26
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	8d 8b       	std	Y+21, r24	; 0x15
    1404:	9e 8b       	std	Y+22, r25	; 0x16
    1406:	af 8b       	std	Y+23, r26	; 0x17
    1408:	b8 8f       	std	Y+24, r27	; 0x18
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
    140a:	c8 01       	movw	r24, r16
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	89 8f       	std	Y+25, r24	; 0x19
    1412:	9a 8f       	std	Y+26, r25	; 0x1a
    1414:	ab 8f       	std	Y+27, r26	; 0x1b
    1416:	bc 8f       	std	Y+28, r27	; 0x1c
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
    1418:	c7 01       	movw	r24, r14
    141a:	aa 27       	eor	r26, r26
    141c:	97 fd       	sbrc	r25, 7
    141e:	a0 95       	com	r26
    1420:	ba 2f       	mov	r27, r26
    1422:	8d 8f       	std	Y+29, r24	; 0x1d
    1424:	9e 8f       	std	Y+30, r25	; 0x1e
    1426:	af 8f       	std	Y+31, r26	; 0x1f
    1428:	b8 a3       	std	Y+32, r27	; 0x20
	next_speed=f_speed;
	next_wspeed=fw_speed;

	while(1){

		if(sec){
    142a:	80 91 5d 02 	lds	r24, 0x025D
    142e:	90 91 5e 02 	lds	r25, 0x025E
    1432:	89 2b       	or	r24, r25
    1434:	09 f4       	brne	.+2      	; 0x1438 <Turn_and_Drive+0x138>
    1436:	40 c1       	rjmp	.+640    	; 0x16b8 <Turn_and_Drive+0x3b8>
			sec=0;
    1438:	10 92 5e 02 	sts	0x025E, r1
    143c:	10 92 5d 02 	sts	0x025D, r1

			S_distance=speed*0.01;	//0.01 순간 이동거리
    1440:	80 91 4d 02 	lds	r24, 0x024D
    1444:	90 91 4e 02 	lds	r25, 0x024E
    1448:	a0 91 4f 02 	lds	r26, 0x024F
    144c:	b0 91 50 02 	lds	r27, 0x0250
    1450:	8b 87       	std	Y+11, r24	; 0x0b
    1452:	9c 87       	std	Y+12, r25	; 0x0c
    1454:	ad 87       	std	Y+13, r26	; 0x0d
    1456:	be 87       	std	Y+14, r27	; 0x0e
			S_distanceW=wspeed*0.01;	//0.01 순간 이동거리 
    1458:	60 91 55 02 	lds	r22, 0x0255
    145c:	70 91 56 02 	lds	r23, 0x0256
    1460:	80 91 57 02 	lds	r24, 0x0257
    1464:	90 91 58 02 	lds	r25, 0x0258
    1468:	2a e0       	ldi	r18, 0x0A	; 10
    146a:	37 ed       	ldi	r19, 0xD7	; 215
    146c:	43 e2       	ldi	r20, 0x23	; 35
    146e:	5c e3       	ldi	r21, 0x3C	; 60
    1470:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
    1474:	6b 83       	std	Y+3, r22	; 0x03
    1476:	7c 83       	std	Y+4, r23	; 0x04
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	9e 83       	std	Y+6, r25	; 0x06

			f_agl=f_agl-S_distanceW;
    147c:	c2 01       	movw	r24, r4
    147e:	b1 01       	movw	r22, r2
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	4d 81       	ldd	r20, Y+5	; 0x05
    1486:	5e 81       	ldd	r21, Y+6	; 0x06
    1488:	0e 94 97 14 	call	0x292e	; 0x292e <__subsf3>
    148c:	1b 01       	movw	r2, r22
    148e:	2c 01       	movw	r4, r24

			if(f_agl<0)f_agl+=360;
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	4c f4       	brge	.+18     	; 0x14b2 <Turn_and_Drive+0x1b2>
    14a0:	c2 01       	movw	r24, r4
    14a2:	b1 01       	movw	r22, r2
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	44 eb       	ldi	r20, 0xB4	; 180
    14aa:	53 e4       	ldi	r21, 0x43	; 67
    14ac:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
    14b0:	12 c0       	rjmp	.+36     	; 0x14d6 <Turn_and_Drive+0x1d6>
			else if(f_agl>=360)f_agl-=360;
    14b2:	c2 01       	movw	r24, r4
    14b4:	b1 01       	movw	r22, r2
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	44 eb       	ldi	r20, 0xB4	; 180
    14bc:	53 e4       	ldi	r21, 0x43	; 67
    14be:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    14c2:	88 23       	and	r24, r24
    14c4:	54 f0       	brlt	.+20     	; 0x14da <Turn_and_Drive+0x1da>
    14c6:	c2 01       	movw	r24, r4
    14c8:	b1 01       	movw	r22, r2
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	44 eb       	ldi	r20, 0xB4	; 180
    14d0:	53 e4       	ldi	r21, 0x43	; 67
    14d2:	0e 94 97 14 	call	0x292e	; 0x292e <__subsf3>
    14d6:	1b 01       	movw	r2, r22
    14d8:	2c 01       	movw	r4, r24

			HolonomicW((int)(f_agl),speed,wspeed);
    14da:	a0 90 4d 02 	lds	r10, 0x024D
    14de:	b0 90 4e 02 	lds	r11, 0x024E
    14e2:	c0 90 4f 02 	lds	r12, 0x024F
    14e6:	d0 90 50 02 	lds	r13, 0x0250
    14ea:	e0 90 55 02 	lds	r14, 0x0255
    14ee:	f0 90 56 02 	lds	r15, 0x0256
    14f2:	00 91 57 02 	lds	r16, 0x0257
    14f6:	10 91 58 02 	lds	r17, 0x0258
    14fa:	c2 01       	movw	r24, r4
    14fc:	b1 01       	movw	r22, r2
    14fe:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__fixsfsi>
    1502:	88 27       	eor	r24, r24
    1504:	77 fd       	sbrc	r23, 7
    1506:	80 95       	com	r24
    1508:	98 2f       	mov	r25, r24
    150a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    150e:	a6 01       	movw	r20, r12
    1510:	95 01       	movw	r18, r10
    1512:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <HolonomicW>

			distance+=S_distance;
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	2a e0       	ldi	r18, 0x0A	; 10
    1520:	37 ed       	ldi	r19, 0xD7	; 215
    1522:	43 e2       	ldi	r20, 0x23	; 35
    1524:	5c e3       	ldi	r21, 0x3C	; 60
    1526:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3>
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	c4 01       	movw	r24, r8
    1530:	b3 01       	movw	r22, r6
    1532:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
    1536:	3b 01       	movw	r6, r22
    1538:	4c 01       	movw	r8, r24
			distanceW+=S_distanceW;
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	4d 81       	ldd	r20, Y+5	; 0x05
    1548:	5e 81       	ldd	r21, Y+6	; 0x06
    154a:	0e 94 c8 14 	call	0x2990	; 0x2990 <__addsf3>
    154e:	6f 83       	std	Y+7, r22	; 0x07
    1550:	78 87       	std	Y+8, r23	; 0x08
    1552:	89 87       	std	Y+9, r24	; 0x09
    1554:	9a 87       	std	Y+10, r25	; 0x0a
			if(distance>=stop && stop!=0)next_speed=100;
    1556:	69 89       	ldd	r22, Y+17	; 0x11
    1558:	7a 89       	ldd	r23, Y+18	; 0x12
    155a:	8b 89       	ldd	r24, Y+19	; 0x13
    155c:	9c 89       	ldd	r25, Y+20	; 0x14
    155e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__floatunsisf>
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	c4 01       	movw	r24, r8
    1568:	b3 01       	movw	r22, r6
    156a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    156e:	88 23       	and	r24, r24
    1570:	84 f0       	brlt	.+32     	; 0x1592 <Turn_and_Drive+0x292>
    1572:	af 85       	ldd	r26, Y+15	; 0x0f
    1574:	b8 89       	ldd	r27, Y+16	; 0x10
    1576:	ab 2b       	or	r26, r27
    1578:	61 f0       	breq	.+24     	; 0x1592 <Turn_and_Drive+0x292>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a8 ec       	ldi	r26, 0xC8	; 200
    1580:	b2 e4       	ldi	r27, 0x42	; 66
    1582:	80 93 51 02 	sts	0x0251, r24
    1586:	90 93 52 02 	sts	0x0252, r25
    158a:	a0 93 53 02 	sts	0x0253, r26
    158e:	b0 93 54 02 	sts	0x0254, r27
			if(fabs(distanceW)>=wstop && wstop!=0){
    1592:	af 80       	ldd	r10, Y+7	; 0x07
    1594:	b8 84       	ldd	r11, Y+8	; 0x08
    1596:	c9 84       	ldd	r12, Y+9	; 0x09
    1598:	da 84       	ldd	r13, Y+10	; 0x0a
    159a:	e8 94       	clt
    159c:	d7 f8       	bld	r13, 7
    159e:	6d 89       	ldd	r22, Y+21	; 0x15
    15a0:	7e 89       	ldd	r23, Y+22	; 0x16
    15a2:	8f 89       	ldd	r24, Y+23	; 0x17
    15a4:	98 8d       	ldd	r25, Y+24	; 0x18
    15a6:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__floatunsisf>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	c6 01       	movw	r24, r12
    15b0:	b5 01       	movw	r22, r10
    15b2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    15b6:	88 23       	and	r24, r24
    15b8:	64 f1       	brlt	.+88     	; 0x1612 <Turn_and_Drive+0x312>
    15ba:	a9 a1       	ldd	r26, Y+33	; 0x21
    15bc:	ba a1       	ldd	r27, Y+34	; 0x22
    15be:	ab 2b       	or	r26, r27
    15c0:	41 f1       	breq	.+80     	; 0x1612 <Turn_and_Drive+0x312>
				next_wspeed=20;
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 ea       	ldi	r26, 0xA0	; 160
    15c8:	b1 e4       	ldi	r27, 0x41	; 65
    15ca:	80 93 59 02 	sts	0x0259, r24
    15ce:	90 93 5a 02 	sts	0x025A, r25
    15d2:	a0 93 5b 02 	sts	0x025B, r26
    15d6:	b0 93 5c 02 	sts	0x025C, r27
				if(wspeed<=0)next_wspeed=-20;
    15da:	60 91 55 02 	lds	r22, 0x0255
    15de:	70 91 56 02 	lds	r23, 0x0256
    15e2:	80 91 57 02 	lds	r24, 0x0257
    15e6:	90 91 58 02 	lds	r25, 0x0258
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__lesf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	64 f0       	brlt	.+24     	; 0x1612 <Turn_and_Drive+0x312>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1600:	b1 ec       	ldi	r27, 0xC1	; 193
    1602:	80 93 59 02 	sts	0x0259, r24
    1606:	90 93 5a 02 	sts	0x025A, r25
    160a:	a0 93 5b 02 	sts	0x025B, r26
    160e:	b0 93 5c 02 	sts	0x025C, r27
			}

			if(distance>=mm || (distance*-1)>=mm){
    1612:	69 8d       	ldd	r22, Y+25	; 0x19
    1614:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1618:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__floatunsisf>
    161e:	7b 01       	movw	r14, r22
    1620:	8c 01       	movw	r16, r24
    1622:	c4 01       	movw	r24, r8
    1624:	b3 01       	movw	r22, r6
    1626:	a8 01       	movw	r20, r16
    1628:	97 01       	movw	r18, r14
    162a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    162e:	87 ff       	sbrs	r24, 7
    1630:	09 c0       	rjmp	.+18     	; 0x1644 <Turn_and_Drive+0x344>
    1632:	c4 01       	movw	r24, r8
    1634:	b3 01       	movw	r22, r6
    1636:	90 58       	subi	r25, 0x80	; 128
    1638:	a8 01       	movw	r20, r16
    163a:	97 01       	movw	r18, r14
    163c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    1640:	88 23       	and	r24, r24
    1642:	b4 f0       	brlt	.+44     	; 0x1670 <Turn_and_Drive+0x370>
				flg0=1;
				next_speed=0;
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	80 93 51 02 	sts	0x0251, r24
    1650:	90 93 52 02 	sts	0x0252, r25
    1654:	a0 93 53 02 	sts	0x0253, r26
    1658:	b0 93 54 02 	sts	0x0254, r27
				speed=0;
    165c:	80 93 4d 02 	sts	0x024D, r24
    1660:	90 93 4e 02 	sts	0x024E, r25
    1664:	a0 93 4f 02 	sts	0x024F, r26
    1668:	b0 93 50 02 	sts	0x0250, r27
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	9a 83       	std	Y+2, r25	; 0x02
			}
			if(fabs(distanceW)>=dgree){
    1670:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1672:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1674:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1676:	98 a1       	ldd	r25, Y+32	; 0x20
    1678:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c6 01       	movw	r24, r12
    1682:	b5 01       	movw	r22, r10
    1684:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__gesf2>
    1688:	88 23       	and	r24, r24
    168a:	b4 f0       	brlt	.+44     	; 0x16b8 <Turn_and_Drive+0x3b8>
				flg1=1;
				next_wspeed=0;
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	80 93 59 02 	sts	0x0259, r24
    1698:	90 93 5a 02 	sts	0x025A, r25
    169c:	a0 93 5b 02 	sts	0x025B, r26
    16a0:	b0 93 5c 02 	sts	0x025C, r27
				wspeed=0;
    16a4:	80 93 55 02 	sts	0x0255, r24
    16a8:	90 93 56 02 	sts	0x0256, r25
    16ac:	a0 93 57 02 	sts	0x0257, r26
    16b0:	b0 93 58 02 	sts	0x0258, r27
    16b4:	a1 e0       	ldi	r26, 0x01	; 1
    16b6:	a9 83       	std	Y+1, r26	; 0x01
			}
		}
		if(flg0 && flg1)break;
    16b8:	ba 81       	ldd	r27, Y+2	; 0x02
    16ba:	bb 23       	and	r27, r27
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <Turn_and_Drive+0x3c0>
    16be:	b5 ce       	rjmp	.-662    	; 0x142a <Turn_and_Drive+0x12a>
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	ee 23       	and	r30, r30
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <Turn_and_Drive+0x3c8>
    16c6:	b1 ce       	rjmp	.-670    	; 0x142a <Turn_and_Drive+0x12a>
	}
}
    16c8:	a2 96       	adiw	r28, 0x22	; 34
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	5f 90       	pop	r5
    16f2:	4f 90       	pop	r4
    16f4:	3f 90       	pop	r3
    16f6:	2f 90       	pop	r2
    16f8:	08 95       	ret

000016fa <RSB>:
	non_Holonomic(0, 0, 0);

}

void RSB(int delay)
{
    16fa:	4f 92       	push	r4
    16fc:	5f 92       	push	r5
    16fe:	6f 92       	push	r6
    1700:	7f 92       	push	r7
    1702:	8f 92       	push	r8
    1704:	9f 92       	push	r9
    1706:	af 92       	push	r10
    1708:	bf 92       	push	r11
    170a:	cf 92       	push	r12
    170c:	df 92       	push	r13
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	3c 01       	movw	r6, r24
	lcd_clear_screen();
    171c:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_clear_screen>
    1720:	88 24       	eor	r8, r8
    1722:	99 24       	eor	r9, r9
    1724:	86 e6       	ldi	r24, 0x66	; 102
    1726:	48 2e       	mov	r4, r24
    1728:	8e e0       	ldi	r24, 0x0E	; 14
    172a:	58 2e       	mov	r5, r24
    172c:	7d c0       	rjmp	.+250    	; 0x1828 <RSB+0x12e>
	int err1, err2 = 0;
	int cnt = 0;
	while(cnt < delay)
	{
		if(psd_value[6] - (psd_value[8] + 80) == 0)
    172e:	80 91 f2 02 	lds	r24, 0x02F2
    1732:	20 91 f4 02 	lds	r18, 0x02F4
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	80 55       	subi	r24, 0x50	; 80
    173a:	90 40       	sbci	r25, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	82 17       	cp	r24, r18
    1740:	93 07       	cpc	r25, r19
    1742:	49 f4       	brne	.+18     	; 0x1756 <RSB+0x5c>
			if((psd_value[5] - 210) == 0)
    1744:	80 91 f1 02 	lds	r24, 0x02F1
    1748:	82 3d       	cpi	r24, 0xD2	; 210
    174a:	29 f4       	brne	.+10     	; 0x1756 <RSB+0x5c>
				if ((psd_value[7] - 190) == 0)
    174c:	80 91 f3 02 	lds	r24, 0x02F3
    1750:	8e 3b       	cpi	r24, 0xBE	; 190
    1752:	09 f4       	brne	.+2      	; 0x1756 <RSB+0x5c>
    1754:	6d c0       	rjmp	.+218    	; 0x1830 <RSB+0x136>
			 		break;
		
		
		err1 = psd_value[5] - 160;
    1756:	90 91 f1 02 	lds	r25, 0x02F1
		err2 = psd_value[7] - 190;
    175a:	60 91 f3 02 	lds	r22, 0x02F3
		if (psd_value[7] > 230)
    175e:	80 91 f3 02 	lds	r24, 0x02F3
    1762:	87 3e       	cpi	r24, 0xE7	; 231
    1764:	18 f0       	brcs	.+6      	; 0x176c <RSB+0x72>
    1766:	c2 e3       	ldi	r28, 0x32	; 50
    1768:	d0 e0       	ldi	r29, 0x00	; 0
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <RSB+0x7a>
				if ((psd_value[7] - 190) == 0)
			 		break;
		
		
		err1 = psd_value[5] - 160;
		err2 = psd_value[7] - 190;
    176c:	c6 2f       	mov	r28, r22
    176e:	d0 e0       	ldi	r29, 0x00	; 0
    1770:	ce 5b       	subi	r28, 0xBE	; 190
    1772:	d0 40       	sbci	r29, 0x00	; 0
		if (psd_value[7] > 230)
			err2 = 50;
		if (psd_value[5] >= 240)
    1774:	80 91 f1 02 	lds	r24, 0x02F1
    1778:	80 3f       	cpi	r24, 0xF0	; 240
    177a:	18 f0       	brcs	.+6      	; 0x1782 <RSB+0x88>
    177c:	02 e3       	ldi	r16, 0x32	; 50
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	04 c0       	rjmp	.+8      	; 0x178a <RSB+0x90>
			if((psd_value[5] - 210) == 0)
				if ((psd_value[7] - 190) == 0)
			 		break;
		
		
		err1 = psd_value[5] - 160;
    1782:	09 2f       	mov	r16, r25
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	00 5a       	subi	r16, 0xA0	; 160
    1788:	10 40       	sbci	r17, 0x00	; 0
		err2 = psd_value[7] - 190;
		if (psd_value[7] > 230)
			err2 = 50;
		if (psd_value[5] >= 240)
			err1 = 50;
		if (psd_value[6] == 250)
    178a:	80 91 f2 02 	lds	r24, 0x02F2
    178e:	8a 3f       	cpi	r24, 0xFA	; 250
    1790:	09 f4       	brne	.+2      	; 0x1794 <RSB+0x9a>
			err2+=60;
    1792:	ec 96       	adiw	r28, 0x3c	; 60
		non_Holonomic(err1, -err2, (psd_value[8] < 70 ? 0 : ((psd_value[6] - (psd_value[8] + 80)) / 2)));
    1794:	80 91 f4 02 	lds	r24, 0x02F4
    1798:	86 34       	cpi	r24, 0x46	; 70
    179a:	58 f4       	brcc	.+22     	; 0x17b2 <RSB+0xb8>
    179c:	0f 2e       	mov	r0, r31
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	af 2e       	mov	r10, r31
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	bf 2e       	mov	r11, r31
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	cf 2e       	mov	r12, r31
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	df 2e       	mov	r13, r31
    17ae:	f0 2d       	mov	r31, r0
    17b0:	15 c0       	rjmp	.+42     	; 0x17dc <RSB+0xe2>
    17b2:	80 91 f2 02 	lds	r24, 0x02F2
    17b6:	20 91 f4 02 	lds	r18, 0x02F4
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	80 55       	subi	r24, 0x50	; 80
    17be:	90 40       	sbci	r25, 0x00	; 0
    17c0:	82 1b       	sub	r24, r18
    17c2:	91 09       	sbc	r25, r1
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__divmodhi4>
    17cc:	88 27       	eor	r24, r24
    17ce:	77 fd       	sbrc	r23, 7
    17d0:	80 95       	com	r24
    17d2:	98 2f       	mov	r25, r24
    17d4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    17d8:	5b 01       	movw	r10, r22
    17da:	6c 01       	movw	r12, r24
    17dc:	b8 01       	movw	r22, r16
    17de:	88 27       	eor	r24, r24
    17e0:	77 fd       	sbrc	r23, 7
    17e2:	80 95       	com	r24
    17e4:	98 2f       	mov	r25, r24
    17e6:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    17ea:	7b 01       	movw	r14, r22
    17ec:	8c 01       	movw	r16, r24
    17ee:	66 27       	eor	r22, r22
    17f0:	77 27       	eor	r23, r23
    17f2:	6c 1b       	sub	r22, r28
    17f4:	7d 0b       	sbc	r23, r29
    17f6:	88 27       	eor	r24, r24
    17f8:	77 fd       	sbrc	r23, 7
    17fa:	80 95       	com	r24
    17fc:	98 2f       	mov	r25, r24
    17fe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1802:	9b 01       	movw	r18, r22
    1804:	ac 01       	movw	r20, r24
    1806:	c8 01       	movw	r24, r16
    1808:	b7 01       	movw	r22, r14
    180a:	86 01       	movw	r16, r12
    180c:	75 01       	movw	r14, r10
    180e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
		cnt++;
    1812:	08 94       	sec
    1814:	81 1c       	adc	r8, r1
    1816:	91 1c       	adc	r9, r1
    1818:	c2 01       	movw	r24, r4
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <RSB+0x120>
		_delay_ms(1);
		display_char(0, 0, cnt);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	48 2d       	mov	r20, r8
    1824:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
void RSB(int delay)
{
	lcd_clear_screen();
	int err1, err2 = 0;
	int cnt = 0;
	while(cnt < delay)
    1828:	86 14       	cp	r8, r6
    182a:	97 04       	cpc	r9, r7
    182c:	0c f4       	brge	.+2      	; 0x1830 <RSB+0x136>
    182e:	7f cf       	rjmp	.-258    	; 0x172e <RSB+0x34>
		cnt++;
		_delay_ms(1);
		display_char(0, 0, cnt);

	}
	non_Holonomic(0, 0, 0);
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	7b 01       	movw	r14, r22
    183e:	8c 01       	movw	r16, r24
    1840:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
	lcd_clear_screen();
    1844:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_clear_screen>
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	4f 90       	pop	r4
    1868:	08 95       	ret

0000186a <LSB>:
		}
	}
}

void LSB(int delay)
{
    186a:	2f 92       	push	r2
    186c:	3f 92       	push	r3
    186e:	4f 92       	push	r4
    1870:	5f 92       	push	r5
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	2c 01       	movw	r4, r24
    1890:	c0 e0       	ldi	r28, 0x00	; 0
    1892:	d0 e0       	ldi	r29, 0x00	; 0
    1894:	96 e6       	ldi	r25, 0x66	; 102
    1896:	29 2e       	mov	r2, r25
    1898:	9e e0       	ldi	r25, 0x0E	; 14
    189a:	39 2e       	mov	r3, r25
    189c:	50 c0       	rjmp	.+160    	; 0x193e <LSB+0xd4>
	int err1, err2 = 0;
	int cnt = 0;
	while(cnt < delay)
	{
		if((psd_value[3] - psd_value[1]) == 60)
    189e:	80 91 ef 02 	lds	r24, 0x02EF
    18a2:	20 91 ed 02 	lds	r18, 0x02ED
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	82 1b       	sub	r24, r18
    18aa:	91 09       	sbc	r25, r1
    18ac:	cc 97       	sbiw	r24, 0x3c	; 60
    18ae:	49 f4       	brne	.+18     	; 0x18c2 <LSB+0x58>
			if((psd_value[4] - 250) == 0)
    18b0:	80 91 f0 02 	lds	r24, 0x02F0
    18b4:	8a 3f       	cpi	r24, 0xFA	; 250
    18b6:	29 f4       	brne	.+10     	; 0x18c2 <LSB+0x58>
				if((psd_value[2] - 235) == 0)
    18b8:	80 91 ee 02 	lds	r24, 0x02EE
    18bc:	8b 3e       	cpi	r24, 0xEB	; 235
    18be:	09 f4       	brne	.+2      	; 0x18c2 <LSB+0x58>
    18c0:	42 c0       	rjmp	.+132    	; 0x1946 <LSB+0xdc>
			 		break;
		
		
		err1 = psd_value[4] - 240;
    18c2:	60 91 f0 02 	lds	r22, 0x02F0
		err2 = psd_value[2] - 245;
    18c6:	00 91 ee 02 	lds	r16, 0x02EE
		non_Holonomic(err1, err2, psd_value[1] - psd_value[3] + 60);
    18ca:	f0 90 ed 02 	lds	r15, 0x02ED
    18ce:	10 91 ef 02 	lds	r17, 0x02EF
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	60 5f       	subi	r22, 0xF0	; 240
    18d6:	70 40       	sbci	r23, 0x00	; 0
    18d8:	88 27       	eor	r24, r24
    18da:	77 fd       	sbrc	r23, 7
    18dc:	80 95       	com	r24
    18de:	98 2f       	mov	r25, r24
    18e0:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    18e4:	3b 01       	movw	r6, r22
    18e6:	4c 01       	movw	r8, r24
    18e8:	20 2f       	mov	r18, r16
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	25 5f       	subi	r18, 0xF5	; 245
    18ee:	30 40       	sbci	r19, 0x00	; 0
    18f0:	b9 01       	movw	r22, r18
    18f2:	88 27       	eor	r24, r24
    18f4:	77 fd       	sbrc	r23, 7
    18f6:	80 95       	com	r24
    18f8:	98 2f       	mov	r25, r24
    18fa:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    18fe:	5b 01       	movw	r10, r22
    1900:	6c 01       	movw	r12, r24
    1902:	2f 2d       	mov	r18, r15
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	24 5c       	subi	r18, 0xC4	; 196
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	21 1b       	sub	r18, r17
    190c:	31 09       	sbc	r19, r1
    190e:	b9 01       	movw	r22, r18
    1910:	88 27       	eor	r24, r24
    1912:	77 fd       	sbrc	r23, 7
    1914:	80 95       	com	r24
    1916:	98 2f       	mov	r25, r24
    1918:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    191c:	7b 01       	movw	r14, r22
    191e:	8c 01       	movw	r16, r24
    1920:	c4 01       	movw	r24, r8
    1922:	b3 01       	movw	r22, r6
    1924:	a6 01       	movw	r20, r12
    1926:	95 01       	movw	r18, r10
    1928:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
		cnt++;
    192c:	21 96       	adiw	r28, 0x01	; 1
    192e:	c1 01       	movw	r24, r2
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LSB+0xc6>
		_delay_ms(1);
		display_char(0, 0, cnt);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	4c 2f       	mov	r20, r28
    193a:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>

void LSB(int delay)
{
	int err1, err2 = 0;
	int cnt = 0;
	while(cnt < delay)
    193e:	c4 15       	cp	r28, r4
    1940:	d5 05       	cpc	r29, r5
    1942:	0c f4       	brge	.+2      	; 0x1946 <LSB+0xdc>
    1944:	ac cf       	rjmp	.-168    	; 0x189e <LSB+0x34>
		cnt++;
		_delay_ms(1);
		display_char(0, 0, cnt);

	}
	non_Holonomic(0, 0, 0);
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9b 01       	movw	r18, r22
    1950:	ac 01       	movw	r20, r24
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
    1956:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>

}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	bf 90       	pop	r11
    196c:	af 90       	pop	r10
    196e:	9f 90       	pop	r9
    1970:	8f 90       	pop	r8
    1972:	7f 90       	pop	r7
    1974:	6f 90       	pop	r6
    1976:	5f 90       	pop	r5
    1978:	4f 90       	pop	r4
    197a:	3f 90       	pop	r3
    197c:	2f 90       	pop	r2
    197e:	08 95       	ret

00001980 <Read_Colors>:
			return 0;
	}
	return 1;
}
void Read_Colors(unsigned char *color)
{
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	ec 01       	movw	r28, r24
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
	int buff = 0, i, j;
	for(i = 0; i < 4; i++)
		color[i] = 0;
    1990:	fe 01       	movw	r30, r28
    1992:	e8 0f       	add	r30, r24
    1994:	f9 1f       	adc	r31, r25
    1996:	10 82       	st	Z, r1
	return 1;
}
void Read_Colors(unsigned char *color)
{
	int buff = 0, i, j;
	for(i = 0; i < 4; i++)
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	84 30       	cpi	r24, 0x04	; 4
    199c:	91 05       	cpc	r25, r1
    199e:	c1 f7       	brne	.-16     	; 0x1990 <Read_Colors+0x10>
    19a0:	11 e0       	ldi	r17, 0x01	; 1
    19a2:	20 c0       	rjmp	.+64     	; 0x19e4 <Read_Colors+0x64>
		color[i] = 0;
	for(i = 0; i < 3; i++)
	{
		for(j = 0; j < 4; j++)
		{
			buff = Camera_Cmd(i + 3, (j * 2) + 1);
    19a4:	8f 2d       	mov	r24, r15
    19a6:	60 2f       	mov	r22, r16
    19a8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    19ac:	90 e0       	ldi	r25, 0x00	; 0
			if (buff == 0)
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	b1 f0       	breq	.+44     	; 0x19de <Read_Colors+0x5e>
				break;
			else
			{
				if (buff < 70)
    19b2:	86 34       	cpi	r24, 0x46	; 70
    19b4:	91 05       	cpc	r25, r1
    19b6:	14 f4       	brge	.+4      	; 0x19bc <Read_Colors+0x3c>
					color[0] = i + 1;
    19b8:	18 83       	st	Y, r17
    19ba:	0e c0       	rjmp	.+28     	; 0x19d8 <Read_Colors+0x58>
				else if(buff < 120)
    19bc:	88 37       	cpi	r24, 0x78	; 120
    19be:	91 05       	cpc	r25, r1
    19c0:	14 f4       	brge	.+4      	; 0x19c6 <Read_Colors+0x46>
					color[1] = i + 1;
    19c2:	19 83       	std	Y+1, r17	; 0x01
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <Read_Colors+0x58>
				else if(buff < 170)
    19c6:	8a 3a       	cpi	r24, 0xAA	; 170
    19c8:	91 05       	cpc	r25, r1
    19ca:	14 f4       	brge	.+4      	; 0x19d0 <Read_Colors+0x50>
					color[2] = i + 1;
    19cc:	1a 83       	std	Y+2, r17	; 0x02
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <Read_Colors+0x58>
				else if(buff < 220)
    19d0:	8c 3d       	cpi	r24, 0xDC	; 220
    19d2:	91 05       	cpc	r25, r1
    19d4:	0c f4       	brge	.+2      	; 0x19d8 <Read_Colors+0x58>
					color[3] = i + 1;
    19d6:	1b 83       	std	Y+3, r17	; 0x03
    19d8:	0e 5f       	subi	r16, 0xFE	; 254
	int buff = 0, i, j;
	for(i = 0; i < 4; i++)
		color[i] = 0;
	for(i = 0; i < 3; i++)
	{
		for(j = 0; j < 4; j++)
    19da:	09 30       	cpi	r16, 0x09	; 9
    19dc:	19 f7       	brne	.-58     	; 0x19a4 <Read_Colors+0x24>
    19de:	1f 5f       	subi	r17, 0xFF	; 255
void Read_Colors(unsigned char *color)
{
	int buff = 0, i, j;
	for(i = 0; i < 4; i++)
		color[i] = 0;
	for(i = 0; i < 3; i++)
    19e0:	14 30       	cpi	r17, 0x04	; 4
    19e2:	29 f0       	breq	.+10     	; 0x19ee <Read_Colors+0x6e>
    19e4:	01 e0       	ldi	r16, 0x01	; 1
	{
		for(j = 0; j < 4; j++)
		{
			buff = Camera_Cmd(i + 3, (j * 2) + 1);
    19e6:	22 e0       	ldi	r18, 0x02	; 2
    19e8:	f2 2e       	mov	r15, r18
    19ea:	f1 0e       	add	r15, r17
    19ec:	db cf       	rjmp	.-74     	; 0x19a4 <Read_Colors+0x24>
					color[3] = i + 1;
			}
		}
	}

}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	08 95       	ret

000019fa <Camera>:
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
	}
}

int Camera() 
{
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
	sec=0;
    1a02:	10 92 5e 02 	sts	0x025E, r1
    1a06:	10 92 5d 02 	sts	0x025D, r1
	while(1)
	{
		non_Holonomic(0, -100, 0);
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	48 ec       	ldi	r20, 0xC8	; 200
    1a18:	52 ec       	ldi	r21, 0xC2	; 194
    1a1a:	7b 01       	movw	r14, r22
    1a1c:	8c 01       	movw	r16, r24
    1a1e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
		sec++;
    1a22:	80 91 5d 02 	lds	r24, 0x025D
    1a26:	90 91 5e 02 	lds	r25, 0x025E
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	90 93 5e 02 	sts	0x025E, r25
    1a30:	80 93 5d 02 	sts	0x025D, r24
		display_char(1, 0, Camera_Cmd(1, 102));
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	66 e6       	ldi	r22, 0x66	; 102
    1a38:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(0, 0, sec);
    1a46:	40 91 5d 02 	lds	r20, 0x025D
    1a4a:	50 91 5e 02 	lds	r21, 0x025E
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		if(sec > 10) {
    1a56:	80 91 5d 02 	lds	r24, 0x025D
    1a5a:	90 91 5e 02 	lds	r25, 0x025E
    1a5e:	0b 97       	sbiw	r24, 0x0b	; 11
    1a60:	70 f0       	brcs	.+28     	; 0x1a7e <Camera+0x84>
			non_Holonomic(0, 0, 0);
    1a62:	c8 01       	movw	r24, r16
    1a64:	b7 01       	movw	r22, r14
    1a66:	a8 01       	movw	r20, r16
    1a68:	97 01       	movw	r18, r14
    1a6a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
			display_char(0, 4, -1);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	64 e0       	ldi	r22, 0x04	; 4
    1a72:	4f ef       	ldi	r20, 0xFF	; 255
    1a74:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	30 c0       	rjmp	.+96     	; 0x1ade <Camera+0xe4>
			return -1;
		} else if(Camera_Cmd(1, 102) == 125) {
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	66 e6       	ldi	r22, 0x66	; 102
    1a82:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1a86:	8d 37       	cpi	r24, 0x7D	; 125
    1a88:	91 f4       	brne	.+36     	; 0x1aae <Camera+0xb4>
			non_Holonomic(0, 0, 0);
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	7b 01       	movw	r14, r22
    1a98:	8c 01       	movw	r16, r24
    1a9a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
			display_char(0, 4, 1);
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	64 e0       	ldi	r22, 0x04	; 4
    1aa2:	41 e0       	ldi	r20, 0x01	; 1
    1aa4:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
    1aa8:	21 e0       	ldi	r18, 0x01	; 1
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	18 c0       	rjmp	.+48     	; 0x1ade <Camera+0xe4>
			return 1;
		} else if(Camera_Cmd(2, 102) == 125) {
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	66 e6       	ldi	r22, 0x66	; 102
    1ab2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1ab6:	8d 37       	cpi	r24, 0x7D	; 125
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <Camera+0xc2>
    1aba:	a7 cf       	rjmp	.-178    	; 0x1a0a <Camera+0x10>
			non_Holonomic(0, 0, 0);
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	7b 01       	movw	r14, r22
    1aca:	8c 01       	movw	r16, r24
    1acc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
			display_char(0, 4, 2);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	64 e0       	ldi	r22, 0x04	; 4
    1ad4:	42 e0       	ldi	r20, 0x02	; 2
    1ad6:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
    1ada:	22 e0       	ldi	r18, 0x02	; 2
    1adc:	30 e0       	ldi	r19, 0x00	; 0
			return 2;
		}
	}
}
    1ade:	c9 01       	movw	r24, r18
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <LineW>:
}*/



int LineW(int W,int speed, int time)
{
    1aea:	2f 92       	push	r2
    1aec:	3f 92       	push	r3
    1aee:	4f 92       	push	r4
    1af0:	5f 92       	push	r5
    1af2:	6f 92       	push	r6
    1af4:	7f 92       	push	r7
    1af6:	8f 92       	push	r8
    1af8:	9f 92       	push	r9
    1afa:	af 92       	push	r10
    1afc:	bf 92       	push	r11
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <LineW+0x26>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <LineW+0x28>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <LineW+0x2a>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	6b 01       	movw	r12, r22
    1b1e:	1a 01       	movw	r2, r20
	if(W < 0)
    1b20:	97 ff       	sbrs	r25, 7
    1b22:	2e c0       	rjmp	.+92     	; 0x1b80 <LineW+0x96>
    1b24:	0c c0       	rjmp	.+24     	; 0x1b3e <LineW+0x54>
		while(READ_SENSOR() != 8) non_Holonomic(0, -50, 0);
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	48 e4       	ldi	r20, 0x48	; 72
    1b34:	52 ec       	ldi	r21, 0xC2	; 194
    1b36:	7b 01       	movw	r14, r22
    1b38:	8c 01       	movw	r16, r24
    1b3a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    1b3e:	80 91 63 00 	lds	r24, 0x0063
    1b42:	21 b1       	in	r18, 0x01	; 1
    1b44:	86 95       	lsr	r24
    1b46:	86 95       	lsr	r24
    1b48:	86 95       	lsr	r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	80 95       	com	r24
    1b4e:	90 95       	com	r25
    1b50:	83 70       	andi	r24, 0x03	; 3
    1b52:	90 70       	andi	r25, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	20 95       	com	r18
    1b58:	30 95       	com	r19
    1b5a:	2c 71       	andi	r18, 0x1C	; 28
    1b5c:	30 70       	andi	r19, 0x00	; 0
    1b5e:	82 2b       	or	r24, r18
    1b60:	93 2b       	or	r25, r19
    1b62:	08 97       	sbiw	r24, 0x08	; 8
    1b64:	01 f7       	brne	.-64     	; 0x1b26 <LineW+0x3c>
    1b66:	20 c0       	rjmp	.+64     	; 0x1ba8 <LineW+0xbe>
	else
		while(READ_SENSOR() != 8) non_Holonomic(0, 50, 0);
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	48 e4       	ldi	r20, 0x48	; 72
    1b76:	52 e4       	ldi	r21, 0x42	; 66
    1b78:	7b 01       	movw	r14, r22
    1b7a:	8c 01       	movw	r16, r24
    1b7c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    1b80:	80 91 63 00 	lds	r24, 0x0063
    1b84:	21 b1       	in	r18, 0x01	; 1
    1b86:	86 95       	lsr	r24
    1b88:	86 95       	lsr	r24
    1b8a:	86 95       	lsr	r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	80 95       	com	r24
    1b90:	90 95       	com	r25
    1b92:	83 70       	andi	r24, 0x03	; 3
    1b94:	90 70       	andi	r25, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	20 95       	com	r18
    1b9a:	30 95       	com	r19
    1b9c:	2c 71       	andi	r18, 0x1C	; 28
    1b9e:	30 70       	andi	r19, 0x00	; 0
    1ba0:	82 2b       	or	r24, r18
    1ba2:	93 2b       	or	r25, r19
    1ba4:	08 97       	sbiw	r24, 0x08	; 8
    1ba6:	01 f7       	brne	.-64     	; 0x1b68 <LineW+0x7e>

	sec=0;
    1ba8:	10 92 5e 02 	sts	0x025E, r1
    1bac:	10 92 5d 02 	sts	0x025D, r1
		{
			non_Holonomic(speed,W,0);
		}
		else if(READ_SENSOR() == 8)
		{
			non_Holonomic(speed,-W,0);
    1bb0:	46 01       	movw	r8, r12
    1bb2:	aa 24       	eor	r10, r10
    1bb4:	97 fc       	sbrc	r9, 7
    1bb6:	a0 94       	com	r10
    1bb8:	ba 2c       	mov	r11, r10
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	90 95       	com	r25
    1bc0:	81 95       	neg	r24
    1bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc4:	9c 01       	movw	r18, r24
    1bc6:	44 27       	eor	r20, r20
    1bc8:	37 fd       	sbrc	r19, 7
    1bca:	40 95       	com	r20
    1bcc:	54 2f       	mov	r21, r20
    1bce:	29 83       	std	Y+1, r18	; 0x01
    1bd0:	3a 83       	std	Y+2, r19	; 0x02
    1bd2:	4b 83       	std	Y+3, r20	; 0x03
    1bd4:	5c 83       	std	Y+4, r21	; 0x04
		else if(READ_SENSOR() == 12) 
			return 3;
		
		if(READ_SENSOR() != 8)
		{
			non_Holonomic(speed,W,0);
    1bd6:	4d 81       	ldd	r20, Y+5	; 0x05
    1bd8:	5e 81       	ldd	r21, Y+6	; 0x06
    1bda:	2a 01       	movw	r4, r20
    1bdc:	66 24       	eor	r6, r6
    1bde:	57 fc       	sbrc	r5, 7
    1be0:	60 94       	com	r6
    1be2:	76 2c       	mov	r7, r6
		while(READ_SENSOR() != 8) non_Holonomic(0, 50, 0);

	sec=0;
	while(1)
	{
		display_char(0, 0, READ_SENSOR());
    1be4:	40 91 63 00 	lds	r20, 0x0063
    1be8:	81 b1       	in	r24, 0x01	; 1
    1bea:	46 95       	lsr	r20
    1bec:	46 95       	lsr	r20
    1bee:	46 95       	lsr	r20
    1bf0:	40 95       	com	r20
    1bf2:	43 70       	andi	r20, 0x03	; 3
    1bf4:	80 95       	com	r24
    1bf6:	8c 71       	andi	r24, 0x1C	; 28
    1bf8:	48 2b       	or	r20, r24
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		if(READ_SENSOR() == 0)
    1c02:	80 91 63 00 	lds	r24, 0x0063
    1c06:	21 b1       	in	r18, 0x01	; 1
    1c08:	86 95       	lsr	r24
    1c0a:	86 95       	lsr	r24
    1c0c:	86 95       	lsr	r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	80 95       	com	r24
    1c12:	90 95       	com	r25
    1c14:	83 70       	andi	r24, 0x03	; 3
    1c16:	90 70       	andi	r25, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	20 95       	com	r18
    1c1c:	30 95       	com	r19
    1c1e:	2c 71       	andi	r18, 0x1C	; 28
    1c20:	30 70       	andi	r19, 0x00	; 0
    1c22:	82 2b       	or	r24, r18
    1c24:	93 2b       	or	r25, r19
    1c26:	89 2b       	or	r24, r25
    1c28:	51 f4       	brne	.+20     	; 0x1c3e <LineW+0x154>
		{
			if(sec > time)
    1c2a:	80 91 5d 02 	lds	r24, 0x025D
    1c2e:	90 91 5e 02 	lds	r25, 0x025E
    1c32:	28 16       	cp	r2, r24
    1c34:	39 06       	cpc	r3, r25
    1c36:	38 f4       	brcc	.+14     	; 0x1c46 <LineW+0x15c>
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	ad c0       	rjmp	.+346    	; 0x1d98 <LineW+0x2ae>
				return 0;
		}
		else sec=0;
    1c3e:	10 92 5e 02 	sts	0x025E, r1
    1c42:	10 92 5d 02 	sts	0x025D, r1
		if(READ_SENSOR() == 28)
    1c46:	80 91 63 00 	lds	r24, 0x0063
    1c4a:	21 b1       	in	r18, 0x01	; 1
    1c4c:	86 95       	lsr	r24
    1c4e:	86 95       	lsr	r24
    1c50:	86 95       	lsr	r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	80 95       	com	r24
    1c56:	90 95       	com	r25
    1c58:	83 70       	andi	r24, 0x03	; 3
    1c5a:	90 70       	andi	r25, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	20 95       	com	r18
    1c60:	30 95       	com	r19
    1c62:	2c 71       	andi	r18, 0x1C	; 28
    1c64:	30 70       	andi	r19, 0x00	; 0
    1c66:	82 2b       	or	r24, r18
    1c68:	93 2b       	or	r25, r19
    1c6a:	4c 97       	sbiw	r24, 0x1c	; 28
    1c6c:	19 f4       	brne	.+6      	; 0x1c74 <LineW+0x18a>
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	92 c0       	rjmp	.+292    	; 0x1d98 <LineW+0x2ae>
			return 1;
		else if(READ_SENSOR() == 24) 
    1c74:	80 91 63 00 	lds	r24, 0x0063
    1c78:	21 b1       	in	r18, 0x01	; 1
    1c7a:	86 95       	lsr	r24
    1c7c:	86 95       	lsr	r24
    1c7e:	86 95       	lsr	r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	80 95       	com	r24
    1c84:	90 95       	com	r25
    1c86:	83 70       	andi	r24, 0x03	; 3
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	20 95       	com	r18
    1c8e:	30 95       	com	r19
    1c90:	2c 71       	andi	r18, 0x1C	; 28
    1c92:	30 70       	andi	r19, 0x00	; 0
    1c94:	82 2b       	or	r24, r18
    1c96:	93 2b       	or	r25, r19
    1c98:	48 97       	sbiw	r24, 0x18	; 24
    1c9a:	19 f4       	brne	.+6      	; 0x1ca2 <LineW+0x1b8>
    1c9c:	22 e0       	ldi	r18, 0x02	; 2
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	7b c0       	rjmp	.+246    	; 0x1d98 <LineW+0x2ae>
			return 2;
		else if(READ_SENSOR() == 12) 
    1ca2:	80 91 63 00 	lds	r24, 0x0063
    1ca6:	21 b1       	in	r18, 0x01	; 1
    1ca8:	86 95       	lsr	r24
    1caa:	86 95       	lsr	r24
    1cac:	86 95       	lsr	r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	80 95       	com	r24
    1cb2:	90 95       	com	r25
    1cb4:	83 70       	andi	r24, 0x03	; 3
    1cb6:	90 70       	andi	r25, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	20 95       	com	r18
    1cbc:	30 95       	com	r19
    1cbe:	2c 71       	andi	r18, 0x1C	; 28
    1cc0:	30 70       	andi	r19, 0x00	; 0
    1cc2:	82 2b       	or	r24, r18
    1cc4:	93 2b       	or	r25, r19
    1cc6:	0c 97       	sbiw	r24, 0x0c	; 12
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <LineW+0x1e6>
    1cca:	23 e0       	ldi	r18, 0x03	; 3
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	64 c0       	rjmp	.+200    	; 0x1d98 <LineW+0x2ae>
			return 3;
		
		if(READ_SENSOR() != 8)
    1cd0:	80 91 63 00 	lds	r24, 0x0063
    1cd4:	21 b1       	in	r18, 0x01	; 1
    1cd6:	86 95       	lsr	r24
    1cd8:	86 95       	lsr	r24
    1cda:	86 95       	lsr	r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	80 95       	com	r24
    1ce0:	90 95       	com	r25
    1ce2:	83 70       	andi	r24, 0x03	; 3
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	20 95       	com	r18
    1cea:	30 95       	com	r19
    1cec:	2c 71       	andi	r18, 0x1C	; 28
    1cee:	30 70       	andi	r19, 0x00	; 0
    1cf0:	82 2b       	or	r24, r18
    1cf2:	93 2b       	or	r25, r19
    1cf4:	08 97       	sbiw	r24, 0x08	; 8
    1cf6:	49 f0       	breq	.+18     	; 0x1d0a <LineW+0x220>
		{
			non_Holonomic(speed,W,0);
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	b4 01       	movw	r22, r8
    1cfc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1d00:	7b 01       	movw	r14, r22
    1d02:	8c 01       	movw	r16, r24
    1d04:	c3 01       	movw	r24, r6
    1d06:	b2 01       	movw	r22, r4
    1d08:	1e c0       	rjmp	.+60     	; 0x1d46 <LineW+0x25c>
		}
		else if(READ_SENSOR() == 8)
    1d0a:	80 91 63 00 	lds	r24, 0x0063
    1d0e:	21 b1       	in	r18, 0x01	; 1
    1d10:	86 95       	lsr	r24
    1d12:	86 95       	lsr	r24
    1d14:	86 95       	lsr	r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	80 95       	com	r24
    1d1a:	90 95       	com	r25
    1d1c:	83 70       	andi	r24, 0x03	; 3
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	20 95       	com	r18
    1d24:	30 95       	com	r19
    1d26:	2c 71       	andi	r18, 0x1C	; 28
    1d28:	30 70       	andi	r19, 0x00	; 0
    1d2a:	82 2b       	or	r24, r18
    1d2c:	93 2b       	or	r25, r19
    1d2e:	08 97       	sbiw	r24, 0x08	; 8
    1d30:	e1 f4       	brne	.+56     	; 0x1d6a <LineW+0x280>
		{
			non_Holonomic(speed,-W,0);
    1d32:	c5 01       	movw	r24, r10
    1d34:	b4 01       	movw	r22, r8
    1d36:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1d3a:	7b 01       	movw	r14, r22
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	69 81       	ldd	r22, Y+1	; 0x01
    1d40:	7a 81       	ldd	r23, Y+2	; 0x02
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    1d4a:	9b 01       	movw	r18, r22
    1d4c:	ac 01       	movw	r20, r24
    1d4e:	c8 01       	movw	r24, r16
    1d50:	b7 01       	movw	r22, r14
    1d52:	0f 2e       	mov	r0, r31
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	ef 2e       	mov	r14, r31
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	ff 2e       	mov	r15, r31
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	0f 2f       	mov	r16, r31
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	1f 2f       	mov	r17, r31
    1d64:	f0 2d       	mov	r31, r0
    1d66:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
		}

		if((Camera_Cmd(0, 0) > 100) && (Camera_Cmd(0, 1) > 110) && (Camera_Cmd(0, 1) < 135)) {
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1d72:	85 36       	cpi	r24, 0x65	; 101
    1d74:	08 f4       	brcc	.+2      	; 0x1d78 <LineW+0x28e>
    1d76:	36 cf       	rjmp	.-404    	; 0x1be4 <LineW+0xfa>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1d80:	8f 36       	cpi	r24, 0x6F	; 111
    1d82:	08 f4       	brcc	.+2      	; 0x1d86 <LineW+0x29c>
    1d84:	2f cf       	rjmp	.-418    	; 0x1be4 <LineW+0xfa>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1d8e:	87 38       	cpi	r24, 0x87	; 135
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <LineW+0x2aa>
    1d92:	28 cf       	rjmp	.-432    	; 0x1be4 <LineW+0xfa>
    1d94:	24 e0       	ldi	r18, 0x04	; 4
    1d96:	30 e0       	ldi	r19, 0x00	; 0
			return 4;
		}
	}
}
    1d98:	c9 01       	movw	r24, r18
    1d9a:	26 96       	adiw	r28, 0x06	; 6
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	bf 90       	pop	r11
    1db8:	af 90       	pop	r10
    1dba:	9f 90       	pop	r9
    1dbc:	8f 90       	pop	r8
    1dbe:	7f 90       	pop	r7
    1dc0:	6f 90       	pop	r6
    1dc2:	5f 90       	pop	r5
    1dc4:	4f 90       	pop	r4
    1dc6:	3f 90       	pop	r3
    1dc8:	2f 90       	pop	r2
    1dca:	08 95       	ret

00001dcc <readsensor>:
		}
	}

}
void readsensor(int mode)
{
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	ec 01       	movw	r28, r24
	lcd_clear_screen();
    1dd2:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_clear_screen>
	while(1) 
	{
		display_char(0, 6, psd_value[0]);
    1dd6:	40 91 ec 02 	lds	r20, 0x02EC
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	66 e0       	ldi	r22, 0x06	; 6
    1dde:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(0, 0, psd_value[1]);
    1de2:	40 91 ed 02 	lds	r20, 0x02ED
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(1, 0, psd_value[2]);
    1dee:	40 91 ee 02 	lds	r20, 0x02EE
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(2, 0, psd_value[3]);
    1dfa:	40 91 ef 02 	lds	r20, 0x02EF
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(3, 0, psd_value[4]);
    1e06:	40 91 f0 02 	lds	r20, 0x02F0
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(3, 12, psd_value[5]);
    1e12:	40 91 f1 02 	lds	r20, 0x02F1
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	6c e0       	ldi	r22, 0x0C	; 12
    1e1a:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(0, 12, psd_value[8]);
    1e1e:	40 91 f4 02 	lds	r20, 0x02F4
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	6c e0       	ldi	r22, 0x0C	; 12
    1e26:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(1, 12, psd_value[7]);
    1e2a:	40 91 f3 02 	lds	r20, 0x02F3
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	6c e0       	ldi	r22, 0x0C	; 12
    1e32:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(2, 12, psd_value[6]);
    1e36:	40 91 f2 02 	lds	r20, 0x02F2
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	6c e0       	ldi	r22, 0x0C	; 12
    1e3e:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		display_char(2, 6, READ_SENSOR());
    1e42:	40 91 63 00 	lds	r20, 0x0063
    1e46:	81 b1       	in	r24, 0x01	; 1
    1e48:	46 95       	lsr	r20
    1e4a:	46 95       	lsr	r20
    1e4c:	46 95       	lsr	r20
    1e4e:	40 95       	com	r20
    1e50:	43 70       	andi	r20, 0x03	; 3
    1e52:	80 95       	com	r24
    1e54:	8c 71       	andi	r24, 0x1C	; 28
    1e56:	48 2b       	or	r20, r24
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	66 e0       	ldi	r22, 0x06	; 6
    1e5c:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
		if (mode == 1)
    1e60:	c1 30       	cpi	r28, 0x01	; 1
    1e62:	d1 05       	cpc	r29, r1
    1e64:	29 f5       	brne	.+74     	; 0x1eb0 <readsensor+0xe4>
		{
			display_char(0, 17, Camera_Cmd(1, 102));
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	66 e6       	ldi	r22, 0x66	; 102
    1e6a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1e6e:	48 2f       	mov	r20, r24
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	61 e1       	ldi	r22, 0x11	; 17
    1e74:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
			display_char(1, 17, Camera_Cmd(1, 103));
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	67 e6       	ldi	r22, 0x67	; 103
    1e7c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1e80:	48 2f       	mov	r20, r24
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	61 e1       	ldi	r22, 0x11	; 17
    1e86:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
			display_char(2, 17, Camera_Cmd(2, 102));
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	66 e6       	ldi	r22, 0x66	; 102
    1e8e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1e92:	48 2f       	mov	r20, r24
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	61 e1       	ldi	r22, 0x11	; 17
    1e98:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
			display_char(3, 17, Camera_Cmd(2, 103));
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	67 e6       	ldi	r22, 0x67	; 103
    1ea0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	61 e1       	ldi	r22, 0x11	; 17
    1eaa:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
    1eae:	93 cf       	rjmp	.-218    	; 0x1dd6 <readsensor+0xa>
		//	display_char(2, 17, Camera_Cmd(3, 102));
		//	display_char(0, 17, Camera_Cmd(0, 000));
		//	display_char(1, 17, Camera_Cmd(0, 001));
		//	display_char(2, 17, Camera_Cmd(0, 003));
		}
		else if(mode == 0){
    1eb0:	20 97       	sbiw	r28, 0x00	; 0
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <readsensor+0xea>
    1eb4:	90 cf       	rjmp	.-224    	; 0x1dd6 <readsensor+0xa>
			lcd_display_str(0, 17, "X");
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	61 e1       	ldi	r22, 0x11	; 17
    1eba:	43 e2       	ldi	r20, 0x23	; 35
    1ebc:	51 e0       	ldi	r21, 0x01	; 1
    1ebe:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_display_str>
			lcd_display_str(1, 17, "X");
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	61 e1       	ldi	r22, 0x11	; 17
    1ec6:	43 e2       	ldi	r20, 0x23	; 35
    1ec8:	51 e0       	ldi	r21, 0x01	; 1
    1eca:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_display_str>
			lcd_display_str(2, 17, "X"); 
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	61 e1       	ldi	r22, 0x11	; 17
    1ed2:	43 e2       	ldi	r20, 0x23	; 35
    1ed4:	51 e0       	ldi	r21, 0x01	; 1
    1ed6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_display_str>
    1eda:	7d cf       	rjmp	.-262    	; 0x1dd6 <readsensor+0xa>

00001edc <cameraconnect>:
}

int cameraconnect(void)
{
	int count = 0;
	putchar1(112);
    1edc:	80 e7       	ldi	r24, 0x70	; 112
    1ede:	0e 94 c5 00 	call	0x18a	; 0x18a <putchar1>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	09 c0       	rjmp	.+18     	; 0x1efa <cameraconnect+0x1e>
	while(!rx1_flg)
	{
		count++;
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
		if (count > 500)
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	25 3f       	cpi	r18, 0xF5	; 245
    1ef0:	38 07       	cpc	r19, r24
    1ef2:	19 f4       	brne	.+6      	; 0x1efa <cameraconnect+0x1e>
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <cameraconnect+0x2a>

int cameraconnect(void)
{
	int count = 0;
	putchar1(112);
	while(!rx1_flg)
    1efa:	80 91 3a 02 	lds	r24, 0x023A
    1efe:	88 23       	and	r24, r24
    1f00:	99 f3       	breq	.-26     	; 0x1ee8 <cameraconnect+0xc>
    1f02:	21 e0       	ldi	r18, 0x01	; 1
    1f04:	30 e0       	ldi	r19, 0x00	; 0
		count++;
		if (count > 500)
			return 0;
	}
	return 1;
}
    1f06:	c9 01       	movw	r24, r18
    1f08:	08 95       	ret

00001f0a <main>:
void LSB(int delay);
void RSB(int delay);
int LineW(int W,int speed, int time);

int main(void)
{    
    1f0a:	4f 92       	push	r4
    1f0c:	5f 92       	push	r5
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
	int flag = 0, cnt=0, cnt2=0;
	unsigned char SENSOR=0;
    Interface_init(); //인터페이스 초기화
    1f28:	0e 94 cd 00 	call	0x19a	; 0x19a <Interface_init>
	LM629_HW_Reset();
    1f2c:	0e 94 43 03 	call	0x686	; 0x686 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
    1f30:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
    1f34:	0e 94 a8 02 	call	0x550	; 0x550 <Motor_init>
	Sensor_init();
    1f38:	0e 94 bc 04 	call	0x978	; 0x978 <Sensor_init>
	TCCR1A=0x00;
    1f3c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
    1f3e:	85 e0       	ldi	r24, 0x05	; 5
    1f40:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0xFF;
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    1f46:	80 e7       	ldi	r24, 0x70	; 112
    1f48:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	87 bf       	out	0x37, r24	; 55
	sei();
    1f4e:	78 94       	sei
    1f50:	88 24       	eor	r8, r8
    1f52:	99 24       	eor	r9, r9
			while(1) {
				if(psd_value[1] > 200) {
					non_Holonomic(0, 0, 0);
					break;
				}
				else non_Holonomic(200,0,-(psd_value[8]-120));
    1f54:	18 e7       	ldi	r17, 0x78	; 120
    1f56:	41 2e       	mov	r4, r17
    1f58:	51 2c       	mov	r5, r1
	TCNT1H=0xFF;
	TCNT1L=0x70;
	TIMSK=0x04;
	sei();
	while(1){
		if (SW1)
    1f5a:	b4 99       	sbic	0x16, 4	; 22
    1f5c:	9f c1       	rjmp	.+830    	; 0x229c <main+0x392>
		{int mode=0;
			while(1) {
				mode = LineW(20, 200, 200);
    1f5e:	84 e1       	ldi	r24, 0x14	; 20
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	68 ec       	ldi	r22, 0xC8	; 200
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	48 ec       	ldi	r20, 0xC8	; 200
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LineW>
    1f6e:	6c 01       	movw	r12, r24
				
				if((mode == 0) || (mode == 4)) {
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	21 f0       	breq	.+8      	; 0x1f7c <main+0x72>
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	c8 16       	cp	r12, r24
    1f78:	d1 04       	cpc	r13, r1
    1f7a:	91 f4       	brne	.+36     	; 0x1fa0 <main+0x96>
					non_Holonomic(0, 0, 0);
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	7b 01       	movw	r14, r22
    1f8a:	8c 01       	movw	r16, r24
    1f8c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
					LineW(20, 200, 200);
					Turn_and_Drive(0, 300, 50, 200, 90, 250, 85);
				}
			}
			
			if((Camera_Cmd(1, 103) != 0) && mode == 4)
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	67 e6       	ldi	r22, 0x67	; 103
    1f94:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <main+0x94>
    1f9c:	62 c0       	rjmp	.+196    	; 0x2062 <main+0x158>
    1f9e:	69 c0       	rjmp	.+210    	; 0x2072 <main+0x168>
				
				if((mode == 0) || (mode == 4)) {
					non_Holonomic(0, 0, 0);
					break;
				}
				else if(mode == 2) {
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	c8 16       	cp	r12, r24
    1fa4:	d1 04       	cpc	r13, r1
    1fa6:	59 f5       	brne	.+86     	; 0x1ffe <main+0xf4>
					Turn_and_Drive(0, 300, 50, 200, 90, 250, 85);
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	4c e2       	ldi	r20, 0x2C	; 44
    1fb2:	51 e0       	ldi	r21, 0x01	; 1
    1fb4:	22 e3       	ldi	r18, 0x32	; 50
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	08 ec       	ldi	r16, 0xC8	; 200
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	ba e5       	ldi	r27, 0x5A	; 90
    1fbe:	eb 2e       	mov	r14, r27
    1fc0:	f1 2c       	mov	r15, r1
    1fc2:	aa ef       	ldi	r26, 0xFA	; 250
    1fc4:	ca 2e       	mov	r12, r26
    1fc6:	d1 2c       	mov	r13, r1
    1fc8:	f5 e5       	ldi	r31, 0x55	; 85
    1fca:	af 2e       	mov	r10, r31
    1fcc:	b1 2c       	mov	r11, r1
    1fce:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
					LineW(20, 200, 200);
    1fd2:	84 e1       	ldi	r24, 0x14	; 20
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	68 ec       	ldi	r22, 0xC8	; 200
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	48 ec       	ldi	r20, 0xC8	; 200
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LineW>
					Turn_and_Drive(0, 300, -50, 100, 90, 100, 85);
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	4c e2       	ldi	r20, 0x2C	; 44
    1fec:	51 e0       	ldi	r21, 0x01	; 1
    1fee:	2e ec       	ldi	r18, 0xCE	; 206
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	04 e6       	ldi	r16, 0x64	; 100
    1ff4:	10 e0       	ldi	r17, 0x00	; 0
    1ff6:	e4 e6       	ldi	r30, 0x64	; 100
    1ff8:	ce 2e       	mov	r12, r30
    1ffa:	d1 2c       	mov	r13, r1
    1ffc:	2f c0       	rjmp	.+94     	; 0x205c <main+0x152>
				}
				else if(mode == 3) {
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	c8 16       	cp	r12, r24
    2002:	d1 04       	cpc	r13, r1
    2004:	09 f0       	breq	.+2      	; 0x2008 <main+0xfe>
    2006:	ab cf       	rjmp	.-170    	; 0x1f5e <main+0x54>
					Turn_and_Drive(0, 300, -50, 100, 90, 100, 85);
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	4c e2       	ldi	r20, 0x2C	; 44
    2012:	51 e0       	ldi	r21, 0x01	; 1
    2014:	2e ec       	ldi	r18, 0xCE	; 206
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	04 e6       	ldi	r16, 0x64	; 100
    201a:	10 e0       	ldi	r17, 0x00	; 0
    201c:	ba e5       	ldi	r27, 0x5A	; 90
    201e:	eb 2e       	mov	r14, r27
    2020:	f1 2c       	mov	r15, r1
    2022:	a4 e6       	ldi	r26, 0x64	; 100
    2024:	ca 2e       	mov	r12, r26
    2026:	d1 2c       	mov	r13, r1
    2028:	f5 e5       	ldi	r31, 0x55	; 85
    202a:	af 2e       	mov	r10, r31
    202c:	b1 2c       	mov	r11, r1
    202e:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
					LineW(20, 200, 200);
    2032:	84 e1       	ldi	r24, 0x14	; 20
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	68 ec       	ldi	r22, 0xC8	; 200
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	48 ec       	ldi	r20, 0xC8	; 200
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LineW>
					Turn_and_Drive(0, 300, 50, 200, 90, 250, 85);
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	4c e2       	ldi	r20, 0x2C	; 44
    204c:	51 e0       	ldi	r21, 0x01	; 1
    204e:	22 e3       	ldi	r18, 0x32	; 50
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	08 ec       	ldi	r16, 0xC8	; 200
    2054:	10 e0       	ldi	r17, 0x00	; 0
    2056:	ea ef       	ldi	r30, 0xFA	; 250
    2058:	ce 2e       	mov	r12, r30
    205a:	d1 2c       	mov	r13, r1
    205c:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
    2060:	7e cf       	rjmp	.-260    	; 0x1f5e <main+0x54>
				}
			}
			
			if((Camera_Cmd(1, 103) != 0) && mode == 4)
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	c8 16       	cp	r12, r24
    2066:	d1 04       	cpc	r13, r1
    2068:	21 f4       	brne	.+8      	; 0x2072 <main+0x168>
    206a:	11 e0       	ldi	r17, 0x01	; 1
    206c:	81 2e       	mov	r8, r17
    206e:	91 2c       	mov	r9, r1
    2070:	11 c0       	rjmp	.+34     	; 0x2094 <main+0x18a>
				flag = 1;
			else if((Camera_Cmd(2, 103) != 0) && mode == 4)
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	67 e6       	ldi	r22, 0x67	; 103
    2076:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    207a:	88 23       	and	r24, r24
    207c:	41 f0       	breq	.+16     	; 0x208e <main+0x184>
    207e:	84 e0       	ldi	r24, 0x04	; 4
    2080:	c8 16       	cp	r12, r24
    2082:	d1 04       	cpc	r13, r1
    2084:	21 f4       	brne	.+8      	; 0x208e <main+0x184>
    2086:	b2 e0       	ldi	r27, 0x02	; 2
    2088:	8b 2e       	mov	r8, r27
    208a:	91 2c       	mov	r9, r1
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <main+0x18a>
    208e:	a3 e0       	ldi	r26, 0x03	; 3
    2090:	8a 2e       	mov	r8, r26
    2092:	91 2c       	mov	r9, r1
				flag = 2;
			else
				flag = 3;
			
			while(1) {
				if(psd_value[1] > 130)
    2094:	80 91 ed 02 	lds	r24, 0x02ED
    2098:	83 38       	cpi	r24, 0x83	; 131
    209a:	68 f4       	brcc	.+26     	; 0x20b6 <main+0x1ac>
					break;
				else
					non_Holonomic(0, -200, 0);
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	48 e4       	ldi	r20, 0x48	; 72
    20aa:	53 ec       	ldi	r21, 0xC3	; 195
    20ac:	7b 01       	movw	r14, r22
    20ae:	8c 01       	movw	r16, r24
    20b0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    20b4:	ef cf       	rjmp	.-34     	; 0x2094 <main+0x18a>
			}
			PSD_Wall_Follow(3, 1, 140, 0, 0, 200);
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	4c e8       	ldi	r20, 0x8C	; 140
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	00 e0       	ldi	r16, 0x00	; 0
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	f8 ec       	ldi	r31, 0xC8	; 200
    20cc:	ef 2e       	mov	r14, r31
    20ce:	f1 2c       	mov	r15, r1
    20d0:	0e 94 63 07 	call	0xec6	; 0xec6 <PSD_Wall_Follow>
			if(((Camera_Cmd(flag, 102)>110) && (Camera_Cmd(flag, 102)<140)) || (mode == 0)) {
    20d4:	78 2c       	mov	r7, r8
    20d6:	88 2d       	mov	r24, r8
    20d8:	66 e6       	ldi	r22, 0x66	; 102
    20da:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    20de:	8f 36       	cpi	r24, 0x6F	; 111
    20e0:	30 f0       	brcs	.+12     	; 0x20ee <main+0x1e4>
    20e2:	88 2d       	mov	r24, r8
    20e4:	66 e6       	ldi	r22, 0x66	; 102
    20e6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    20ea:	8c 38       	cpi	r24, 0x8C	; 140
    20ec:	10 f0       	brcs	.+4      	; 0x20f2 <main+0x1e8>
    20ee:	cd 28       	or	r12, r13
    20f0:	89 f4       	brne	.+34     	; 0x2114 <main+0x20a>
				Turn_and_Drive(0, 200, 60, 100, 180, 50, 170);
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	48 ec       	ldi	r20, 0xC8	; 200
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	2c e3       	ldi	r18, 0x3C	; 60
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	04 e6       	ldi	r16, 0x64	; 100
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	e4 eb       	ldi	r30, 0xB4	; 180
    2108:	ee 2e       	mov	r14, r30
    210a:	f1 2c       	mov	r15, r1
    210c:	b2 e3       	ldi	r27, 0x32	; 50
    210e:	cb 2e       	mov	r12, r27
    2110:	d1 2c       	mov	r13, r1
    2112:	9e c0       	rjmp	.+316    	; 0x2250 <main+0x346>
				RSB(500);
				return;
			}
			
			Turn_and_Drive(90, 200, 60, 200, 90, 150, 80);
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	84 eb       	ldi	r24, 0xB4	; 180
    211a:	92 e4       	ldi	r25, 0x42	; 66
    211c:	48 ec       	ldi	r20, 0xC8	; 200
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	2c e3       	ldi	r18, 0x3C	; 60
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	08 ec       	ldi	r16, 0xC8	; 200
    2126:	10 e0       	ldi	r17, 0x00	; 0
    2128:	aa e5       	ldi	r26, 0x5A	; 90
    212a:	ea 2e       	mov	r14, r26
    212c:	f1 2c       	mov	r15, r1
    212e:	f6 e9       	ldi	r31, 0x96	; 150
    2130:	cf 2e       	mov	r12, r31
    2132:	d1 2c       	mov	r13, r1
    2134:	e0 e5       	ldi	r30, 0x50	; 80
    2136:	ae 2e       	mov	r10, r30
    2138:	b1 2c       	mov	r11, r1
    213a:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
			while(1)
			{
				if(psd_value[1] > 110) {
    213e:	80 91 ed 02 	lds	r24, 0x02ED
    2142:	8f 36       	cpi	r24, 0x6F	; 111
    2144:	08 f4       	brcc	.+2      	; 0x2148 <main+0x23e>
    2146:	9d c0       	rjmp	.+314    	; 0x2282 <main+0x378>
					Turn_and_Drive(0, 200, -40, 600, 90, 550, 80);
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	48 ec       	ldi	r20, 0xC8	; 200
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	28 ed       	ldi	r18, 0xD8	; 216
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	08 e5       	ldi	r16, 0x58	; 88
    215a:	12 e0       	ldi	r17, 0x02	; 2
    215c:	ba e5       	ldi	r27, 0x5A	; 90
    215e:	eb 2e       	mov	r14, r27
    2160:	f1 2c       	mov	r15, r1
    2162:	a6 e2       	ldi	r26, 0x26	; 38
    2164:	ca 2e       	mov	r12, r26
    2166:	a2 e0       	ldi	r26, 0x02	; 2
    2168:	da 2e       	mov	r13, r26
    216a:	f0 e5       	ldi	r31, 0x50	; 80
    216c:	af 2e       	mov	r10, r31
    216e:	b1 2c       	mov	r11, r1
    2170:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
					if(((Camera_Cmd(flag, 102)>110) && (Camera_Cmd(flag, 102)<140)) || (mode == 0)) {
    2174:	87 2d       	mov	r24, r7
    2176:	66 e6       	ldi	r22, 0x66	; 102
    2178:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    217c:	8f 36       	cpi	r24, 0x6F	; 111
    217e:	30 f0       	brcs	.+12     	; 0x218c <main+0x282>
    2180:	87 2d       	mov	r24, r7
    2182:	66 e6       	ldi	r22, 0x66	; 102
    2184:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    2188:	8c 38       	cpi	r24, 0x8C	; 140
    218a:	d8 f0       	brcs	.+54     	; 0x21c2 <main+0x2b8>
						Turn_and_Drive(0, 200, 70, 550, 180, 500, 170);
						RSB(500);
						return;
					}
					else{
						Turn_and_Drive(0, 0, 70, 0, 90, 0, 80);
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	26 e4       	ldi	r18, 0x46	; 70
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	10 e0       	ldi	r17, 0x00	; 0
    21a0:	ea e5       	ldi	r30, 0x5A	; 90
    21a2:	ee 2e       	mov	r14, r30
    21a4:	f1 2c       	mov	r15, r1
    21a6:	cc 24       	eor	r12, r12
    21a8:	dd 24       	eor	r13, r13
    21aa:	b0 e5       	ldi	r27, 0x50	; 80
    21ac:	ab 2e       	mov	r10, r27
    21ae:	b1 2c       	mov	r11, r1
    21b0:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
						if(((Camera_Cmd(flag, 102)>110) && (Camera_Cmd(flag, 102)<140)) || (mode == 0)) {
    21b4:	87 2d       	mov	r24, r7
    21b6:	66 e6       	ldi	r22, 0x66	; 102
    21b8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    21bc:	8f 36       	cpi	r24, 0x6F	; 111
    21be:	60 f1       	brcs	.+88     	; 0x2218 <main+0x30e>
    21c0:	25 c0       	rjmp	.+74     	; 0x220c <main+0x302>
			while(1)
			{
				if(psd_value[1] > 110) {
					Turn_and_Drive(0, 200, -40, 600, 90, 550, 80);
					if(((Camera_Cmd(flag, 102)>110) && (Camera_Cmd(flag, 102)<140)) || (mode == 0)) {
						Turn_and_Drive(180, 200, 0, 250, 0, 200, 0);
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	84 e3       	ldi	r24, 0x34	; 52
    21c8:	93 e4       	ldi	r25, 0x43	; 67
    21ca:	48 ec       	ldi	r20, 0xC8	; 200
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	0a ef       	ldi	r16, 0xFA	; 250
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	ee 24       	eor	r14, r14
    21d8:	ff 24       	eor	r15, r15
    21da:	a8 ec       	ldi	r26, 0xC8	; 200
    21dc:	ca 2e       	mov	r12, r26
    21de:	d1 2c       	mov	r13, r1
    21e0:	aa 24       	eor	r10, r10
    21e2:	bb 24       	eor	r11, r11
    21e4:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
						Turn_and_Drive(0, 200, 70, 550, 180, 500, 170);
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	48 ec       	ldi	r20, 0xC8	; 200
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	26 e4       	ldi	r18, 0x46	; 70
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	06 e2       	ldi	r16, 0x26	; 38
    21fa:	12 e0       	ldi	r17, 0x02	; 2
    21fc:	f4 eb       	ldi	r31, 0xB4	; 180
    21fe:	ef 2e       	mov	r14, r31
    2200:	f1 2c       	mov	r15, r1
    2202:	e4 ef       	ldi	r30, 0xF4	; 244
    2204:	ce 2e       	mov	r12, r30
    2206:	e1 e0       	ldi	r30, 0x01	; 1
    2208:	de 2e       	mov	r13, r30
    220a:	22 c0       	rjmp	.+68     	; 0x2250 <main+0x346>
						RSB(500);
						return;
					}
					else{
						Turn_and_Drive(0, 0, 70, 0, 90, 0, 80);
						if(((Camera_Cmd(flag, 102)>110) && (Camera_Cmd(flag, 102)<140)) || (mode == 0)) {
    220c:	87 2d       	mov	r24, r7
    220e:	66 e6       	ldi	r22, 0x66	; 102
    2210:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    2214:	8c 38       	cpi	r24, 0x8C	; 140
    2216:	58 f0       	brcs	.+22     	; 0x222e <main+0x324>
							Turn_and_Drive(180, 200, 70, 400, 180, 350, 170);
							RSB(500);
							return;
						}
						else {
							non_Holonomic(0, 0, 0);
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	7b 01       	movw	r14, r22
    2226:	8c 01       	movw	r16, r24
    2228:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    222c:	96 ce       	rjmp	.-724    	; 0x1f5a <main+0x50>
						return;
					}
					else{
						Turn_and_Drive(0, 0, 70, 0, 90, 0, 80);
						if(((Camera_Cmd(flag, 102)>110) && (Camera_Cmd(flag, 102)<140)) || (mode == 0)) {
							Turn_and_Drive(180, 200, 70, 400, 180, 350, 170);
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	84 e3       	ldi	r24, 0x34	; 52
    2234:	93 e4       	ldi	r25, 0x43	; 67
    2236:	48 ec       	ldi	r20, 0xC8	; 200
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	26 e4       	ldi	r18, 0x46	; 70
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	00 e9       	ldi	r16, 0x90	; 144
    2240:	11 e0       	ldi	r17, 0x01	; 1
    2242:	b4 eb       	ldi	r27, 0xB4	; 180
    2244:	eb 2e       	mov	r14, r27
    2246:	f1 2c       	mov	r15, r1
    2248:	ae e5       	ldi	r26, 0x5E	; 94
    224a:	ca 2e       	mov	r12, r26
    224c:	a1 e0       	ldi	r26, 0x01	; 1
    224e:	da 2e       	mov	r13, r26
    2250:	fa ea       	ldi	r31, 0xAA	; 170
    2252:	af 2e       	mov	r10, r31
    2254:	b1 2c       	mov	r11, r1
    2256:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
							RSB(500);
    225a:	84 ef       	ldi	r24, 0xF4	; 244
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <RSB>
				flag = 3;
			
			display_char(0, 0, flag);
		}
	}  		
}
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	af 90       	pop	r10
    2276:	9f 90       	pop	r9
    2278:	8f 90       	pop	r8
    227a:	7f 90       	pop	r7
    227c:	5f 90       	pop	r5
    227e:	4f 90       	pop	r4
    2280:	08 95       	ret
							break;
						}
					}
				}
				else
					non_Holonomic(200, 0, 0);
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	88 e4       	ldi	r24, 0x48	; 72
    2288:	93 e4       	ldi	r25, 0x43	; 67
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	79 01       	movw	r14, r18
    2294:	8a 01       	movw	r16, r20
    2296:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    229a:	51 cf       	rjmp	.-350    	; 0x213e <main+0x234>
			}
		} 
		else if(SW2) 
    229c:	b5 99       	sbic	0x16, 5	; 22
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <main+0x3a0>
		{
			readsensor(1);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <readsensor>
    22a8:	58 ce       	rjmp	.-848    	; 0x1f5a <main+0x50>
		}
		else if(SW3)
    22aa:	b6 99       	sbic	0x16, 6	; 22
    22ac:	56 ce       	rjmp	.-852    	; 0x1f5a <main+0x50>
		{
			while(1) {
				if(psd_value[1] > 200) {
    22ae:	80 91 ed 02 	lds	r24, 0x02ED
    22b2:	89 3c       	cpi	r24, 0xC9	; 201
    22b4:	00 f1       	brcs	.+64     	; 0x22f6 <main+0x3ec>
					non_Holonomic(0, 0, 0);
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9b 01       	movw	r18, r22
    22c0:	ac 01       	movw	r20, r24
    22c2:	7b 01       	movw	r14, r22
    22c4:	8c 01       	movw	r16, r24
    22c6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
						flag = 2;
				}
				display_char(0, 0, flag);
			}

			Turn_and_Drive(180, 200, 0, 100, 0, 50, 0);
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	84 e3       	ldi	r24, 0x34	; 52
    22d0:	93 e4       	ldi	r25, 0x43	; 67
    22d2:	48 ec       	ldi	r20, 0xC8	; 200
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	04 e6       	ldi	r16, 0x64	; 100
    22dc:	10 e0       	ldi	r17, 0x00	; 0
    22de:	ee 24       	eor	r14, r14
    22e0:	ff 24       	eor	r15, r15
    22e2:	e2 e3       	ldi	r30, 0x32	; 50
    22e4:	ce 2e       	mov	r12, r30
    22e6:	d1 2c       	mov	r13, r1
    22e8:	aa 24       	eor	r10, r10
    22ea:	bb 24       	eor	r11, r11
    22ec:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
    22f0:	c0 e0       	ldi	r28, 0x00	; 0
    22f2:	d0 e0       	ldi	r29, 0x00	; 0
    22f4:	37 c0       	rjmp	.+110    	; 0x2364 <main+0x45a>
			while(1) {
				if(psd_value[1] > 200) {
					non_Holonomic(0, 0, 0);
					break;
				}
				else non_Holonomic(200,0,-(psd_value[8]-120));
    22f6:	80 91 f4 02 	lds	r24, 0x02F4
    22fa:	b2 01       	movw	r22, r4
    22fc:	68 1b       	sub	r22, r24
    22fe:	71 09       	sbc	r23, r1
    2300:	88 27       	eor	r24, r24
    2302:	77 fd       	sbrc	r23, 7
    2304:	80 95       	com	r24
    2306:	98 2f       	mov	r25, r24
    2308:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatsisf>
    230c:	7b 01       	movw	r14, r22
    230e:	8c 01       	movw	r16, r24
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	88 e4       	ldi	r24, 0x48	; 72
    2316:	93 e4       	ldi	r25, 0x43	; 67
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
				
				if(flag == 0 && (psd_value[1] > 150)) {
    2324:	81 14       	cp	r8, r1
    2326:	91 04       	cpc	r9, r1
    2328:	b9 f4       	brne	.+46     	; 0x2358 <main+0x44e>
    232a:	80 91 ed 02 	lds	r24, 0x02ED
    232e:	87 39       	cpi	r24, 0x97	; 151
    2330:	98 f0       	brcs	.+38     	; 0x2358 <main+0x44e>
					if(Camera_Cmd(1, 103) != 0)
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	67 e6       	ldi	r22, 0x67	; 103
    2336:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    233a:	88 23       	and	r24, r24
    233c:	21 f0       	breq	.+8      	; 0x2346 <main+0x43c>
    233e:	01 e0       	ldi	r16, 0x01	; 1
    2340:	80 2e       	mov	r8, r16
    2342:	91 2c       	mov	r9, r1
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <main+0x44e>
						flag = 1;
					else if(Camera_Cmd(2, 103) != 0)
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	67 e6       	ldi	r22, 0x67	; 103
    234a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    234e:	88 23       	and	r24, r24
    2350:	19 f0       	breq	.+6      	; 0x2358 <main+0x44e>
    2352:	12 e0       	ldi	r17, 0x02	; 2
    2354:	81 2e       	mov	r8, r17
    2356:	91 2c       	mov	r9, r1
						flag = 2;
				}
				display_char(0, 0, flag);
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	48 2d       	mov	r20, r8
    235e:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
    2362:	a5 cf       	rjmp	.-182    	; 0x22ae <main+0x3a4>
			}

			Turn_and_Drive(180, 200, 0, 100, 0, 50, 0);
			while(1) {
				if(Camera_Cmd(0, 1) == 125) break;
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    236c:	8d 37       	cpi	r24, 0x7D	; 125
    236e:	a1 f0       	breq	.+40     	; 0x2398 <main+0x48e>
				else {
					non_Holonomic(0, 0, 10);
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9b 01       	movw	r18, r22
    237a:	ac 01       	movw	r20, r24
    237c:	0f 2e       	mov	r0, r31
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	ef 2e       	mov	r14, r31
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	ff 2e       	mov	r15, r31
    2386:	f0 e2       	ldi	r31, 0x20	; 32
    2388:	0f 2f       	mov	r16, r31
    238a:	f1 e4       	ldi	r31, 0x41	; 65
    238c:	1f 2f       	mov	r17, r31
    238e:	f0 2d       	mov	r31, r0
    2390:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
					cnt++;
    2394:	21 96       	adiw	r28, 0x01	; 1
    2396:	e6 cf       	rjmp	.-52     	; 0x2364 <main+0x45a>
				}
			}
			Turn_and_Drive(0, 200, 0, 100, 0, 50, 0);
    2398:	60 e0       	ldi	r22, 0x00	; 0
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	48 ec       	ldi	r20, 0xC8	; 200
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	04 e6       	ldi	r16, 0x64	; 100
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	ee 24       	eor	r14, r14
    23ae:	ff 24       	eor	r15, r15
    23b0:	b2 e3       	ldi	r27, 0x32	; 50
    23b2:	cb 2e       	mov	r12, r27
    23b4:	d1 2c       	mov	r13, r1
    23b6:	aa 24       	eor	r10, r10
    23b8:	bb 24       	eor	r11, r11
    23ba:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
			while(1) {
				if(cnt == 0) break;
    23be:	20 97       	sbiw	r28, 0x00	; 0
    23c0:	a1 f0       	breq	.+40     	; 0x23ea <main+0x4e0>
				else {
					non_Holonomic(0, 0, -10);
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9b 01       	movw	r18, r22
    23cc:	ac 01       	movw	r20, r24
    23ce:	0f 2e       	mov	r0, r31
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	ef 2e       	mov	r14, r31
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	ff 2e       	mov	r15, r31
    23d8:	f0 e2       	ldi	r31, 0x20	; 32
    23da:	0f 2f       	mov	r16, r31
    23dc:	f1 ec       	ldi	r31, 0xC1	; 193
    23de:	1f 2f       	mov	r17, r31
    23e0:	f0 2d       	mov	r31, r0
    23e2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
					cnt--;
    23e6:	21 97       	sbiw	r28, 0x01	; 1
    23e8:	ea cf       	rjmp	.-44     	; 0x23be <main+0x4b4>
				}
			}

			Turn_and_Drive(180, 200, 0, 400, 0, 450, 0);
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	84 e3       	ldi	r24, 0x34	; 52
    23f0:	93 e4       	ldi	r25, 0x43	; 67
    23f2:	48 ec       	ldi	r20, 0xC8	; 200
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	00 e9       	ldi	r16, 0x90	; 144
    23fc:	11 e0       	ldi	r17, 0x01	; 1
    23fe:	ee 24       	eor	r14, r14
    2400:	ff 24       	eor	r15, r15
    2402:	a2 ec       	ldi	r26, 0xC2	; 194
    2404:	ca 2e       	mov	r12, r26
    2406:	a1 e0       	ldi	r26, 0x01	; 1
    2408:	da 2e       	mov	r13, r26
    240a:	aa 24       	eor	r10, r10
    240c:	bb 24       	eor	r11, r11
    240e:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
			Turn_and_Drive(0, 0, -70, 0, 92, 0, 85);
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	2a eb       	ldi	r18, 0xBA	; 186
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	00 e0       	ldi	r16, 0x00	; 0
    2424:	10 e0       	ldi	r17, 0x00	; 0
    2426:	fc e5       	ldi	r31, 0x5C	; 92
    2428:	ef 2e       	mov	r14, r31
    242a:	f1 2c       	mov	r15, r1
    242c:	cc 24       	eor	r12, r12
    242e:	dd 24       	eor	r13, r13
    2430:	e5 e5       	ldi	r30, 0x55	; 85
    2432:	ae 2e       	mov	r10, r30
    2434:	b1 2c       	mov	r11, r1
    2436:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
			non_Holonomic(0, 0, 0);
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	7b 01       	movw	r14, r22
    2448:	8c 01       	movw	r16, r24
    244a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>

			if(Camera_Cmd(flag, 102) >= 125)
    244e:	d8 2c       	mov	r13, r8
    2450:	88 2d       	mov	r24, r8
    2452:	66 e6       	ldi	r22, 0x66	; 102
    2454:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    2458:	8d 37       	cpi	r24, 0x7D	; 125
    245a:	68 f4       	brcc	.+26     	; 0x2476 <main+0x56c>
    245c:	19 c0       	rjmp	.+50     	; 0x2490 <main+0x586>
				while( !( (Camera_Cmd(flag, 102)>135) && (Camera_Cmd(flag,102)<160) ) ) non_Holonomic(0, 200, 0);
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	48 e4       	ldi	r20, 0x48	; 72
    246c:	53 e4       	ldi	r21, 0x43	; 67
    246e:	7b 01       	movw	r14, r22
    2470:	8c 01       	movw	r16, r24
    2472:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    2476:	8d 2d       	mov	r24, r13
    2478:	66 e6       	ldi	r22, 0x66	; 102
    247a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    247e:	88 38       	cpi	r24, 0x88	; 136
    2480:	70 f3       	brcs	.-36     	; 0x245e <main+0x554>
    2482:	8d 2d       	mov	r24, r13
    2484:	66 e6       	ldi	r22, 0x66	; 102
    2486:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    248a:	80 3a       	cpi	r24, 0xA0	; 160
    248c:	40 f7       	brcc	.-48     	; 0x245e <main+0x554>
    248e:	2c c0       	rjmp	.+88     	; 0x24e8 <main+0x5de>
			else if(Camera_Cmd(flag, 102) < 125)
    2490:	88 2d       	mov	r24, r8
    2492:	66 e6       	ldi	r22, 0x66	; 102
    2494:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    2498:	8d 37       	cpi	r24, 0x7D	; 125
    249a:	68 f0       	brcs	.+26     	; 0x24b6 <main+0x5ac>
    249c:	25 c0       	rjmp	.+74     	; 0x24e8 <main+0x5de>
				while( !( (Camera_Cmd(flag, 102)>135) && (Camera_Cmd(flag,102)<160) ) ) non_Holonomic(0, -200, 0);
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	48 e4       	ldi	r20, 0x48	; 72
    24ac:	53 ec       	ldi	r21, 0xC3	; 195
    24ae:	7b 01       	movw	r14, r22
    24b0:	8c 01       	movw	r16, r24
    24b2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    24b6:	8d 2d       	mov	r24, r13
    24b8:	66 e6       	ldi	r22, 0x66	; 102
    24ba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    24be:	88 38       	cpi	r24, 0x88	; 136
    24c0:	70 f3       	brcs	.-36     	; 0x249e <main+0x594>
    24c2:	8d 2d       	mov	r24, r13
    24c4:	66 e6       	ldi	r22, 0x66	; 102
    24c6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    24ca:	80 3a       	cpi	r24, 0xA0	; 160
    24cc:	40 f7       	brcc	.-48     	; 0x249e <main+0x594>
    24ce:	0c c0       	rjmp	.+24     	; 0x24e8 <main+0x5de>
			
			while(!(READ_SENSOR()&&0x01)) non_Holonomic(200, 0, 0);
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	88 e4       	ldi	r24, 0x48	; 72
    24d6:	93 e4       	ldi	r25, 0x43	; 67
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	79 01       	movw	r14, r18
    24e2:	8a 01       	movw	r16, r20
    24e4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    24e8:	80 91 63 00 	lds	r24, 0x0063
    24ec:	21 b1       	in	r18, 0x01	; 1
    24ee:	86 95       	lsr	r24
    24f0:	86 95       	lsr	r24
    24f2:	86 95       	lsr	r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	80 95       	com	r24
    24f8:	90 95       	com	r25
    24fa:	83 70       	andi	r24, 0x03	; 3
    24fc:	90 70       	andi	r25, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	20 95       	com	r18
    2502:	30 95       	com	r19
    2504:	2c 71       	andi	r18, 0x1C	; 28
    2506:	30 70       	andi	r19, 0x00	; 0
    2508:	82 2b       	or	r24, r18
    250a:	93 2b       	or	r25, r19
    250c:	89 2b       	or	r24, r25
    250e:	01 f3       	breq	.-64     	; 0x24d0 <main+0x5c6>
			
			sec=0;
    2510:	10 92 5e 02 	sts	0x025E, r1
    2514:	10 92 5d 02 	sts	0x025D, r1
    2518:	0c c0       	rjmp	.+24     	; 0x2532 <main+0x628>
			while(sec < 100) non_Holonomic(150, 0, 0);
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	86 e1       	ldi	r24, 0x16	; 22
    2520:	93 e4       	ldi	r25, 0x43	; 67
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	79 01       	movw	r14, r18
    252c:	8a 01       	movw	r16, r20
    252e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
    2532:	80 91 5d 02 	lds	r24, 0x025D
    2536:	90 91 5e 02 	lds	r25, 0x025E
    253a:	84 36       	cpi	r24, 0x64	; 100
    253c:	91 05       	cpc	r25, r1
    253e:	68 f3       	brcs	.-38     	; 0x251a <main+0x610>
			non_Holonomic(0, 0, 0);
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9b 01       	movw	r18, r22
    254a:	ac 01       	movw	r20, r24
    254c:	7b 01       	movw	r14, r22
    254e:	8c 01       	movw	r16, r24
    2550:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>

			//- 사다리 타기
			int mode=0;
			while(1) {
				mode = LineW(20, 200, 100);
    2554:	84 e1       	ldi	r24, 0x14	; 20
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	68 ec       	ldi	r22, 0xC8	; 200
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	44 e6       	ldi	r20, 0x64	; 100
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LineW>
    2564:	6c 01       	movw	r12, r24
				
				if((mode == 0) || (mode == 4)) {
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	21 f0       	breq	.+8      	; 0x2572 <main+0x668>
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	c8 16       	cp	r12, r24
    256e:	d1 04       	cpc	r13, r1
    2570:	91 f4       	brne	.+36     	; 0x2596 <main+0x68c>
					non_Holonomic(0, 0, 0);
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9b 01       	movw	r18, r22
    257c:	ac 01       	movw	r20, r24
    257e:	7b 01       	movw	r14, r22
    2580:	8c 01       	movw	r16, r24
    2582:	0e 94 d5 06 	call	0xdaa	; 0xdaa <non_Holonomic>
					LineW(20, 200, 200);
					Turn_and_Drive(0, 300, 50, 300, 90, 250, 85);
				}
			}
			
			if((Camera_Cmd(1, 103) != 0) && mode == 4)
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	67 e6       	ldi	r22, 0x67	; 103
    258a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    258e:	88 23       	and	r24, r24
    2590:	09 f0       	breq	.+2      	; 0x2594 <main+0x68a>
    2592:	62 c0       	rjmp	.+196    	; 0x2658 <main+0x74e>
    2594:	69 c0       	rjmp	.+210    	; 0x2668 <main+0x75e>
				
				if((mode == 0) || (mode == 4)) {
					non_Holonomic(0, 0, 0);
					break;
				}
				else if(mode == 2) {
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	c8 16       	cp	r12, r24
    259a:	d1 04       	cpc	r13, r1
    259c:	59 f5       	brne	.+86     	; 0x25f4 <main+0x6ea>
					Turn_and_Drive(0, 300, 50, 300, 90, 250, 85);
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	4c e2       	ldi	r20, 0x2C	; 44
    25a8:	51 e0       	ldi	r21, 0x01	; 1
    25aa:	22 e3       	ldi	r18, 0x32	; 50
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	0c e2       	ldi	r16, 0x2C	; 44
    25b0:	11 e0       	ldi	r17, 0x01	; 1
    25b2:	ba e5       	ldi	r27, 0x5A	; 90
    25b4:	eb 2e       	mov	r14, r27
    25b6:	f1 2c       	mov	r15, r1
    25b8:	aa ef       	ldi	r26, 0xFA	; 250
    25ba:	ca 2e       	mov	r12, r26
    25bc:	d1 2c       	mov	r13, r1
    25be:	f5 e5       	ldi	r31, 0x55	; 85
    25c0:	af 2e       	mov	r10, r31
    25c2:	b1 2c       	mov	r11, r1
    25c4:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
					LineW(20, 200, 200);
    25c8:	84 e1       	ldi	r24, 0x14	; 20
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	68 ec       	ldi	r22, 0xC8	; 200
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	48 ec       	ldi	r20, 0xC8	; 200
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LineW>
					Turn_and_Drive(0, 300, -50, 100, 90, 100, 85);
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	4c e2       	ldi	r20, 0x2C	; 44
    25e2:	51 e0       	ldi	r21, 0x01	; 1
    25e4:	2e ec       	ldi	r18, 0xCE	; 206
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	04 e6       	ldi	r16, 0x64	; 100
    25ea:	10 e0       	ldi	r17, 0x00	; 0
    25ec:	e4 e6       	ldi	r30, 0x64	; 100
    25ee:	ce 2e       	mov	r12, r30
    25f0:	d1 2c       	mov	r13, r1
    25f2:	2f c0       	rjmp	.+94     	; 0x2652 <main+0x748>
				}
				else if(mode == 3) {
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	c8 16       	cp	r12, r24
    25f8:	d1 04       	cpc	r13, r1
    25fa:	09 f0       	breq	.+2      	; 0x25fe <main+0x6f4>
    25fc:	ab cf       	rjmp	.-170    	; 0x2554 <main+0x64a>
					Turn_and_Drive(0, 300, -50, 100, 90, 100, 85);
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	4c e2       	ldi	r20, 0x2C	; 44
    2608:	51 e0       	ldi	r21, 0x01	; 1
    260a:	2e ec       	ldi	r18, 0xCE	; 206
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	04 e6       	ldi	r16, 0x64	; 100
    2610:	10 e0       	ldi	r17, 0x00	; 0
    2612:	ba e5       	ldi	r27, 0x5A	; 90
    2614:	eb 2e       	mov	r14, r27
    2616:	f1 2c       	mov	r15, r1
    2618:	a4 e6       	ldi	r26, 0x64	; 100
    261a:	ca 2e       	mov	r12, r26
    261c:	d1 2c       	mov	r13, r1
    261e:	f5 e5       	ldi	r31, 0x55	; 85
    2620:	af 2e       	mov	r10, r31
    2622:	b1 2c       	mov	r11, r1
    2624:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
					LineW(20, 200, 200);
    2628:	84 e1       	ldi	r24, 0x14	; 20
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	68 ec       	ldi	r22, 0xC8	; 200
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	48 ec       	ldi	r20, 0xC8	; 200
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LineW>
					Turn_and_Drive(0, 300, 50, 300, 90, 250, 85);
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	4c e2       	ldi	r20, 0x2C	; 44
    2642:	51 e0       	ldi	r21, 0x01	; 1
    2644:	22 e3       	ldi	r18, 0x32	; 50
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	0c e2       	ldi	r16, 0x2C	; 44
    264a:	11 e0       	ldi	r17, 0x01	; 1
    264c:	ea ef       	ldi	r30, 0xFA	; 250
    264e:	ce 2e       	mov	r12, r30
    2650:	d1 2c       	mov	r13, r1
    2652:	0e 94 80 09 	call	0x1300	; 0x1300 <Turn_and_Drive>
    2656:	7e cf       	rjmp	.-260    	; 0x2554 <main+0x64a>
				}
			}
			
			if((Camera_Cmd(1, 103) != 0) && mode == 4)
    2658:	84 e0       	ldi	r24, 0x04	; 4
    265a:	c8 16       	cp	r12, r24
    265c:	d1 04       	cpc	r13, r1
    265e:	21 f4       	brne	.+8      	; 0x2668 <main+0x75e>
    2660:	51 e0       	ldi	r21, 0x01	; 1
    2662:	85 2e       	mov	r8, r21
    2664:	91 2c       	mov	r9, r1
    2666:	11 c0       	rjmp	.+34     	; 0x268a <main+0x780>
				flag = 1;
			else if((Camera_Cmd(2, 103) != 0) && mode == 4)
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	67 e6       	ldi	r22, 0x67	; 103
    266c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Camera_Cmd>
    2670:	88 23       	and	r24, r24
    2672:	41 f0       	breq	.+16     	; 0x2684 <main+0x77a>
    2674:	84 e0       	ldi	r24, 0x04	; 4
    2676:	c8 16       	cp	r12, r24
    2678:	d1 04       	cpc	r13, r1
    267a:	21 f4       	brne	.+8      	; 0x2684 <main+0x77a>
    267c:	42 e0       	ldi	r20, 0x02	; 2
    267e:	84 2e       	mov	r8, r20
    2680:	91 2c       	mov	r9, r1
    2682:	03 c0       	rjmp	.+6      	; 0x268a <main+0x780>
    2684:	33 e0       	ldi	r19, 0x03	; 3
    2686:	83 2e       	mov	r8, r19
    2688:	91 2c       	mov	r9, r1
				flag = 2;
			else
				flag = 3;
			
			display_char(0, 0, flag);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	48 2d       	mov	r20, r8
    2690:	0e 94 67 01 	call	0x2ce	; 0x2ce <display_char>
    2694:	62 cc       	rjmp	.-1852   	; 0x1f5a <main+0x50>

00002696 <_fpadd_parts>:
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e1 e5       	ldi	r30, 0x51	; 81
    269c:	f3 e1       	ldi	r31, 0x13	; 19
    269e:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__>
    26a2:	dc 01       	movw	r26, r24
    26a4:	2b 01       	movw	r4, r22
    26a6:	fa 01       	movw	r30, r20
    26a8:	9c 91       	ld	r25, X
    26aa:	92 30       	cpi	r25, 0x02	; 2
    26ac:	08 f4       	brcc	.+2      	; 0x26b0 <_fpadd_parts+0x1a>
    26ae:	39 c1       	rjmp	.+626    	; 0x2922 <_fpadd_parts+0x28c>
    26b0:	eb 01       	movw	r28, r22
    26b2:	88 81       	ld	r24, Y
    26b4:	82 30       	cpi	r24, 0x02	; 2
    26b6:	08 f4       	brcc	.+2      	; 0x26ba <_fpadd_parts+0x24>
    26b8:	33 c1       	rjmp	.+614    	; 0x2920 <_fpadd_parts+0x28a>
    26ba:	94 30       	cpi	r25, 0x04	; 4
    26bc:	69 f4       	brne	.+26     	; 0x26d8 <_fpadd_parts+0x42>
    26be:	84 30       	cpi	r24, 0x04	; 4
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <_fpadd_parts+0x2e>
    26c2:	2f c1       	rjmp	.+606    	; 0x2922 <_fpadd_parts+0x28c>
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	9c 91       	ld	r25, X
    26c8:	11 97       	sbiw	r26, 0x01	; 1
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	98 17       	cp	r25, r24
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <_fpadd_parts+0x3c>
    26d0:	28 c1       	rjmp	.+592    	; 0x2922 <_fpadd_parts+0x28c>
    26d2:	a1 e3       	ldi	r26, 0x31	; 49
    26d4:	b1 e0       	ldi	r27, 0x01	; 1
    26d6:	25 c1       	rjmp	.+586    	; 0x2922 <_fpadd_parts+0x28c>
    26d8:	84 30       	cpi	r24, 0x04	; 4
    26da:	09 f4       	brne	.+2      	; 0x26de <_fpadd_parts+0x48>
    26dc:	21 c1       	rjmp	.+578    	; 0x2920 <_fpadd_parts+0x28a>
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	a9 f4       	brne	.+42     	; 0x270c <_fpadd_parts+0x76>
    26e2:	92 30       	cpi	r25, 0x02	; 2
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <_fpadd_parts+0x52>
    26e6:	1d c1       	rjmp	.+570    	; 0x2922 <_fpadd_parts+0x28c>
    26e8:	9a 01       	movw	r18, r20
    26ea:	ad 01       	movw	r20, r26
    26ec:	88 e0       	ldi	r24, 0x08	; 8
    26ee:	ea 01       	movw	r28, r20
    26f0:	09 90       	ld	r0, Y+
    26f2:	ae 01       	movw	r20, r28
    26f4:	e9 01       	movw	r28, r18
    26f6:	09 92       	st	Y+, r0
    26f8:	9e 01       	movw	r18, r28
    26fa:	81 50       	subi	r24, 0x01	; 1
    26fc:	c1 f7       	brne	.-16     	; 0x26ee <_fpadd_parts+0x58>
    26fe:	e2 01       	movw	r28, r4
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	11 96       	adiw	r26, 0x01	; 1
    2704:	9c 91       	ld	r25, X
    2706:	89 23       	and	r24, r25
    2708:	81 83       	std	Z+1, r24	; 0x01
    270a:	08 c1       	rjmp	.+528    	; 0x291c <_fpadd_parts+0x286>
    270c:	92 30       	cpi	r25, 0x02	; 2
    270e:	09 f4       	brne	.+2      	; 0x2712 <_fpadd_parts+0x7c>
    2710:	07 c1       	rjmp	.+526    	; 0x2920 <_fpadd_parts+0x28a>
    2712:	12 96       	adiw	r26, 0x02	; 2
    2714:	2d 90       	ld	r2, X+
    2716:	3c 90       	ld	r3, X
    2718:	13 97       	sbiw	r26, 0x03	; 3
    271a:	eb 01       	movw	r28, r22
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	14 96       	adiw	r26, 0x04	; 4
    2722:	ad 90       	ld	r10, X+
    2724:	bd 90       	ld	r11, X+
    2726:	cd 90       	ld	r12, X+
    2728:	dc 90       	ld	r13, X
    272a:	17 97       	sbiw	r26, 0x07	; 7
    272c:	ec 80       	ldd	r14, Y+4	; 0x04
    272e:	fd 80       	ldd	r15, Y+5	; 0x05
    2730:	0e 81       	ldd	r16, Y+6	; 0x06
    2732:	1f 81       	ldd	r17, Y+7	; 0x07
    2734:	91 01       	movw	r18, r2
    2736:	28 1b       	sub	r18, r24
    2738:	39 0b       	sbc	r19, r25
    273a:	b9 01       	movw	r22, r18
    273c:	37 ff       	sbrs	r19, 7
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <_fpadd_parts+0xb2>
    2740:	66 27       	eor	r22, r22
    2742:	77 27       	eor	r23, r23
    2744:	62 1b       	sub	r22, r18
    2746:	73 0b       	sbc	r23, r19
    2748:	60 32       	cpi	r22, 0x20	; 32
    274a:	71 05       	cpc	r23, r1
    274c:	0c f0       	brlt	.+2      	; 0x2750 <_fpadd_parts+0xba>
    274e:	61 c0       	rjmp	.+194    	; 0x2812 <_fpadd_parts+0x17c>
    2750:	12 16       	cp	r1, r18
    2752:	13 06       	cpc	r1, r19
    2754:	6c f5       	brge	.+90     	; 0x27b0 <_fpadd_parts+0x11a>
    2756:	37 01       	movw	r6, r14
    2758:	48 01       	movw	r8, r16
    275a:	06 2e       	mov	r0, r22
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <_fpadd_parts+0xd0>
    275e:	96 94       	lsr	r9
    2760:	87 94       	ror	r8
    2762:	77 94       	ror	r7
    2764:	67 94       	ror	r6
    2766:	0a 94       	dec	r0
    2768:	d2 f7       	brpl	.-12     	; 0x275e <_fpadd_parts+0xc8>
    276a:	21 e0       	ldi	r18, 0x01	; 1
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	04 c0       	rjmp	.+8      	; 0x277c <_fpadd_parts+0xe6>
    2774:	22 0f       	add	r18, r18
    2776:	33 1f       	adc	r19, r19
    2778:	44 1f       	adc	r20, r20
    277a:	55 1f       	adc	r21, r21
    277c:	6a 95       	dec	r22
    277e:	d2 f7       	brpl	.-12     	; 0x2774 <_fpadd_parts+0xde>
    2780:	21 50       	subi	r18, 0x01	; 1
    2782:	30 40       	sbci	r19, 0x00	; 0
    2784:	40 40       	sbci	r20, 0x00	; 0
    2786:	50 40       	sbci	r21, 0x00	; 0
    2788:	2e 21       	and	r18, r14
    278a:	3f 21       	and	r19, r15
    278c:	40 23       	and	r20, r16
    278e:	51 23       	and	r21, r17
    2790:	21 15       	cp	r18, r1
    2792:	31 05       	cpc	r19, r1
    2794:	41 05       	cpc	r20, r1
    2796:	51 05       	cpc	r21, r1
    2798:	21 f0       	breq	.+8      	; 0x27a2 <_fpadd_parts+0x10c>
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	79 01       	movw	r14, r18
    27a4:	8a 01       	movw	r16, r20
    27a6:	e6 28       	or	r14, r6
    27a8:	f7 28       	or	r15, r7
    27aa:	08 29       	or	r16, r8
    27ac:	19 29       	or	r17, r9
    27ae:	3c c0       	rjmp	.+120    	; 0x2828 <_fpadd_parts+0x192>
    27b0:	23 2b       	or	r18, r19
    27b2:	d1 f1       	breq	.+116    	; 0x2828 <_fpadd_parts+0x192>
    27b4:	26 0e       	add	r2, r22
    27b6:	37 1e       	adc	r3, r23
    27b8:	35 01       	movw	r6, r10
    27ba:	46 01       	movw	r8, r12
    27bc:	06 2e       	mov	r0, r22
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <_fpadd_parts+0x132>
    27c0:	96 94       	lsr	r9
    27c2:	87 94       	ror	r8
    27c4:	77 94       	ror	r7
    27c6:	67 94       	ror	r6
    27c8:	0a 94       	dec	r0
    27ca:	d2 f7       	brpl	.-12     	; 0x27c0 <_fpadd_parts+0x12a>
    27cc:	21 e0       	ldi	r18, 0x01	; 1
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <_fpadd_parts+0x148>
    27d6:	22 0f       	add	r18, r18
    27d8:	33 1f       	adc	r19, r19
    27da:	44 1f       	adc	r20, r20
    27dc:	55 1f       	adc	r21, r21
    27de:	6a 95       	dec	r22
    27e0:	d2 f7       	brpl	.-12     	; 0x27d6 <_fpadd_parts+0x140>
    27e2:	21 50       	subi	r18, 0x01	; 1
    27e4:	30 40       	sbci	r19, 0x00	; 0
    27e6:	40 40       	sbci	r20, 0x00	; 0
    27e8:	50 40       	sbci	r21, 0x00	; 0
    27ea:	2a 21       	and	r18, r10
    27ec:	3b 21       	and	r19, r11
    27ee:	4c 21       	and	r20, r12
    27f0:	5d 21       	and	r21, r13
    27f2:	21 15       	cp	r18, r1
    27f4:	31 05       	cpc	r19, r1
    27f6:	41 05       	cpc	r20, r1
    27f8:	51 05       	cpc	r21, r1
    27fa:	21 f0       	breq	.+8      	; 0x2804 <_fpadd_parts+0x16e>
    27fc:	21 e0       	ldi	r18, 0x01	; 1
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	59 01       	movw	r10, r18
    2806:	6a 01       	movw	r12, r20
    2808:	a6 28       	or	r10, r6
    280a:	b7 28       	or	r11, r7
    280c:	c8 28       	or	r12, r8
    280e:	d9 28       	or	r13, r9
    2810:	0b c0       	rjmp	.+22     	; 0x2828 <_fpadd_parts+0x192>
    2812:	82 15       	cp	r24, r2
    2814:	93 05       	cpc	r25, r3
    2816:	2c f0       	brlt	.+10     	; 0x2822 <_fpadd_parts+0x18c>
    2818:	1c 01       	movw	r2, r24
    281a:	aa 24       	eor	r10, r10
    281c:	bb 24       	eor	r11, r11
    281e:	65 01       	movw	r12, r10
    2820:	03 c0       	rjmp	.+6      	; 0x2828 <_fpadd_parts+0x192>
    2822:	ee 24       	eor	r14, r14
    2824:	ff 24       	eor	r15, r15
    2826:	87 01       	movw	r16, r14
    2828:	11 96       	adiw	r26, 0x01	; 1
    282a:	9c 91       	ld	r25, X
    282c:	d2 01       	movw	r26, r4
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	8c 91       	ld	r24, X
    2832:	98 17       	cp	r25, r24
    2834:	09 f4       	brne	.+2      	; 0x2838 <_fpadd_parts+0x1a2>
    2836:	45 c0       	rjmp	.+138    	; 0x28c2 <_fpadd_parts+0x22c>
    2838:	99 23       	and	r25, r25
    283a:	39 f0       	breq	.+14     	; 0x284a <_fpadd_parts+0x1b4>
    283c:	a8 01       	movw	r20, r16
    283e:	97 01       	movw	r18, r14
    2840:	2a 19       	sub	r18, r10
    2842:	3b 09       	sbc	r19, r11
    2844:	4c 09       	sbc	r20, r12
    2846:	5d 09       	sbc	r21, r13
    2848:	06 c0       	rjmp	.+12     	; 0x2856 <_fpadd_parts+0x1c0>
    284a:	a6 01       	movw	r20, r12
    284c:	95 01       	movw	r18, r10
    284e:	2e 19       	sub	r18, r14
    2850:	3f 09       	sbc	r19, r15
    2852:	40 0b       	sbc	r20, r16
    2854:	51 0b       	sbc	r21, r17
    2856:	57 fd       	sbrc	r21, 7
    2858:	08 c0       	rjmp	.+16     	; 0x286a <_fpadd_parts+0x1d4>
    285a:	11 82       	std	Z+1, r1	; 0x01
    285c:	33 82       	std	Z+3, r3	; 0x03
    285e:	22 82       	std	Z+2, r2	; 0x02
    2860:	24 83       	std	Z+4, r18	; 0x04
    2862:	35 83       	std	Z+5, r19	; 0x05
    2864:	46 83       	std	Z+6, r20	; 0x06
    2866:	57 83       	std	Z+7, r21	; 0x07
    2868:	1d c0       	rjmp	.+58     	; 0x28a4 <_fpadd_parts+0x20e>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	81 83       	std	Z+1, r24	; 0x01
    286e:	33 82       	std	Z+3, r3	; 0x03
    2870:	22 82       	std	Z+2, r2	; 0x02
    2872:	88 27       	eor	r24, r24
    2874:	99 27       	eor	r25, r25
    2876:	dc 01       	movw	r26, r24
    2878:	82 1b       	sub	r24, r18
    287a:	93 0b       	sbc	r25, r19
    287c:	a4 0b       	sbc	r26, r20
    287e:	b5 0b       	sbc	r27, r21
    2880:	84 83       	std	Z+4, r24	; 0x04
    2882:	95 83       	std	Z+5, r25	; 0x05
    2884:	a6 83       	std	Z+6, r26	; 0x06
    2886:	b7 83       	std	Z+7, r27	; 0x07
    2888:	0d c0       	rjmp	.+26     	; 0x28a4 <_fpadd_parts+0x20e>
    288a:	22 0f       	add	r18, r18
    288c:	33 1f       	adc	r19, r19
    288e:	44 1f       	adc	r20, r20
    2890:	55 1f       	adc	r21, r21
    2892:	24 83       	std	Z+4, r18	; 0x04
    2894:	35 83       	std	Z+5, r19	; 0x05
    2896:	46 83       	std	Z+6, r20	; 0x06
    2898:	57 83       	std	Z+7, r21	; 0x07
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	93 83       	std	Z+3, r25	; 0x03
    28a2:	82 83       	std	Z+2, r24	; 0x02
    28a4:	24 81       	ldd	r18, Z+4	; 0x04
    28a6:	35 81       	ldd	r19, Z+5	; 0x05
    28a8:	46 81       	ldd	r20, Z+6	; 0x06
    28aa:	57 81       	ldd	r21, Z+7	; 0x07
    28ac:	da 01       	movw	r26, r20
    28ae:	c9 01       	movw	r24, r18
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	a1 09       	sbc	r26, r1
    28b4:	b1 09       	sbc	r27, r1
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	af 4f       	sbci	r26, 0xFF	; 255
    28bc:	bf 43       	sbci	r27, 0x3F	; 63
    28be:	28 f3       	brcs	.-54     	; 0x288a <_fpadd_parts+0x1f4>
    28c0:	0b c0       	rjmp	.+22     	; 0x28d8 <_fpadd_parts+0x242>
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	33 82       	std	Z+3, r3	; 0x03
    28c6:	22 82       	std	Z+2, r2	; 0x02
    28c8:	ea 0c       	add	r14, r10
    28ca:	fb 1c       	adc	r15, r11
    28cc:	0c 1d       	adc	r16, r12
    28ce:	1d 1d       	adc	r17, r13
    28d0:	e4 82       	std	Z+4, r14	; 0x04
    28d2:	f5 82       	std	Z+5, r15	; 0x05
    28d4:	06 83       	std	Z+6, r16	; 0x06
    28d6:	17 83       	std	Z+7, r17	; 0x07
    28d8:	83 e0       	ldi	r24, 0x03	; 3
    28da:	80 83       	st	Z, r24
    28dc:	24 81       	ldd	r18, Z+4	; 0x04
    28de:	35 81       	ldd	r19, Z+5	; 0x05
    28e0:	46 81       	ldd	r20, Z+6	; 0x06
    28e2:	57 81       	ldd	r21, Z+7	; 0x07
    28e4:	57 ff       	sbrs	r21, 7
    28e6:	1a c0       	rjmp	.+52     	; 0x291c <_fpadd_parts+0x286>
    28e8:	c9 01       	movw	r24, r18
    28ea:	aa 27       	eor	r26, r26
    28ec:	97 fd       	sbrc	r25, 7
    28ee:	a0 95       	com	r26
    28f0:	ba 2f       	mov	r27, r26
    28f2:	81 70       	andi	r24, 0x01	; 1
    28f4:	90 70       	andi	r25, 0x00	; 0
    28f6:	a0 70       	andi	r26, 0x00	; 0
    28f8:	b0 70       	andi	r27, 0x00	; 0
    28fa:	56 95       	lsr	r21
    28fc:	47 95       	ror	r20
    28fe:	37 95       	ror	r19
    2900:	27 95       	ror	r18
    2902:	82 2b       	or	r24, r18
    2904:	93 2b       	or	r25, r19
    2906:	a4 2b       	or	r26, r20
    2908:	b5 2b       	or	r27, r21
    290a:	84 83       	std	Z+4, r24	; 0x04
    290c:	95 83       	std	Z+5, r25	; 0x05
    290e:	a6 83       	std	Z+6, r26	; 0x06
    2910:	b7 83       	std	Z+7, r27	; 0x07
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	01 96       	adiw	r24, 0x01	; 1
    2918:	93 83       	std	Z+3, r25	; 0x03
    291a:	82 83       	std	Z+2, r24	; 0x02
    291c:	df 01       	movw	r26, r30
    291e:	01 c0       	rjmp	.+2      	; 0x2922 <_fpadd_parts+0x28c>
    2920:	d2 01       	movw	r26, r4
    2922:	cd 01       	movw	r24, r26
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	e2 e1       	ldi	r30, 0x12	; 18
    292a:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__>

0000292e <__subsf3>:
    292e:	a0 e2       	ldi	r26, 0x20	; 32
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ed e9       	ldi	r30, 0x9D	; 157
    2934:	f4 e1       	ldi	r31, 0x14	; 20
    2936:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
    293a:	69 83       	std	Y+1, r22	; 0x01
    293c:	7a 83       	std	Y+2, r23	; 0x02
    293e:	8b 83       	std	Y+3, r24	; 0x03
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	2d 83       	std	Y+5, r18	; 0x05
    2944:	3e 83       	std	Y+6, r19	; 0x06
    2946:	4f 83       	std	Y+7, r20	; 0x07
    2948:	58 87       	std	Y+8, r21	; 0x08
    294a:	e9 e0       	ldi	r30, 0x09	; 9
    294c:	ee 2e       	mov	r14, r30
    294e:	f1 2c       	mov	r15, r1
    2950:	ec 0e       	add	r14, r28
    2952:	fd 1e       	adc	r15, r29
    2954:	ce 01       	movw	r24, r28
    2956:	01 96       	adiw	r24, 0x01	; 1
    2958:	b7 01       	movw	r22, r14
    295a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    295e:	8e 01       	movw	r16, r28
    2960:	0f 5e       	subi	r16, 0xEF	; 239
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	ce 01       	movw	r24, r28
    2966:	05 96       	adiw	r24, 0x05	; 5
    2968:	b8 01       	movw	r22, r16
    296a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    296e:	8a 89       	ldd	r24, Y+18	; 0x12
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	89 27       	eor	r24, r25
    2974:	8a 8b       	std	Y+18, r24	; 0x12
    2976:	c7 01       	movw	r24, r14
    2978:	b8 01       	movw	r22, r16
    297a:	ae 01       	movw	r20, r28
    297c:	47 5e       	subi	r20, 0xE7	; 231
    297e:	5f 4f       	sbci	r21, 0xFF	; 255
    2980:	0e 94 4b 13 	call	0x2696	; 0x2696 <_fpadd_parts>
    2984:	0e 94 29 18 	call	0x3052	; 0x3052 <__pack_f>
    2988:	a0 96       	adiw	r28, 0x20	; 32
    298a:	e6 e0       	ldi	r30, 0x06	; 6
    298c:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00002990 <__addsf3>:
    2990:	a0 e2       	ldi	r26, 0x20	; 32
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ee ec       	ldi	r30, 0xCE	; 206
    2996:	f4 e1       	ldi	r31, 0x14	; 20
    2998:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
    299c:	69 83       	std	Y+1, r22	; 0x01
    299e:	7a 83       	std	Y+2, r23	; 0x02
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	2d 83       	std	Y+5, r18	; 0x05
    29a6:	3e 83       	std	Y+6, r19	; 0x06
    29a8:	4f 83       	std	Y+7, r20	; 0x07
    29aa:	58 87       	std	Y+8, r21	; 0x08
    29ac:	f9 e0       	ldi	r31, 0x09	; 9
    29ae:	ef 2e       	mov	r14, r31
    29b0:	f1 2c       	mov	r15, r1
    29b2:	ec 0e       	add	r14, r28
    29b4:	fd 1e       	adc	r15, r29
    29b6:	ce 01       	movw	r24, r28
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	b7 01       	movw	r22, r14
    29bc:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    29c0:	8e 01       	movw	r16, r28
    29c2:	0f 5e       	subi	r16, 0xEF	; 239
    29c4:	1f 4f       	sbci	r17, 0xFF	; 255
    29c6:	ce 01       	movw	r24, r28
    29c8:	05 96       	adiw	r24, 0x05	; 5
    29ca:	b8 01       	movw	r22, r16
    29cc:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    29d0:	c7 01       	movw	r24, r14
    29d2:	b8 01       	movw	r22, r16
    29d4:	ae 01       	movw	r20, r28
    29d6:	47 5e       	subi	r20, 0xE7	; 231
    29d8:	5f 4f       	sbci	r21, 0xFF	; 255
    29da:	0e 94 4b 13 	call	0x2696	; 0x2696 <_fpadd_parts>
    29de:	0e 94 29 18 	call	0x3052	; 0x3052 <__pack_f>
    29e2:	a0 96       	adiw	r28, 0x20	; 32
    29e4:	e6 e0       	ldi	r30, 0x06	; 6
    29e6:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

000029ea <__mulsf3>:
    29ea:	a0 e2       	ldi	r26, 0x20	; 32
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	eb ef       	ldi	r30, 0xFB	; 251
    29f0:	f4 e1       	ldi	r31, 0x14	; 20
    29f2:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__>
    29f6:	69 83       	std	Y+1, r22	; 0x01
    29f8:	7a 83       	std	Y+2, r23	; 0x02
    29fa:	8b 83       	std	Y+3, r24	; 0x03
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	2d 83       	std	Y+5, r18	; 0x05
    2a00:	3e 83       	std	Y+6, r19	; 0x06
    2a02:	4f 83       	std	Y+7, r20	; 0x07
    2a04:	58 87       	std	Y+8, r21	; 0x08
    2a06:	ce 01       	movw	r24, r28
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	be 01       	movw	r22, r28
    2a0c:	67 5f       	subi	r22, 0xF7	; 247
    2a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a10:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2a14:	ce 01       	movw	r24, r28
    2a16:	05 96       	adiw	r24, 0x05	; 5
    2a18:	be 01       	movw	r22, r28
    2a1a:	6f 5e       	subi	r22, 0xEF	; 239
    2a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2a22:	99 85       	ldd	r25, Y+9	; 0x09
    2a24:	92 30       	cpi	r25, 0x02	; 2
    2a26:	88 f0       	brcs	.+34     	; 0x2a4a <__mulsf3+0x60>
    2a28:	89 89       	ldd	r24, Y+17	; 0x11
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	c8 f0       	brcs	.+50     	; 0x2a60 <__mulsf3+0x76>
    2a2e:	94 30       	cpi	r25, 0x04	; 4
    2a30:	19 f4       	brne	.+6      	; 0x2a38 <__mulsf3+0x4e>
    2a32:	82 30       	cpi	r24, 0x02	; 2
    2a34:	51 f4       	brne	.+20     	; 0x2a4a <__mulsf3+0x60>
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <__mulsf3+0x56>
    2a38:	84 30       	cpi	r24, 0x04	; 4
    2a3a:	29 f4       	brne	.+10     	; 0x2a46 <__mulsf3+0x5c>
    2a3c:	92 30       	cpi	r25, 0x02	; 2
    2a3e:	81 f4       	brne	.+32     	; 0x2a60 <__mulsf3+0x76>
    2a40:	81 e3       	ldi	r24, 0x31	; 49
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	c6 c0       	rjmp	.+396    	; 0x2bd2 <__mulsf3+0x1e8>
    2a46:	92 30       	cpi	r25, 0x02	; 2
    2a48:	49 f4       	brne	.+18     	; 0x2a5c <__mulsf3+0x72>
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a50:	98 13       	cpse	r25, r24
    2a52:	21 e0       	ldi	r18, 0x01	; 1
    2a54:	2a 87       	std	Y+10, r18	; 0x0a
    2a56:	ce 01       	movw	r24, r28
    2a58:	09 96       	adiw	r24, 0x09	; 9
    2a5a:	bb c0       	rjmp	.+374    	; 0x2bd2 <__mulsf3+0x1e8>
    2a5c:	82 30       	cpi	r24, 0x02	; 2
    2a5e:	49 f4       	brne	.+18     	; 0x2a72 <__mulsf3+0x88>
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	8a 89       	ldd	r24, Y+18	; 0x12
    2a66:	98 13       	cpse	r25, r24
    2a68:	21 e0       	ldi	r18, 0x01	; 1
    2a6a:	2a 8b       	std	Y+18, r18	; 0x12
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	41 96       	adiw	r24, 0x11	; 17
    2a70:	b0 c0       	rjmp	.+352    	; 0x2bd2 <__mulsf3+0x1e8>
    2a72:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a74:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a76:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a78:	58 88       	ldd	r5, Y+16	; 0x10
    2a7a:	6d 88       	ldd	r6, Y+21	; 0x15
    2a7c:	7e 88       	ldd	r7, Y+22	; 0x16
    2a7e:	8f 88       	ldd	r8, Y+23	; 0x17
    2a80:	98 8c       	ldd	r9, Y+24	; 0x18
    2a82:	ee 24       	eor	r14, r14
    2a84:	ff 24       	eor	r15, r15
    2a86:	87 01       	movw	r16, r14
    2a88:	aa 24       	eor	r10, r10
    2a8a:	bb 24       	eor	r11, r11
    2a8c:	65 01       	movw	r12, r10
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	e0 e0       	ldi	r30, 0x00	; 0
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	c1 01       	movw	r24, r2
    2a9c:	81 70       	andi	r24, 0x01	; 1
    2a9e:	90 70       	andi	r25, 0x00	; 0
    2aa0:	89 2b       	or	r24, r25
    2aa2:	e9 f0       	breq	.+58     	; 0x2ade <__mulsf3+0xf4>
    2aa4:	e6 0c       	add	r14, r6
    2aa6:	f7 1c       	adc	r15, r7
    2aa8:	08 1d       	adc	r16, r8
    2aaa:	19 1d       	adc	r17, r9
    2aac:	9a 01       	movw	r18, r20
    2aae:	ab 01       	movw	r20, r22
    2ab0:	2a 0d       	add	r18, r10
    2ab2:	3b 1d       	adc	r19, r11
    2ab4:	4c 1d       	adc	r20, r12
    2ab6:	5d 1d       	adc	r21, r13
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	a0 e0       	ldi	r26, 0x00	; 0
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e6 14       	cp	r14, r6
    2ac2:	f7 04       	cpc	r15, r7
    2ac4:	08 05       	cpc	r16, r8
    2ac6:	19 05       	cpc	r17, r9
    2ac8:	20 f4       	brcc	.+8      	; 0x2ad2 <__mulsf3+0xe8>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a0 e0       	ldi	r26, 0x00	; 0
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ba 01       	movw	r22, r20
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	48 0f       	add	r20, r24
    2ad8:	59 1f       	adc	r21, r25
    2ada:	6a 1f       	adc	r22, r26
    2adc:	7b 1f       	adc	r23, r27
    2ade:	aa 0c       	add	r10, r10
    2ae0:	bb 1c       	adc	r11, r11
    2ae2:	cc 1c       	adc	r12, r12
    2ae4:	dd 1c       	adc	r13, r13
    2ae6:	97 fe       	sbrs	r9, 7
    2ae8:	08 c0       	rjmp	.+16     	; 0x2afa <__mulsf3+0x110>
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	a8 2a       	or	r10, r24
    2af4:	b9 2a       	or	r11, r25
    2af6:	ca 2a       	or	r12, r26
    2af8:	db 2a       	or	r13, r27
    2afa:	31 96       	adiw	r30, 0x01	; 1
    2afc:	e0 32       	cpi	r30, 0x20	; 32
    2afe:	f1 05       	cpc	r31, r1
    2b00:	49 f0       	breq	.+18     	; 0x2b14 <__mulsf3+0x12a>
    2b02:	66 0c       	add	r6, r6
    2b04:	77 1c       	adc	r7, r7
    2b06:	88 1c       	adc	r8, r8
    2b08:	99 1c       	adc	r9, r9
    2b0a:	56 94       	lsr	r5
    2b0c:	47 94       	ror	r4
    2b0e:	37 94       	ror	r3
    2b10:	27 94       	ror	r2
    2b12:	c3 cf       	rjmp	.-122    	; 0x2a9a <__mulsf3+0xb0>
    2b14:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b16:	ea 89       	ldd	r30, Y+18	; 0x12
    2b18:	2b 89       	ldd	r18, Y+19	; 0x13
    2b1a:	3c 89       	ldd	r19, Y+20	; 0x14
    2b1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b20:	28 0f       	add	r18, r24
    2b22:	39 1f       	adc	r19, r25
    2b24:	2e 5f       	subi	r18, 0xFE	; 254
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
    2b28:	17 c0       	rjmp	.+46     	; 0x2b58 <__mulsf3+0x16e>
    2b2a:	ca 01       	movw	r24, r20
    2b2c:	81 70       	andi	r24, 0x01	; 1
    2b2e:	90 70       	andi	r25, 0x00	; 0
    2b30:	89 2b       	or	r24, r25
    2b32:	61 f0       	breq	.+24     	; 0x2b4c <__mulsf3+0x162>
    2b34:	16 95       	lsr	r17
    2b36:	07 95       	ror	r16
    2b38:	f7 94       	ror	r15
    2b3a:	e7 94       	ror	r14
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	a0 e0       	ldi	r26, 0x00	; 0
    2b42:	b0 e8       	ldi	r27, 0x80	; 128
    2b44:	e8 2a       	or	r14, r24
    2b46:	f9 2a       	or	r15, r25
    2b48:	0a 2b       	or	r16, r26
    2b4a:	1b 2b       	or	r17, r27
    2b4c:	76 95       	lsr	r23
    2b4e:	67 95       	ror	r22
    2b50:	57 95       	ror	r21
    2b52:	47 95       	ror	r20
    2b54:	2f 5f       	subi	r18, 0xFF	; 255
    2b56:	3f 4f       	sbci	r19, 0xFF	; 255
    2b58:	77 fd       	sbrc	r23, 7
    2b5a:	e7 cf       	rjmp	.-50     	; 0x2b2a <__mulsf3+0x140>
    2b5c:	0c c0       	rjmp	.+24     	; 0x2b76 <__mulsf3+0x18c>
    2b5e:	44 0f       	add	r20, r20
    2b60:	55 1f       	adc	r21, r21
    2b62:	66 1f       	adc	r22, r22
    2b64:	77 1f       	adc	r23, r23
    2b66:	17 fd       	sbrc	r17, 7
    2b68:	41 60       	ori	r20, 0x01	; 1
    2b6a:	ee 0c       	add	r14, r14
    2b6c:	ff 1c       	adc	r15, r15
    2b6e:	00 1f       	adc	r16, r16
    2b70:	11 1f       	adc	r17, r17
    2b72:	21 50       	subi	r18, 0x01	; 1
    2b74:	30 40       	sbci	r19, 0x00	; 0
    2b76:	40 30       	cpi	r20, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	59 07       	cpc	r21, r25
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	69 07       	cpc	r22, r25
    2b80:	90 e4       	ldi	r25, 0x40	; 64
    2b82:	79 07       	cpc	r23, r25
    2b84:	60 f3       	brcs	.-40     	; 0x2b5e <__mulsf3+0x174>
    2b86:	2b 8f       	std	Y+27, r18	; 0x1b
    2b88:	3c 8f       	std	Y+28, r19	; 0x1c
    2b8a:	db 01       	movw	r26, r22
    2b8c:	ca 01       	movw	r24, r20
    2b8e:	8f 77       	andi	r24, 0x7F	; 127
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	a0 70       	andi	r26, 0x00	; 0
    2b94:	b0 70       	andi	r27, 0x00	; 0
    2b96:	80 34       	cpi	r24, 0x40	; 64
    2b98:	91 05       	cpc	r25, r1
    2b9a:	a1 05       	cpc	r26, r1
    2b9c:	b1 05       	cpc	r27, r1
    2b9e:	61 f4       	brne	.+24     	; 0x2bb8 <__mulsf3+0x1ce>
    2ba0:	47 fd       	sbrc	r20, 7
    2ba2:	0a c0       	rjmp	.+20     	; 0x2bb8 <__mulsf3+0x1ce>
    2ba4:	e1 14       	cp	r14, r1
    2ba6:	f1 04       	cpc	r15, r1
    2ba8:	01 05       	cpc	r16, r1
    2baa:	11 05       	cpc	r17, r1
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <__mulsf3+0x1ce>
    2bae:	40 5c       	subi	r20, 0xC0	; 192
    2bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb2:	6f 4f       	sbci	r22, 0xFF	; 255
    2bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb6:	40 78       	andi	r20, 0x80	; 128
    2bb8:	1a 8e       	std	Y+26, r1	; 0x1a
    2bba:	fe 17       	cp	r31, r30
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <__mulsf3+0x1d8>
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	8a 8f       	std	Y+26, r24	; 0x1a
    2bc2:	4d 8f       	std	Y+29, r20	; 0x1d
    2bc4:	5e 8f       	std	Y+30, r21	; 0x1e
    2bc6:	6f 8f       	std	Y+31, r22	; 0x1f
    2bc8:	78 a3       	std	Y+32, r23	; 0x20
    2bca:	83 e0       	ldi	r24, 0x03	; 3
    2bcc:	89 8f       	std	Y+25, r24	; 0x19
    2bce:	ce 01       	movw	r24, r28
    2bd0:	49 96       	adiw	r24, 0x19	; 25
    2bd2:	0e 94 29 18 	call	0x3052	; 0x3052 <__pack_f>
    2bd6:	a0 96       	adiw	r28, 0x20	; 32
    2bd8:	e2 e1       	ldi	r30, 0x12	; 18
    2bda:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__>

00002bde <__gtsf2>:
    2bde:	a8 e1       	ldi	r26, 0x18	; 24
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e5 ef       	ldi	r30, 0xF5	; 245
    2be4:	f5 e1       	ldi	r31, 0x15	; 21
    2be6:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
    2bea:	69 83       	std	Y+1, r22	; 0x01
    2bec:	7a 83       	std	Y+2, r23	; 0x02
    2bee:	8b 83       	std	Y+3, r24	; 0x03
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	2d 83       	std	Y+5, r18	; 0x05
    2bf4:	3e 83       	std	Y+6, r19	; 0x06
    2bf6:	4f 83       	std	Y+7, r20	; 0x07
    2bf8:	58 87       	std	Y+8, r21	; 0x08
    2bfa:	89 e0       	ldi	r24, 0x09	; 9
    2bfc:	e8 2e       	mov	r14, r24
    2bfe:	f1 2c       	mov	r15, r1
    2c00:	ec 0e       	add	r14, r28
    2c02:	fd 1e       	adc	r15, r29
    2c04:	ce 01       	movw	r24, r28
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	b7 01       	movw	r22, r14
    2c0a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2c0e:	8e 01       	movw	r16, r28
    2c10:	0f 5e       	subi	r16, 0xEF	; 239
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	ce 01       	movw	r24, r28
    2c16:	05 96       	adiw	r24, 0x05	; 5
    2c18:	b8 01       	movw	r22, r16
    2c1a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	82 30       	cpi	r24, 0x02	; 2
    2c22:	40 f0       	brcs	.+16     	; 0x2c34 <__gtsf2+0x56>
    2c24:	89 89       	ldd	r24, Y+17	; 0x11
    2c26:	82 30       	cpi	r24, 0x02	; 2
    2c28:	28 f0       	brcs	.+10     	; 0x2c34 <__gtsf2+0x56>
    2c2a:	c7 01       	movw	r24, r14
    2c2c:	b8 01       	movw	r22, r16
    2c2e:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fpcmp_parts_f>
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <__gtsf2+0x58>
    2c34:	8f ef       	ldi	r24, 0xFF	; 255
    2c36:	68 96       	adiw	r28, 0x18	; 24
    2c38:	e6 e0       	ldi	r30, 0x06	; 6
    2c3a:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00002c3e <__gesf2>:
    2c3e:	a8 e1       	ldi	r26, 0x18	; 24
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e5 e2       	ldi	r30, 0x25	; 37
    2c44:	f6 e1       	ldi	r31, 0x16	; 22
    2c46:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
    2c4a:	69 83       	std	Y+1, r22	; 0x01
    2c4c:	7a 83       	std	Y+2, r23	; 0x02
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	2d 83       	std	Y+5, r18	; 0x05
    2c54:	3e 83       	std	Y+6, r19	; 0x06
    2c56:	4f 83       	std	Y+7, r20	; 0x07
    2c58:	58 87       	std	Y+8, r21	; 0x08
    2c5a:	89 e0       	ldi	r24, 0x09	; 9
    2c5c:	e8 2e       	mov	r14, r24
    2c5e:	f1 2c       	mov	r15, r1
    2c60:	ec 0e       	add	r14, r28
    2c62:	fd 1e       	adc	r15, r29
    2c64:	ce 01       	movw	r24, r28
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	b7 01       	movw	r22, r14
    2c6a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2c6e:	8e 01       	movw	r16, r28
    2c70:	0f 5e       	subi	r16, 0xEF	; 239
    2c72:	1f 4f       	sbci	r17, 0xFF	; 255
    2c74:	ce 01       	movw	r24, r28
    2c76:	05 96       	adiw	r24, 0x05	; 5
    2c78:	b8 01       	movw	r22, r16
    2c7a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	82 30       	cpi	r24, 0x02	; 2
    2c82:	40 f0       	brcs	.+16     	; 0x2c94 <__gesf2+0x56>
    2c84:	89 89       	ldd	r24, Y+17	; 0x11
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	28 f0       	brcs	.+10     	; 0x2c94 <__gesf2+0x56>
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	b8 01       	movw	r22, r16
    2c8e:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fpcmp_parts_f>
    2c92:	01 c0       	rjmp	.+2      	; 0x2c96 <__gesf2+0x58>
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	68 96       	adiw	r28, 0x18	; 24
    2c98:	e6 e0       	ldi	r30, 0x06	; 6
    2c9a:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00002c9e <__ltsf2>:
    2c9e:	a8 e1       	ldi	r26, 0x18	; 24
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e5 e5       	ldi	r30, 0x55	; 85
    2ca4:	f6 e1       	ldi	r31, 0x16	; 22
    2ca6:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
    2caa:	69 83       	std	Y+1, r22	; 0x01
    2cac:	7a 83       	std	Y+2, r23	; 0x02
    2cae:	8b 83       	std	Y+3, r24	; 0x03
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	2d 83       	std	Y+5, r18	; 0x05
    2cb4:	3e 83       	std	Y+6, r19	; 0x06
    2cb6:	4f 83       	std	Y+7, r20	; 0x07
    2cb8:	58 87       	std	Y+8, r21	; 0x08
    2cba:	89 e0       	ldi	r24, 0x09	; 9
    2cbc:	e8 2e       	mov	r14, r24
    2cbe:	f1 2c       	mov	r15, r1
    2cc0:	ec 0e       	add	r14, r28
    2cc2:	fd 1e       	adc	r15, r29
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	b7 01       	movw	r22, r14
    2cca:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2cce:	8e 01       	movw	r16, r28
    2cd0:	0f 5e       	subi	r16, 0xEF	; 239
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	05 96       	adiw	r24, 0x05	; 5
    2cd8:	b8 01       	movw	r22, r16
    2cda:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	82 30       	cpi	r24, 0x02	; 2
    2ce2:	40 f0       	brcs	.+16     	; 0x2cf4 <__ltsf2+0x56>
    2ce4:	89 89       	ldd	r24, Y+17	; 0x11
    2ce6:	82 30       	cpi	r24, 0x02	; 2
    2ce8:	28 f0       	brcs	.+10     	; 0x2cf4 <__ltsf2+0x56>
    2cea:	c7 01       	movw	r24, r14
    2cec:	b8 01       	movw	r22, r16
    2cee:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fpcmp_parts_f>
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <__ltsf2+0x58>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	68 96       	adiw	r28, 0x18	; 24
    2cf8:	e6 e0       	ldi	r30, 0x06	; 6
    2cfa:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00002cfe <__lesf2>:
    2cfe:	a8 e1       	ldi	r26, 0x18	; 24
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e5 e8       	ldi	r30, 0x85	; 133
    2d04:	f6 e1       	ldi	r31, 0x16	; 22
    2d06:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
    2d0a:	69 83       	std	Y+1, r22	; 0x01
    2d0c:	7a 83       	std	Y+2, r23	; 0x02
    2d0e:	8b 83       	std	Y+3, r24	; 0x03
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	2d 83       	std	Y+5, r18	; 0x05
    2d14:	3e 83       	std	Y+6, r19	; 0x06
    2d16:	4f 83       	std	Y+7, r20	; 0x07
    2d18:	58 87       	std	Y+8, r21	; 0x08
    2d1a:	89 e0       	ldi	r24, 0x09	; 9
    2d1c:	e8 2e       	mov	r14, r24
    2d1e:	f1 2c       	mov	r15, r1
    2d20:	ec 0e       	add	r14, r28
    2d22:	fd 1e       	adc	r15, r29
    2d24:	ce 01       	movw	r24, r28
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	b7 01       	movw	r22, r14
    2d2a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2d2e:	8e 01       	movw	r16, r28
    2d30:	0f 5e       	subi	r16, 0xEF	; 239
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	ce 01       	movw	r24, r28
    2d36:	05 96       	adiw	r24, 0x05	; 5
    2d38:	b8 01       	movw	r22, r16
    2d3a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	82 30       	cpi	r24, 0x02	; 2
    2d42:	40 f0       	brcs	.+16     	; 0x2d54 <__lesf2+0x56>
    2d44:	89 89       	ldd	r24, Y+17	; 0x11
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	28 f0       	brcs	.+10     	; 0x2d54 <__lesf2+0x56>
    2d4a:	c7 01       	movw	r24, r14
    2d4c:	b8 01       	movw	r22, r16
    2d4e:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fpcmp_parts_f>
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <__lesf2+0x58>
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	68 96       	adiw	r28, 0x18	; 24
    2d58:	e6 e0       	ldi	r30, 0x06	; 6
    2d5a:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00002d5e <__floatsisf>:
    2d5e:	a8 e0       	ldi	r26, 0x08	; 8
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e5 eb       	ldi	r30, 0xB5	; 181
    2d64:	f6 e1       	ldi	r31, 0x16	; 22
    2d66:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x12>
    2d6a:	9b 01       	movw	r18, r22
    2d6c:	ac 01       	movw	r20, r24
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	da 01       	movw	r26, r20
    2d74:	c9 01       	movw	r24, r18
    2d76:	88 27       	eor	r24, r24
    2d78:	b7 fd       	sbrc	r27, 7
    2d7a:	83 95       	inc	r24
    2d7c:	99 27       	eor	r25, r25
    2d7e:	aa 27       	eor	r26, r26
    2d80:	bb 27       	eor	r27, r27
    2d82:	b8 2e       	mov	r11, r24
    2d84:	21 15       	cp	r18, r1
    2d86:	31 05       	cpc	r19, r1
    2d88:	41 05       	cpc	r20, r1
    2d8a:	51 05       	cpc	r21, r1
    2d8c:	19 f4       	brne	.+6      	; 0x2d94 <__floatsisf+0x36>
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	3a c0       	rjmp	.+116    	; 0x2e08 <__floatsisf+0xaa>
    2d94:	88 23       	and	r24, r24
    2d96:	a9 f0       	breq	.+42     	; 0x2dc2 <__floatsisf+0x64>
    2d98:	20 30       	cpi	r18, 0x00	; 0
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	38 07       	cpc	r19, r24
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	48 07       	cpc	r20, r24
    2da2:	80 e8       	ldi	r24, 0x80	; 128
    2da4:	58 07       	cpc	r21, r24
    2da6:	29 f4       	brne	.+10     	; 0x2db2 <__floatsisf+0x54>
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	9f ec       	ldi	r25, 0xCF	; 207
    2db0:	30 c0       	rjmp	.+96     	; 0x2e12 <__floatsisf+0xb4>
    2db2:	ee 24       	eor	r14, r14
    2db4:	ff 24       	eor	r15, r15
    2db6:	87 01       	movw	r16, r14
    2db8:	e2 1a       	sub	r14, r18
    2dba:	f3 0a       	sbc	r15, r19
    2dbc:	04 0b       	sbc	r16, r20
    2dbe:	15 0b       	sbc	r17, r21
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <__floatsisf+0x68>
    2dc2:	79 01       	movw	r14, r18
    2dc4:	8a 01       	movw	r16, r20
    2dc6:	8e e1       	ldi	r24, 0x1E	; 30
    2dc8:	c8 2e       	mov	r12, r24
    2dca:	d1 2c       	mov	r13, r1
    2dcc:	dc 82       	std	Y+4, r13	; 0x04
    2dce:	cb 82       	std	Y+3, r12	; 0x03
    2dd0:	ed 82       	std	Y+5, r14	; 0x05
    2dd2:	fe 82       	std	Y+6, r15	; 0x06
    2dd4:	0f 83       	std	Y+7, r16	; 0x07
    2dd6:	18 87       	std	Y+8, r17	; 0x08
    2dd8:	c8 01       	movw	r24, r16
    2dda:	b7 01       	movw	r22, r14
    2ddc:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__clzsi2>
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	18 16       	cp	r1, r24
    2de4:	19 06       	cpc	r1, r25
    2de6:	84 f4       	brge	.+32     	; 0x2e08 <__floatsisf+0xaa>
    2de8:	08 2e       	mov	r0, r24
    2dea:	04 c0       	rjmp	.+8      	; 0x2df4 <__floatsisf+0x96>
    2dec:	ee 0c       	add	r14, r14
    2dee:	ff 1c       	adc	r15, r15
    2df0:	00 1f       	adc	r16, r16
    2df2:	11 1f       	adc	r17, r17
    2df4:	0a 94       	dec	r0
    2df6:	d2 f7       	brpl	.-12     	; 0x2dec <__floatsisf+0x8e>
    2df8:	ed 82       	std	Y+5, r14	; 0x05
    2dfa:	fe 82       	std	Y+6, r15	; 0x06
    2dfc:	0f 83       	std	Y+7, r16	; 0x07
    2dfe:	18 87       	std	Y+8, r17	; 0x08
    2e00:	c8 1a       	sub	r12, r24
    2e02:	d9 0a       	sbc	r13, r25
    2e04:	dc 82       	std	Y+4, r13	; 0x04
    2e06:	cb 82       	std	Y+3, r12	; 0x03
    2e08:	ba 82       	std	Y+2, r11	; 0x02
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	0e 94 29 18 	call	0x3052	; 0x3052 <__pack_f>
    2e12:	28 96       	adiw	r28, 0x08	; 8
    2e14:	e9 e0       	ldi	r30, 0x09	; 9
    2e16:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__+0x12>

00002e1a <__fixsfsi>:
    2e1a:	ac e0       	ldi	r26, 0x0C	; 12
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e3 e1       	ldi	r30, 0x13	; 19
    2e20:	f7 e1       	ldi	r31, 0x17	; 23
    2e22:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__prologue_saves__+0x20>
    2e26:	69 83       	std	Y+1, r22	; 0x01
    2e28:	7a 83       	std	Y+2, r23	; 0x02
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
    2e2e:	ce 01       	movw	r24, r28
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	be 01       	movw	r22, r28
    2e34:	6b 5f       	subi	r22, 0xFB	; 251
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__unpack_f>
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	61 f1       	breq	.+88     	; 0x2e9a <__fixsfsi+0x80>
    2e42:	82 30       	cpi	r24, 0x02	; 2
    2e44:	50 f1       	brcs	.+84     	; 0x2e9a <__fixsfsi+0x80>
    2e46:	84 30       	cpi	r24, 0x04	; 4
    2e48:	21 f4       	brne	.+8      	; 0x2e52 <__fixsfsi+0x38>
    2e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e4c:	88 23       	and	r24, r24
    2e4e:	51 f1       	breq	.+84     	; 0x2ea4 <__fixsfsi+0x8a>
    2e50:	2e c0       	rjmp	.+92     	; 0x2eae <__fixsfsi+0x94>
    2e52:	2f 81       	ldd	r18, Y+7	; 0x07
    2e54:	38 85       	ldd	r19, Y+8	; 0x08
    2e56:	37 fd       	sbrc	r19, 7
    2e58:	20 c0       	rjmp	.+64     	; 0x2e9a <__fixsfsi+0x80>
    2e5a:	6e 81       	ldd	r22, Y+6	; 0x06
    2e5c:	2f 31       	cpi	r18, 0x1F	; 31
    2e5e:	31 05       	cpc	r19, r1
    2e60:	1c f0       	brlt	.+6      	; 0x2e68 <__fixsfsi+0x4e>
    2e62:	66 23       	and	r22, r22
    2e64:	f9 f0       	breq	.+62     	; 0x2ea4 <__fixsfsi+0x8a>
    2e66:	23 c0       	rjmp	.+70     	; 0x2eae <__fixsfsi+0x94>
    2e68:	8e e1       	ldi	r24, 0x1E	; 30
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	82 1b       	sub	r24, r18
    2e6e:	93 0b       	sbc	r25, r19
    2e70:	29 85       	ldd	r18, Y+9	; 0x09
    2e72:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e74:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e76:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e78:	04 c0       	rjmp	.+8      	; 0x2e82 <__fixsfsi+0x68>
    2e7a:	56 95       	lsr	r21
    2e7c:	47 95       	ror	r20
    2e7e:	37 95       	ror	r19
    2e80:	27 95       	ror	r18
    2e82:	8a 95       	dec	r24
    2e84:	d2 f7       	brpl	.-12     	; 0x2e7a <__fixsfsi+0x60>
    2e86:	66 23       	and	r22, r22
    2e88:	b1 f0       	breq	.+44     	; 0x2eb6 <__fixsfsi+0x9c>
    2e8a:	50 95       	com	r21
    2e8c:	40 95       	com	r20
    2e8e:	30 95       	com	r19
    2e90:	21 95       	neg	r18
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	4f 4f       	sbci	r20, 0xFF	; 255
    2e96:	5f 4f       	sbci	r21, 0xFF	; 255
    2e98:	0e c0       	rjmp	.+28     	; 0x2eb6 <__fixsfsi+0x9c>
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	09 c0       	rjmp	.+18     	; 0x2eb6 <__fixsfsi+0x9c>
    2ea4:	2f ef       	ldi	r18, 0xFF	; 255
    2ea6:	3f ef       	ldi	r19, 0xFF	; 255
    2ea8:	4f ef       	ldi	r20, 0xFF	; 255
    2eaa:	5f e7       	ldi	r21, 0x7F	; 127
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <__fixsfsi+0x9c>
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e0       	ldi	r20, 0x00	; 0
    2eb4:	50 e8       	ldi	r21, 0x80	; 128
    2eb6:	b9 01       	movw	r22, r18
    2eb8:	ca 01       	movw	r24, r20
    2eba:	2c 96       	adiw	r28, 0x0c	; 12
    2ebc:	e2 e0       	ldi	r30, 0x02	; 2
    2ebe:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__epilogue_restores__+0x20>

00002ec2 <__floatunsisf>:
    2ec2:	a8 e0       	ldi	r26, 0x08	; 8
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e7 e6       	ldi	r30, 0x67	; 103
    2ec8:	f7 e1       	ldi	r31, 0x17	; 23
    2eca:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__prologue_saves__+0x10>
    2ece:	7b 01       	movw	r14, r22
    2ed0:	8c 01       	movw	r16, r24
    2ed2:	61 15       	cp	r22, r1
    2ed4:	71 05       	cpc	r23, r1
    2ed6:	81 05       	cpc	r24, r1
    2ed8:	91 05       	cpc	r25, r1
    2eda:	19 f4       	brne	.+6      	; 0x2ee2 <__floatunsisf+0x20>
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	60 c0       	rjmp	.+192    	; 0x2fa2 <__floatunsisf+0xe0>
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	8e e1       	ldi	r24, 0x1E	; 30
    2ee8:	c8 2e       	mov	r12, r24
    2eea:	d1 2c       	mov	r13, r1
    2eec:	dc 82       	std	Y+4, r13	; 0x04
    2eee:	cb 82       	std	Y+3, r12	; 0x03
    2ef0:	ed 82       	std	Y+5, r14	; 0x05
    2ef2:	fe 82       	std	Y+6, r15	; 0x06
    2ef4:	0f 83       	std	Y+7, r16	; 0x07
    2ef6:	18 87       	std	Y+8, r17	; 0x08
    2ef8:	c8 01       	movw	r24, r16
    2efa:	b7 01       	movw	r22, r14
    2efc:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__clzsi2>
    2f00:	fc 01       	movw	r30, r24
    2f02:	31 97       	sbiw	r30, 0x01	; 1
    2f04:	f7 ff       	sbrs	r31, 7
    2f06:	3b c0       	rjmp	.+118    	; 0x2f7e <__floatunsisf+0xbc>
    2f08:	22 27       	eor	r18, r18
    2f0a:	33 27       	eor	r19, r19
    2f0c:	2e 1b       	sub	r18, r30
    2f0e:	3f 0b       	sbc	r19, r31
    2f10:	57 01       	movw	r10, r14
    2f12:	68 01       	movw	r12, r16
    2f14:	02 2e       	mov	r0, r18
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <__floatunsisf+0x5e>
    2f18:	d6 94       	lsr	r13
    2f1a:	c7 94       	ror	r12
    2f1c:	b7 94       	ror	r11
    2f1e:	a7 94       	ror	r10
    2f20:	0a 94       	dec	r0
    2f22:	d2 f7       	brpl	.-12     	; 0x2f18 <__floatunsisf+0x56>
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	a0 e0       	ldi	r26, 0x00	; 0
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <__floatunsisf+0x7c>
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	aa 1f       	adc	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	2a 95       	dec	r18
    2f40:	d2 f7       	brpl	.-12     	; 0x2f36 <__floatunsisf+0x74>
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	a1 09       	sbc	r26, r1
    2f46:	b1 09       	sbc	r27, r1
    2f48:	8e 21       	and	r24, r14
    2f4a:	9f 21       	and	r25, r15
    2f4c:	a0 23       	and	r26, r16
    2f4e:	b1 23       	and	r27, r17
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	a1 05       	cpc	r26, r1
    2f54:	b1 05       	cpc	r27, r1
    2f56:	21 f0       	breq	.+8      	; 0x2f60 <__floatunsisf+0x9e>
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	70 e0       	ldi	r23, 0x00	; 0
    2f60:	4a 29       	or	r20, r10
    2f62:	5b 29       	or	r21, r11
    2f64:	6c 29       	or	r22, r12
    2f66:	7d 29       	or	r23, r13
    2f68:	4d 83       	std	Y+5, r20	; 0x05
    2f6a:	5e 83       	std	Y+6, r21	; 0x06
    2f6c:	6f 83       	std	Y+7, r22	; 0x07
    2f6e:	78 87       	std	Y+8, r23	; 0x08
    2f70:	8e e1       	ldi	r24, 0x1E	; 30
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	8e 1b       	sub	r24, r30
    2f76:	9f 0b       	sbc	r25, r31
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	8b 83       	std	Y+3, r24	; 0x03
    2f7c:	12 c0       	rjmp	.+36     	; 0x2fa2 <__floatunsisf+0xe0>
    2f7e:	30 97       	sbiw	r30, 0x00	; 0
    2f80:	81 f0       	breq	.+32     	; 0x2fa2 <__floatunsisf+0xe0>
    2f82:	0e 2e       	mov	r0, r30
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <__floatunsisf+0xcc>
    2f86:	ee 0c       	add	r14, r14
    2f88:	ff 1c       	adc	r15, r15
    2f8a:	00 1f       	adc	r16, r16
    2f8c:	11 1f       	adc	r17, r17
    2f8e:	0a 94       	dec	r0
    2f90:	d2 f7       	brpl	.-12     	; 0x2f86 <__floatunsisf+0xc4>
    2f92:	ed 82       	std	Y+5, r14	; 0x05
    2f94:	fe 82       	std	Y+6, r15	; 0x06
    2f96:	0f 83       	std	Y+7, r16	; 0x07
    2f98:	18 87       	std	Y+8, r17	; 0x08
    2f9a:	ce 1a       	sub	r12, r30
    2f9c:	df 0a       	sbc	r13, r31
    2f9e:	dc 82       	std	Y+4, r13	; 0x04
    2fa0:	cb 82       	std	Y+3, r12	; 0x03
    2fa2:	1a 82       	std	Y+2, r1	; 0x02
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	0e 94 29 18 	call	0x3052	; 0x3052 <__pack_f>
    2fac:	28 96       	adiw	r28, 0x08	; 8
    2fae:	ea e0       	ldi	r30, 0x0A	; 10
    2fb0:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__epilogue_restores__+0x10>

00002fb4 <__clzsi2>:
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	7b 01       	movw	r14, r22
    2fbe:	8c 01       	movw	r16, r24
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	e8 16       	cp	r14, r24
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	f8 06       	cpc	r15, r24
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	08 07       	cpc	r16, r24
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	18 07       	cpc	r17, r24
    2fd0:	88 f4       	brcc	.+34     	; 0x2ff4 <__clzsi2+0x40>
    2fd2:	8f ef       	ldi	r24, 0xFF	; 255
    2fd4:	e8 16       	cp	r14, r24
    2fd6:	f1 04       	cpc	r15, r1
    2fd8:	01 05       	cpc	r16, r1
    2fda:	11 05       	cpc	r17, r1
    2fdc:	31 f0       	breq	.+12     	; 0x2fea <__clzsi2+0x36>
    2fde:	28 f0       	brcs	.+10     	; 0x2fea <__clzsi2+0x36>
    2fe0:	88 e0       	ldi	r24, 0x08	; 8
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	a0 e0       	ldi	r26, 0x00	; 0
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	17 c0       	rjmp	.+46     	; 0x3018 <__clzsi2+0x64>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	12 c0       	rjmp	.+36     	; 0x3018 <__clzsi2+0x64>
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	e8 16       	cp	r14, r24
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	f8 06       	cpc	r15, r24
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	08 07       	cpc	r16, r24
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	18 07       	cpc	r17, r24
    3004:	28 f0       	brcs	.+10     	; 0x3010 <__clzsi2+0x5c>
    3006:	88 e1       	ldi	r24, 0x18	; 24
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	a0 e0       	ldi	r26, 0x00	; 0
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <__clzsi2+0x64>
    3010:	80 e1       	ldi	r24, 0x10	; 16
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	a0 e0       	ldi	r26, 0x00	; 0
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	20 e2       	ldi	r18, 0x20	; 32
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	50 e0       	ldi	r21, 0x00	; 0
    3020:	28 1b       	sub	r18, r24
    3022:	39 0b       	sbc	r19, r25
    3024:	4a 0b       	sbc	r20, r26
    3026:	5b 0b       	sbc	r21, r27
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <__clzsi2+0x7e>
    302a:	16 95       	lsr	r17
    302c:	07 95       	ror	r16
    302e:	f7 94       	ror	r15
    3030:	e7 94       	ror	r14
    3032:	8a 95       	dec	r24
    3034:	d2 f7       	brpl	.-12     	; 0x302a <__clzsi2+0x76>
    3036:	f7 01       	movw	r30, r14
    3038:	e7 5c       	subi	r30, 0xC7	; 199
    303a:	fe 4f       	sbci	r31, 0xFE	; 254
    303c:	80 81       	ld	r24, Z
    303e:	28 1b       	sub	r18, r24
    3040:	31 09       	sbc	r19, r1
    3042:	41 09       	sbc	r20, r1
    3044:	51 09       	sbc	r21, r1
    3046:	c9 01       	movw	r24, r18
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	ff 90       	pop	r15
    304e:	ef 90       	pop	r14
    3050:	08 95       	ret

00003052 <__pack_f>:
    3052:	df 92       	push	r13
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	fc 01       	movw	r30, r24
    305e:	e4 80       	ldd	r14, Z+4	; 0x04
    3060:	f5 80       	ldd	r15, Z+5	; 0x05
    3062:	06 81       	ldd	r16, Z+6	; 0x06
    3064:	17 81       	ldd	r17, Z+7	; 0x07
    3066:	d1 80       	ldd	r13, Z+1	; 0x01
    3068:	80 81       	ld	r24, Z
    306a:	82 30       	cpi	r24, 0x02	; 2
    306c:	48 f4       	brcc	.+18     	; 0x3080 <__pack_f+0x2e>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	a0 e1       	ldi	r26, 0x10	; 16
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e8 2a       	or	r14, r24
    3078:	f9 2a       	or	r15, r25
    307a:	0a 2b       	or	r16, r26
    307c:	1b 2b       	or	r17, r27
    307e:	a5 c0       	rjmp	.+330    	; 0x31ca <__pack_f+0x178>
    3080:	84 30       	cpi	r24, 0x04	; 4
    3082:	09 f4       	brne	.+2      	; 0x3086 <__pack_f+0x34>
    3084:	9f c0       	rjmp	.+318    	; 0x31c4 <__pack_f+0x172>
    3086:	82 30       	cpi	r24, 0x02	; 2
    3088:	21 f4       	brne	.+8      	; 0x3092 <__pack_f+0x40>
    308a:	ee 24       	eor	r14, r14
    308c:	ff 24       	eor	r15, r15
    308e:	87 01       	movw	r16, r14
    3090:	05 c0       	rjmp	.+10     	; 0x309c <__pack_f+0x4a>
    3092:	e1 14       	cp	r14, r1
    3094:	f1 04       	cpc	r15, r1
    3096:	01 05       	cpc	r16, r1
    3098:	11 05       	cpc	r17, r1
    309a:	19 f4       	brne	.+6      	; 0x30a2 <__pack_f+0x50>
    309c:	e0 e0       	ldi	r30, 0x00	; 0
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	96 c0       	rjmp	.+300    	; 0x31ce <__pack_f+0x17c>
    30a2:	62 81       	ldd	r22, Z+2	; 0x02
    30a4:	73 81       	ldd	r23, Z+3	; 0x03
    30a6:	9f ef       	ldi	r25, 0xFF	; 255
    30a8:	62 38       	cpi	r22, 0x82	; 130
    30aa:	79 07       	cpc	r23, r25
    30ac:	0c f0       	brlt	.+2      	; 0x30b0 <__pack_f+0x5e>
    30ae:	5b c0       	rjmp	.+182    	; 0x3166 <__pack_f+0x114>
    30b0:	22 e8       	ldi	r18, 0x82	; 130
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	26 1b       	sub	r18, r22
    30b6:	37 0b       	sbc	r19, r23
    30b8:	2a 31       	cpi	r18, 0x1A	; 26
    30ba:	31 05       	cpc	r19, r1
    30bc:	2c f0       	brlt	.+10     	; 0x30c8 <__pack_f+0x76>
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	2a c0       	rjmp	.+84     	; 0x311c <__pack_f+0xca>
    30c8:	b8 01       	movw	r22, r16
    30ca:	a7 01       	movw	r20, r14
    30cc:	02 2e       	mov	r0, r18
    30ce:	04 c0       	rjmp	.+8      	; 0x30d8 <__pack_f+0x86>
    30d0:	76 95       	lsr	r23
    30d2:	67 95       	ror	r22
    30d4:	57 95       	ror	r21
    30d6:	47 95       	ror	r20
    30d8:	0a 94       	dec	r0
    30da:	d2 f7       	brpl	.-12     	; 0x30d0 <__pack_f+0x7e>
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	a0 e0       	ldi	r26, 0x00	; 0
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	04 c0       	rjmp	.+8      	; 0x30ee <__pack_f+0x9c>
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	aa 1f       	adc	r26, r26
    30ec:	bb 1f       	adc	r27, r27
    30ee:	2a 95       	dec	r18
    30f0:	d2 f7       	brpl	.-12     	; 0x30e6 <__pack_f+0x94>
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	a1 09       	sbc	r26, r1
    30f6:	b1 09       	sbc	r27, r1
    30f8:	8e 21       	and	r24, r14
    30fa:	9f 21       	and	r25, r15
    30fc:	a0 23       	and	r26, r16
    30fe:	b1 23       	and	r27, r17
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	a1 05       	cpc	r26, r1
    3104:	b1 05       	cpc	r27, r1
    3106:	21 f0       	breq	.+8      	; 0x3110 <__pack_f+0xbe>
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	a0 e0       	ldi	r26, 0x00	; 0
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	9a 01       	movw	r18, r20
    3112:	ab 01       	movw	r20, r22
    3114:	28 2b       	or	r18, r24
    3116:	39 2b       	or	r19, r25
    3118:	4a 2b       	or	r20, r26
    311a:	5b 2b       	or	r21, r27
    311c:	da 01       	movw	r26, r20
    311e:	c9 01       	movw	r24, r18
    3120:	8f 77       	andi	r24, 0x7F	; 127
    3122:	90 70       	andi	r25, 0x00	; 0
    3124:	a0 70       	andi	r26, 0x00	; 0
    3126:	b0 70       	andi	r27, 0x00	; 0
    3128:	80 34       	cpi	r24, 0x40	; 64
    312a:	91 05       	cpc	r25, r1
    312c:	a1 05       	cpc	r26, r1
    312e:	b1 05       	cpc	r27, r1
    3130:	39 f4       	brne	.+14     	; 0x3140 <__pack_f+0xee>
    3132:	27 ff       	sbrs	r18, 7
    3134:	09 c0       	rjmp	.+18     	; 0x3148 <__pack_f+0xf6>
    3136:	20 5c       	subi	r18, 0xC0	; 192
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
    313a:	4f 4f       	sbci	r20, 0xFF	; 255
    313c:	5f 4f       	sbci	r21, 0xFF	; 255
    313e:	04 c0       	rjmp	.+8      	; 0x3148 <__pack_f+0xf6>
    3140:	21 5c       	subi	r18, 0xC1	; 193
    3142:	3f 4f       	sbci	r19, 0xFF	; 255
    3144:	4f 4f       	sbci	r20, 0xFF	; 255
    3146:	5f 4f       	sbci	r21, 0xFF	; 255
    3148:	e0 e0       	ldi	r30, 0x00	; 0
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	20 30       	cpi	r18, 0x00	; 0
    314e:	a0 e0       	ldi	r26, 0x00	; 0
    3150:	3a 07       	cpc	r19, r26
    3152:	a0 e0       	ldi	r26, 0x00	; 0
    3154:	4a 07       	cpc	r20, r26
    3156:	a0 e4       	ldi	r26, 0x40	; 64
    3158:	5a 07       	cpc	r21, r26
    315a:	10 f0       	brcs	.+4      	; 0x3160 <__pack_f+0x10e>
    315c:	e1 e0       	ldi	r30, 0x01	; 1
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	79 01       	movw	r14, r18
    3162:	8a 01       	movw	r16, r20
    3164:	27 c0       	rjmp	.+78     	; 0x31b4 <__pack_f+0x162>
    3166:	60 38       	cpi	r22, 0x80	; 128
    3168:	71 05       	cpc	r23, r1
    316a:	64 f5       	brge	.+88     	; 0x31c4 <__pack_f+0x172>
    316c:	fb 01       	movw	r30, r22
    316e:	e1 58       	subi	r30, 0x81	; 129
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	d8 01       	movw	r26, r16
    3174:	c7 01       	movw	r24, r14
    3176:	8f 77       	andi	r24, 0x7F	; 127
    3178:	90 70       	andi	r25, 0x00	; 0
    317a:	a0 70       	andi	r26, 0x00	; 0
    317c:	b0 70       	andi	r27, 0x00	; 0
    317e:	80 34       	cpi	r24, 0x40	; 64
    3180:	91 05       	cpc	r25, r1
    3182:	a1 05       	cpc	r26, r1
    3184:	b1 05       	cpc	r27, r1
    3186:	39 f4       	brne	.+14     	; 0x3196 <__pack_f+0x144>
    3188:	e7 fe       	sbrs	r14, 7
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <__pack_f+0x154>
    318c:	80 e4       	ldi	r24, 0x40	; 64
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	a0 e0       	ldi	r26, 0x00	; 0
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	04 c0       	rjmp	.+8      	; 0x319e <__pack_f+0x14c>
    3196:	8f e3       	ldi	r24, 0x3F	; 63
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a0 e0       	ldi	r26, 0x00	; 0
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e8 0e       	add	r14, r24
    31a0:	f9 1e       	adc	r15, r25
    31a2:	0a 1f       	adc	r16, r26
    31a4:	1b 1f       	adc	r17, r27
    31a6:	17 ff       	sbrs	r17, 7
    31a8:	05 c0       	rjmp	.+10     	; 0x31b4 <__pack_f+0x162>
    31aa:	16 95       	lsr	r17
    31ac:	07 95       	ror	r16
    31ae:	f7 94       	ror	r15
    31b0:	e7 94       	ror	r14
    31b2:	31 96       	adiw	r30, 0x01	; 1
    31b4:	87 e0       	ldi	r24, 0x07	; 7
    31b6:	16 95       	lsr	r17
    31b8:	07 95       	ror	r16
    31ba:	f7 94       	ror	r15
    31bc:	e7 94       	ror	r14
    31be:	8a 95       	dec	r24
    31c0:	d1 f7       	brne	.-12     	; 0x31b6 <__pack_f+0x164>
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <__pack_f+0x17c>
    31c4:	ee 24       	eor	r14, r14
    31c6:	ff 24       	eor	r15, r15
    31c8:	87 01       	movw	r16, r14
    31ca:	ef ef       	ldi	r30, 0xFF	; 255
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	6e 2f       	mov	r22, r30
    31d0:	67 95       	ror	r22
    31d2:	66 27       	eor	r22, r22
    31d4:	67 95       	ror	r22
    31d6:	90 2f       	mov	r25, r16
    31d8:	9f 77       	andi	r25, 0x7F	; 127
    31da:	d7 94       	ror	r13
    31dc:	dd 24       	eor	r13, r13
    31de:	d7 94       	ror	r13
    31e0:	8e 2f       	mov	r24, r30
    31e2:	86 95       	lsr	r24
    31e4:	49 2f       	mov	r20, r25
    31e6:	46 2b       	or	r20, r22
    31e8:	58 2f       	mov	r21, r24
    31ea:	5d 29       	or	r21, r13
    31ec:	b7 01       	movw	r22, r14
    31ee:	ca 01       	movw	r24, r20
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	df 90       	pop	r13
    31fa:	08 95       	ret

000031fc <__unpack_f>:
    31fc:	fc 01       	movw	r30, r24
    31fe:	db 01       	movw	r26, r22
    3200:	40 81       	ld	r20, Z
    3202:	51 81       	ldd	r21, Z+1	; 0x01
    3204:	22 81       	ldd	r18, Z+2	; 0x02
    3206:	62 2f       	mov	r22, r18
    3208:	6f 77       	andi	r22, 0x7F	; 127
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	22 1f       	adc	r18, r18
    320e:	22 27       	eor	r18, r18
    3210:	22 1f       	adc	r18, r18
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	89 2f       	mov	r24, r25
    3216:	88 0f       	add	r24, r24
    3218:	82 2b       	or	r24, r18
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	99 1f       	adc	r25, r25
    3220:	99 27       	eor	r25, r25
    3222:	99 1f       	adc	r25, r25
    3224:	11 96       	adiw	r26, 0x01	; 1
    3226:	9c 93       	st	X, r25
    3228:	11 97       	sbiw	r26, 0x01	; 1
    322a:	21 15       	cp	r18, r1
    322c:	31 05       	cpc	r19, r1
    322e:	a9 f5       	brne	.+106    	; 0x329a <__unpack_f+0x9e>
    3230:	41 15       	cp	r20, r1
    3232:	51 05       	cpc	r21, r1
    3234:	61 05       	cpc	r22, r1
    3236:	71 05       	cpc	r23, r1
    3238:	11 f4       	brne	.+4      	; 0x323e <__unpack_f+0x42>
    323a:	82 e0       	ldi	r24, 0x02	; 2
    323c:	37 c0       	rjmp	.+110    	; 0x32ac <__unpack_f+0xb0>
    323e:	82 e8       	ldi	r24, 0x82	; 130
    3240:	9f ef       	ldi	r25, 0xFF	; 255
    3242:	13 96       	adiw	r26, 0x03	; 3
    3244:	9c 93       	st	X, r25
    3246:	8e 93       	st	-X, r24
    3248:	12 97       	sbiw	r26, 0x02	; 2
    324a:	9a 01       	movw	r18, r20
    324c:	ab 01       	movw	r20, r22
    324e:	67 e0       	ldi	r22, 0x07	; 7
    3250:	22 0f       	add	r18, r18
    3252:	33 1f       	adc	r19, r19
    3254:	44 1f       	adc	r20, r20
    3256:	55 1f       	adc	r21, r21
    3258:	6a 95       	dec	r22
    325a:	d1 f7       	brne	.-12     	; 0x3250 <__unpack_f+0x54>
    325c:	83 e0       	ldi	r24, 0x03	; 3
    325e:	8c 93       	st	X, r24
    3260:	0d c0       	rjmp	.+26     	; 0x327c <__unpack_f+0x80>
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	44 1f       	adc	r20, r20
    3268:	55 1f       	adc	r21, r21
    326a:	12 96       	adiw	r26, 0x02	; 2
    326c:	8d 91       	ld	r24, X+
    326e:	9c 91       	ld	r25, X
    3270:	13 97       	sbiw	r26, 0x03	; 3
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	13 96       	adiw	r26, 0x03	; 3
    3276:	9c 93       	st	X, r25
    3278:	8e 93       	st	-X, r24
    327a:	12 97       	sbiw	r26, 0x02	; 2
    327c:	20 30       	cpi	r18, 0x00	; 0
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	38 07       	cpc	r19, r24
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	48 07       	cpc	r20, r24
    3286:	80 e4       	ldi	r24, 0x40	; 64
    3288:	58 07       	cpc	r21, r24
    328a:	58 f3       	brcs	.-42     	; 0x3262 <__unpack_f+0x66>
    328c:	14 96       	adiw	r26, 0x04	; 4
    328e:	2d 93       	st	X+, r18
    3290:	3d 93       	st	X+, r19
    3292:	4d 93       	st	X+, r20
    3294:	5c 93       	st	X, r21
    3296:	17 97       	sbiw	r26, 0x07	; 7
    3298:	08 95       	ret
    329a:	2f 3f       	cpi	r18, 0xFF	; 255
    329c:	31 05       	cpc	r19, r1
    329e:	79 f4       	brne	.+30     	; 0x32be <__unpack_f+0xc2>
    32a0:	41 15       	cp	r20, r1
    32a2:	51 05       	cpc	r21, r1
    32a4:	61 05       	cpc	r22, r1
    32a6:	71 05       	cpc	r23, r1
    32a8:	19 f4       	brne	.+6      	; 0x32b0 <__unpack_f+0xb4>
    32aa:	84 e0       	ldi	r24, 0x04	; 4
    32ac:	8c 93       	st	X, r24
    32ae:	08 95       	ret
    32b0:	64 ff       	sbrs	r22, 4
    32b2:	03 c0       	rjmp	.+6      	; 0x32ba <__unpack_f+0xbe>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	8c 93       	st	X, r24
    32b8:	12 c0       	rjmp	.+36     	; 0x32de <__unpack_f+0xe2>
    32ba:	1c 92       	st	X, r1
    32bc:	10 c0       	rjmp	.+32     	; 0x32de <__unpack_f+0xe2>
    32be:	2f 57       	subi	r18, 0x7F	; 127
    32c0:	30 40       	sbci	r19, 0x00	; 0
    32c2:	13 96       	adiw	r26, 0x03	; 3
    32c4:	3c 93       	st	X, r19
    32c6:	2e 93       	st	-X, r18
    32c8:	12 97       	sbiw	r26, 0x02	; 2
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	8c 93       	st	X, r24
    32ce:	87 e0       	ldi	r24, 0x07	; 7
    32d0:	44 0f       	add	r20, r20
    32d2:	55 1f       	adc	r21, r21
    32d4:	66 1f       	adc	r22, r22
    32d6:	77 1f       	adc	r23, r23
    32d8:	8a 95       	dec	r24
    32da:	d1 f7       	brne	.-12     	; 0x32d0 <__unpack_f+0xd4>
    32dc:	70 64       	ori	r23, 0x40	; 64
    32de:	14 96       	adiw	r26, 0x04	; 4
    32e0:	4d 93       	st	X+, r20
    32e2:	5d 93       	st	X+, r21
    32e4:	6d 93       	st	X+, r22
    32e6:	7c 93       	st	X, r23
    32e8:	17 97       	sbiw	r26, 0x07	; 7
    32ea:	08 95       	ret

000032ec <__fpcmp_parts_f>:
    32ec:	1f 93       	push	r17
    32ee:	dc 01       	movw	r26, r24
    32f0:	fb 01       	movw	r30, r22
    32f2:	9c 91       	ld	r25, X
    32f4:	92 30       	cpi	r25, 0x02	; 2
    32f6:	08 f4       	brcc	.+2      	; 0x32fa <__fpcmp_parts_f+0xe>
    32f8:	47 c0       	rjmp	.+142    	; 0x3388 <__fpcmp_parts_f+0x9c>
    32fa:	80 81       	ld	r24, Z
    32fc:	82 30       	cpi	r24, 0x02	; 2
    32fe:	08 f4       	brcc	.+2      	; 0x3302 <__fpcmp_parts_f+0x16>
    3300:	43 c0       	rjmp	.+134    	; 0x3388 <__fpcmp_parts_f+0x9c>
    3302:	94 30       	cpi	r25, 0x04	; 4
    3304:	51 f4       	brne	.+20     	; 0x331a <__fpcmp_parts_f+0x2e>
    3306:	11 96       	adiw	r26, 0x01	; 1
    3308:	1c 91       	ld	r17, X
    330a:	84 30       	cpi	r24, 0x04	; 4
    330c:	99 f5       	brne	.+102    	; 0x3374 <__fpcmp_parts_f+0x88>
    330e:	81 81       	ldd	r24, Z+1	; 0x01
    3310:	68 2f       	mov	r22, r24
    3312:	70 e0       	ldi	r23, 0x00	; 0
    3314:	61 1b       	sub	r22, r17
    3316:	71 09       	sbc	r23, r1
    3318:	3f c0       	rjmp	.+126    	; 0x3398 <__fpcmp_parts_f+0xac>
    331a:	84 30       	cpi	r24, 0x04	; 4
    331c:	21 f0       	breq	.+8      	; 0x3326 <__fpcmp_parts_f+0x3a>
    331e:	92 30       	cpi	r25, 0x02	; 2
    3320:	31 f4       	brne	.+12     	; 0x332e <__fpcmp_parts_f+0x42>
    3322:	82 30       	cpi	r24, 0x02	; 2
    3324:	b9 f1       	breq	.+110    	; 0x3394 <__fpcmp_parts_f+0xa8>
    3326:	81 81       	ldd	r24, Z+1	; 0x01
    3328:	88 23       	and	r24, r24
    332a:	89 f1       	breq	.+98     	; 0x338e <__fpcmp_parts_f+0xa2>
    332c:	2d c0       	rjmp	.+90     	; 0x3388 <__fpcmp_parts_f+0x9c>
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	1c 91       	ld	r17, X
    3332:	11 97       	sbiw	r26, 0x01	; 1
    3334:	82 30       	cpi	r24, 0x02	; 2
    3336:	f1 f0       	breq	.+60     	; 0x3374 <__fpcmp_parts_f+0x88>
    3338:	81 81       	ldd	r24, Z+1	; 0x01
    333a:	18 17       	cp	r17, r24
    333c:	d9 f4       	brne	.+54     	; 0x3374 <__fpcmp_parts_f+0x88>
    333e:	12 96       	adiw	r26, 0x02	; 2
    3340:	2d 91       	ld	r18, X+
    3342:	3c 91       	ld	r19, X
    3344:	13 97       	sbiw	r26, 0x03	; 3
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	82 17       	cp	r24, r18
    334c:	93 07       	cpc	r25, r19
    334e:	94 f0       	brlt	.+36     	; 0x3374 <__fpcmp_parts_f+0x88>
    3350:	28 17       	cp	r18, r24
    3352:	39 07       	cpc	r19, r25
    3354:	bc f0       	brlt	.+46     	; 0x3384 <__fpcmp_parts_f+0x98>
    3356:	14 96       	adiw	r26, 0x04	; 4
    3358:	8d 91       	ld	r24, X+
    335a:	9d 91       	ld	r25, X+
    335c:	0d 90       	ld	r0, X+
    335e:	bc 91       	ld	r27, X
    3360:	a0 2d       	mov	r26, r0
    3362:	24 81       	ldd	r18, Z+4	; 0x04
    3364:	35 81       	ldd	r19, Z+5	; 0x05
    3366:	46 81       	ldd	r20, Z+6	; 0x06
    3368:	57 81       	ldd	r21, Z+7	; 0x07
    336a:	28 17       	cp	r18, r24
    336c:	39 07       	cpc	r19, r25
    336e:	4a 07       	cpc	r20, r26
    3370:	5b 07       	cpc	r21, r27
    3372:	18 f4       	brcc	.+6      	; 0x337a <__fpcmp_parts_f+0x8e>
    3374:	11 23       	and	r17, r17
    3376:	41 f0       	breq	.+16     	; 0x3388 <__fpcmp_parts_f+0x9c>
    3378:	0a c0       	rjmp	.+20     	; 0x338e <__fpcmp_parts_f+0xa2>
    337a:	82 17       	cp	r24, r18
    337c:	93 07       	cpc	r25, r19
    337e:	a4 07       	cpc	r26, r20
    3380:	b5 07       	cpc	r27, r21
    3382:	40 f4       	brcc	.+16     	; 0x3394 <__fpcmp_parts_f+0xa8>
    3384:	11 23       	and	r17, r17
    3386:	19 f0       	breq	.+6      	; 0x338e <__fpcmp_parts_f+0xa2>
    3388:	61 e0       	ldi	r22, 0x01	; 1
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	05 c0       	rjmp	.+10     	; 0x3398 <__fpcmp_parts_f+0xac>
    338e:	6f ef       	ldi	r22, 0xFF	; 255
    3390:	7f ef       	ldi	r23, 0xFF	; 255
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <__fpcmp_parts_f+0xac>
    3394:	60 e0       	ldi	r22, 0x00	; 0
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	cb 01       	movw	r24, r22
    339a:	1f 91       	pop	r17
    339c:	08 95       	ret

0000339e <__udivmodqi4>:
    339e:	99 1b       	sub	r25, r25
    33a0:	79 e0       	ldi	r23, 0x09	; 9
    33a2:	04 c0       	rjmp	.+8      	; 0x33ac <__udivmodqi4_ep>

000033a4 <__udivmodqi4_loop>:
    33a4:	99 1f       	adc	r25, r25
    33a6:	96 17       	cp	r25, r22
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <__udivmodqi4_ep>
    33aa:	96 1b       	sub	r25, r22

000033ac <__udivmodqi4_ep>:
    33ac:	88 1f       	adc	r24, r24
    33ae:	7a 95       	dec	r23
    33b0:	c9 f7       	brne	.-14     	; 0x33a4 <__udivmodqi4_loop>
    33b2:	80 95       	com	r24
    33b4:	08 95       	ret

000033b6 <__divmodhi4>:
    33b6:	97 fb       	bst	r25, 7
    33b8:	09 2e       	mov	r0, r25
    33ba:	07 26       	eor	r0, r23
    33bc:	0a d0       	rcall	.+20     	; 0x33d2 <__divmodhi4_neg1>
    33be:	77 fd       	sbrc	r23, 7
    33c0:	04 d0       	rcall	.+8      	; 0x33ca <__divmodhi4_neg2>
    33c2:	0c d0       	rcall	.+24     	; 0x33dc <__udivmodhi4>
    33c4:	06 d0       	rcall	.+12     	; 0x33d2 <__divmodhi4_neg1>
    33c6:	00 20       	and	r0, r0
    33c8:	1a f4       	brpl	.+6      	; 0x33d0 <__divmodhi4_exit>

000033ca <__divmodhi4_neg2>:
    33ca:	70 95       	com	r23
    33cc:	61 95       	neg	r22
    33ce:	7f 4f       	sbci	r23, 0xFF	; 255

000033d0 <__divmodhi4_exit>:
    33d0:	08 95       	ret

000033d2 <__divmodhi4_neg1>:
    33d2:	f6 f7       	brtc	.-4      	; 0x33d0 <__divmodhi4_exit>
    33d4:	90 95       	com	r25
    33d6:	81 95       	neg	r24
    33d8:	9f 4f       	sbci	r25, 0xFF	; 255
    33da:	08 95       	ret

000033dc <__udivmodhi4>:
    33dc:	aa 1b       	sub	r26, r26
    33de:	bb 1b       	sub	r27, r27
    33e0:	51 e1       	ldi	r21, 0x11	; 17
    33e2:	07 c0       	rjmp	.+14     	; 0x33f2 <__udivmodhi4_ep>

000033e4 <__udivmodhi4_loop>:
    33e4:	aa 1f       	adc	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	a6 17       	cp	r26, r22
    33ea:	b7 07       	cpc	r27, r23
    33ec:	10 f0       	brcs	.+4      	; 0x33f2 <__udivmodhi4_ep>
    33ee:	a6 1b       	sub	r26, r22
    33f0:	b7 0b       	sbc	r27, r23

000033f2 <__udivmodhi4_ep>:
    33f2:	88 1f       	adc	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	5a 95       	dec	r21
    33f8:	a9 f7       	brne	.-22     	; 0x33e4 <__udivmodhi4_loop>
    33fa:	80 95       	com	r24
    33fc:	90 95       	com	r25
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	08 95       	ret

00003404 <__prologue_saves__>:
    3404:	2f 92       	push	r2
    3406:	3f 92       	push	r3
    3408:	4f 92       	push	r4
    340a:	5f 92       	push	r5
    340c:	6f 92       	push	r6
    340e:	7f 92       	push	r7
    3410:	8f 92       	push	r8
    3412:	9f 92       	push	r9
    3414:	af 92       	push	r10
    3416:	bf 92       	push	r11
    3418:	cf 92       	push	r12
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	ca 1b       	sub	r28, r26
    342e:	db 0b       	sbc	r29, r27
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	09 94       	ijmp

0000343c <__epilogue_restores__>:
    343c:	2a 88       	ldd	r2, Y+18	; 0x12
    343e:	39 88       	ldd	r3, Y+17	; 0x11
    3440:	48 88       	ldd	r4, Y+16	; 0x10
    3442:	5f 84       	ldd	r5, Y+15	; 0x0f
    3444:	6e 84       	ldd	r6, Y+14	; 0x0e
    3446:	7d 84       	ldd	r7, Y+13	; 0x0d
    3448:	8c 84       	ldd	r8, Y+12	; 0x0c
    344a:	9b 84       	ldd	r9, Y+11	; 0x0b
    344c:	aa 84       	ldd	r10, Y+10	; 0x0a
    344e:	b9 84       	ldd	r11, Y+9	; 0x09
    3450:	c8 84       	ldd	r12, Y+8	; 0x08
    3452:	df 80       	ldd	r13, Y+7	; 0x07
    3454:	ee 80       	ldd	r14, Y+6	; 0x06
    3456:	fd 80       	ldd	r15, Y+5	; 0x05
    3458:	0c 81       	ldd	r16, Y+4	; 0x04
    345a:	1b 81       	ldd	r17, Y+3	; 0x03
    345c:	aa 81       	ldd	r26, Y+2	; 0x02
    345e:	b9 81       	ldd	r27, Y+1	; 0x01
    3460:	ce 0f       	add	r28, r30
    3462:	d1 1d       	adc	r29, r1
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	ed 01       	movw	r28, r26
    3470:	08 95       	ret

00003472 <cos>:
    3472:	03 d0       	rcall	.+6      	; 0x347a <__fp_rempio2>
    3474:	e3 95       	inc	r30
    3476:	28 c0       	rjmp	.+80     	; 0x34c8 <__fp_sinus>
    3478:	d4 c0       	rjmp	.+424    	; 0x3622 <__fp_nan>

0000347a <__fp_rempio2>:
    347a:	3f d0       	rcall	.+126    	; 0x34fa <__fp_splitA>
    347c:	e8 f3       	brcs	.-6      	; 0x3478 <cos+0x6>
    347e:	e8 94       	clt
    3480:	e0 e0       	ldi	r30, 0x00	; 0
    3482:	bb 27       	eor	r27, r27
    3484:	9f 57       	subi	r25, 0x7F	; 127
    3486:	f0 f0       	brcs	.+60     	; 0x34c4 <__fp_rempio2+0x4a>
    3488:	2a ed       	ldi	r18, 0xDA	; 218
    348a:	3f e0       	ldi	r19, 0x0F	; 15
    348c:	49 ec       	ldi	r20, 0xC9	; 201
    348e:	06 c0       	rjmp	.+12     	; 0x349c <__fp_rempio2+0x22>
    3490:	ee 0f       	add	r30, r30
    3492:	bb 0f       	add	r27, r27
    3494:	66 1f       	adc	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	88 1f       	adc	r24, r24
    349a:	28 f0       	brcs	.+10     	; 0x34a6 <__fp_rempio2+0x2c>
    349c:	b2 3a       	cpi	r27, 0xA2	; 162
    349e:	62 07       	cpc	r22, r18
    34a0:	73 07       	cpc	r23, r19
    34a2:	84 07       	cpc	r24, r20
    34a4:	28 f0       	brcs	.+10     	; 0x34b0 <__fp_rempio2+0x36>
    34a6:	b2 5a       	subi	r27, 0xA2	; 162
    34a8:	62 0b       	sbc	r22, r18
    34aa:	73 0b       	sbc	r23, r19
    34ac:	84 0b       	sbc	r24, r20
    34ae:	e3 95       	inc	r30
    34b0:	9a 95       	dec	r25
    34b2:	72 f7       	brpl	.-36     	; 0x3490 <__fp_rempio2+0x16>
    34b4:	80 38       	cpi	r24, 0x80	; 128
    34b6:	30 f4       	brcc	.+12     	; 0x34c4 <__fp_rempio2+0x4a>
    34b8:	9a 95       	dec	r25
    34ba:	bb 0f       	add	r27, r27
    34bc:	66 1f       	adc	r22, r22
    34be:	77 1f       	adc	r23, r23
    34c0:	88 1f       	adc	r24, r24
    34c2:	d2 f7       	brpl	.-12     	; 0x34b8 <__fp_rempio2+0x3e>
    34c4:	90 48       	sbci	r25, 0x80	; 128
    34c6:	a1 c0       	rjmp	.+322    	; 0x360a <__fp_mpack_finite>

000034c8 <__fp_sinus>:
    34c8:	ef 93       	push	r30
    34ca:	e0 ff       	sbrs	r30, 0
    34cc:	06 c0       	rjmp	.+12     	; 0x34da <__fp_sinus+0x12>
    34ce:	a2 ea       	ldi	r26, 0xA2	; 162
    34d0:	2a ed       	ldi	r18, 0xDA	; 218
    34d2:	3f e0       	ldi	r19, 0x0F	; 15
    34d4:	49 ec       	ldi	r20, 0xC9	; 201
    34d6:	5f eb       	ldi	r21, 0xBF	; 191
    34d8:	3d d0       	rcall	.+122    	; 0x3554 <__addsf3x>
    34da:	c5 d0       	rcall	.+394    	; 0x3666 <__fp_round>
    34dc:	0f 90       	pop	r0
    34de:	03 94       	inc	r0
    34e0:	01 fc       	sbrc	r0, 1
    34e2:	90 58       	subi	r25, 0x80	; 128
    34e4:	ec e8       	ldi	r30, 0x8C	; 140
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	9f c0       	rjmp	.+318    	; 0x3628 <__fp_powsodd>

000034ea <__fp_split3>:
    34ea:	57 fd       	sbrc	r21, 7
    34ec:	90 58       	subi	r25, 0x80	; 128
    34ee:	44 0f       	add	r20, r20
    34f0:	55 1f       	adc	r21, r21
    34f2:	59 f0       	breq	.+22     	; 0x350a <__fp_splitA+0x10>
    34f4:	5f 3f       	cpi	r21, 0xFF	; 255
    34f6:	71 f0       	breq	.+28     	; 0x3514 <__fp_splitA+0x1a>
    34f8:	47 95       	ror	r20

000034fa <__fp_splitA>:
    34fa:	88 0f       	add	r24, r24
    34fc:	97 fb       	bst	r25, 7
    34fe:	99 1f       	adc	r25, r25
    3500:	61 f0       	breq	.+24     	; 0x351a <__fp_splitA+0x20>
    3502:	9f 3f       	cpi	r25, 0xFF	; 255
    3504:	79 f0       	breq	.+30     	; 0x3524 <__fp_splitA+0x2a>
    3506:	87 95       	ror	r24
    3508:	08 95       	ret
    350a:	12 16       	cp	r1, r18
    350c:	13 06       	cpc	r1, r19
    350e:	14 06       	cpc	r1, r20
    3510:	55 1f       	adc	r21, r21
    3512:	f2 cf       	rjmp	.-28     	; 0x34f8 <__fp_split3+0xe>
    3514:	46 95       	lsr	r20
    3516:	f1 df       	rcall	.-30     	; 0x34fa <__fp_splitA>
    3518:	08 c0       	rjmp	.+16     	; 0x352a <__fp_splitA+0x30>
    351a:	16 16       	cp	r1, r22
    351c:	17 06       	cpc	r1, r23
    351e:	18 06       	cpc	r1, r24
    3520:	99 1f       	adc	r25, r25
    3522:	f1 cf       	rjmp	.-30     	; 0x3506 <__fp_splitA+0xc>
    3524:	86 95       	lsr	r24
    3526:	71 05       	cpc	r23, r1
    3528:	61 05       	cpc	r22, r1
    352a:	08 94       	sec
    352c:	08 95       	ret

0000352e <sin>:
    352e:	9f 93       	push	r25
    3530:	a4 df       	rcall	.-184    	; 0x347a <__fp_rempio2>
    3532:	0f 90       	pop	r0
    3534:	07 fc       	sbrc	r0, 7
    3536:	ee 5f       	subi	r30, 0xFE	; 254
    3538:	c7 cf       	rjmp	.-114    	; 0x34c8 <__fp_sinus>
    353a:	87 d0       	rcall	.+270    	; 0x364a <__fp_pscA>
    353c:	30 f0       	brcs	.+12     	; 0x354a <sin+0x1c>
    353e:	8c d0       	rcall	.+280    	; 0x3658 <__fp_pscB>
    3540:	20 f0       	brcs	.+8      	; 0x354a <sin+0x1c>
    3542:	31 f4       	brne	.+12     	; 0x3550 <sin+0x22>
    3544:	9f 3f       	cpi	r25, 0xFF	; 255
    3546:	11 f4       	brne	.+4      	; 0x354c <sin+0x1e>
    3548:	1e f4       	brtc	.+6      	; 0x3550 <sin+0x22>
    354a:	6b c0       	rjmp	.+214    	; 0x3622 <__fp_nan>
    354c:	0e f4       	brtc	.+2      	; 0x3550 <sin+0x22>
    354e:	e0 95       	com	r30
    3550:	e7 fb       	bst	r30, 7
    3552:	53 c0       	rjmp	.+166    	; 0x35fa <__fp_inf>

00003554 <__addsf3x>:
    3554:	e9 2f       	mov	r30, r25
    3556:	c9 df       	rcall	.-110    	; 0x34ea <__fp_split3>
    3558:	80 f3       	brcs	.-32     	; 0x353a <sin+0xc>
    355a:	ba 17       	cp	r27, r26
    355c:	62 07       	cpc	r22, r18
    355e:	73 07       	cpc	r23, r19
    3560:	84 07       	cpc	r24, r20
    3562:	95 07       	cpc	r25, r21
    3564:	18 f0       	brcs	.+6      	; 0x356c <__addsf3x+0x18>
    3566:	71 f4       	brne	.+28     	; 0x3584 <__addsf3x+0x30>
    3568:	9e f5       	brtc	.+102    	; 0x35d0 <__addsf3x+0x7c>
    356a:	8e c0       	rjmp	.+284    	; 0x3688 <__fp_zero>
    356c:	0e f4       	brtc	.+2      	; 0x3570 <__addsf3x+0x1c>
    356e:	e0 95       	com	r30
    3570:	0b 2e       	mov	r0, r27
    3572:	ba 2f       	mov	r27, r26
    3574:	a0 2d       	mov	r26, r0
    3576:	0b 01       	movw	r0, r22
    3578:	b9 01       	movw	r22, r18
    357a:	90 01       	movw	r18, r0
    357c:	0c 01       	movw	r0, r24
    357e:	ca 01       	movw	r24, r20
    3580:	a0 01       	movw	r20, r0
    3582:	11 24       	eor	r1, r1
    3584:	ff 27       	eor	r31, r31
    3586:	59 1b       	sub	r21, r25
    3588:	99 f0       	breq	.+38     	; 0x35b0 <__addsf3x+0x5c>
    358a:	59 3f       	cpi	r21, 0xF9	; 249
    358c:	50 f4       	brcc	.+20     	; 0x35a2 <__addsf3x+0x4e>
    358e:	50 3e       	cpi	r21, 0xE0	; 224
    3590:	68 f1       	brcs	.+90     	; 0x35ec <__addsf3x+0x98>
    3592:	1a 16       	cp	r1, r26
    3594:	f0 40       	sbci	r31, 0x00	; 0
    3596:	a2 2f       	mov	r26, r18
    3598:	23 2f       	mov	r18, r19
    359a:	34 2f       	mov	r19, r20
    359c:	44 27       	eor	r20, r20
    359e:	58 5f       	subi	r21, 0xF8	; 248
    35a0:	f3 cf       	rjmp	.-26     	; 0x3588 <__addsf3x+0x34>
    35a2:	46 95       	lsr	r20
    35a4:	37 95       	ror	r19
    35a6:	27 95       	ror	r18
    35a8:	a7 95       	ror	r26
    35aa:	f0 40       	sbci	r31, 0x00	; 0
    35ac:	53 95       	inc	r21
    35ae:	c9 f7       	brne	.-14     	; 0x35a2 <__addsf3x+0x4e>
    35b0:	7e f4       	brtc	.+30     	; 0x35d0 <__addsf3x+0x7c>
    35b2:	1f 16       	cp	r1, r31
    35b4:	ba 0b       	sbc	r27, r26
    35b6:	62 0b       	sbc	r22, r18
    35b8:	73 0b       	sbc	r23, r19
    35ba:	84 0b       	sbc	r24, r20
    35bc:	ba f0       	brmi	.+46     	; 0x35ec <__addsf3x+0x98>
    35be:	91 50       	subi	r25, 0x01	; 1
    35c0:	a1 f0       	breq	.+40     	; 0x35ea <__addsf3x+0x96>
    35c2:	ff 0f       	add	r31, r31
    35c4:	bb 1f       	adc	r27, r27
    35c6:	66 1f       	adc	r22, r22
    35c8:	77 1f       	adc	r23, r23
    35ca:	88 1f       	adc	r24, r24
    35cc:	c2 f7       	brpl	.-16     	; 0x35be <__addsf3x+0x6a>
    35ce:	0e c0       	rjmp	.+28     	; 0x35ec <__addsf3x+0x98>
    35d0:	ba 0f       	add	r27, r26
    35d2:	62 1f       	adc	r22, r18
    35d4:	73 1f       	adc	r23, r19
    35d6:	84 1f       	adc	r24, r20
    35d8:	48 f4       	brcc	.+18     	; 0x35ec <__addsf3x+0x98>
    35da:	87 95       	ror	r24
    35dc:	77 95       	ror	r23
    35de:	67 95       	ror	r22
    35e0:	b7 95       	ror	r27
    35e2:	f7 95       	ror	r31
    35e4:	9e 3f       	cpi	r25, 0xFE	; 254
    35e6:	08 f0       	brcs	.+2      	; 0x35ea <__addsf3x+0x96>
    35e8:	b3 cf       	rjmp	.-154    	; 0x3550 <sin+0x22>
    35ea:	93 95       	inc	r25
    35ec:	88 0f       	add	r24, r24
    35ee:	08 f0       	brcs	.+2      	; 0x35f2 <__addsf3x+0x9e>
    35f0:	99 27       	eor	r25, r25
    35f2:	ee 0f       	add	r30, r30
    35f4:	97 95       	ror	r25
    35f6:	87 95       	ror	r24
    35f8:	08 95       	ret

000035fa <__fp_inf>:
    35fa:	97 f9       	bld	r25, 7
    35fc:	9f 67       	ori	r25, 0x7F	; 127
    35fe:	80 e8       	ldi	r24, 0x80	; 128
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	08 95       	ret

00003606 <__fp_mpack>:
    3606:	9f 3f       	cpi	r25, 0xFF	; 255
    3608:	31 f0       	breq	.+12     	; 0x3616 <__fp_mpack_finite+0xc>

0000360a <__fp_mpack_finite>:
    360a:	91 50       	subi	r25, 0x01	; 1
    360c:	20 f4       	brcc	.+8      	; 0x3616 <__fp_mpack_finite+0xc>
    360e:	87 95       	ror	r24
    3610:	77 95       	ror	r23
    3612:	67 95       	ror	r22
    3614:	b7 95       	ror	r27
    3616:	88 0f       	add	r24, r24
    3618:	91 1d       	adc	r25, r1
    361a:	96 95       	lsr	r25
    361c:	87 95       	ror	r24
    361e:	97 f9       	bld	r25, 7
    3620:	08 95       	ret

00003622 <__fp_nan>:
    3622:	9f ef       	ldi	r25, 0xFF	; 255
    3624:	80 ec       	ldi	r24, 0xC0	; 192
    3626:	08 95       	ret

00003628 <__fp_powsodd>:
    3628:	9f 93       	push	r25
    362a:	8f 93       	push	r24
    362c:	7f 93       	push	r23
    362e:	6f 93       	push	r22
    3630:	ff 93       	push	r31
    3632:	ef 93       	push	r30
    3634:	9b 01       	movw	r18, r22
    3636:	ac 01       	movw	r20, r24
    3638:	d8 d9       	rcall	.-3152   	; 0x29ea <__mulsf3>
    363a:	ef 91       	pop	r30
    363c:	ff 91       	pop	r31
    363e:	2b d0       	rcall	.+86     	; 0x3696 <__fp_powser>
    3640:	2f 91       	pop	r18
    3642:	3f 91       	pop	r19
    3644:	4f 91       	pop	r20
    3646:	5f 91       	pop	r21
    3648:	d0 c9       	rjmp	.-3168   	; 0x29ea <__mulsf3>

0000364a <__fp_pscA>:
    364a:	00 24       	eor	r0, r0
    364c:	0a 94       	dec	r0
    364e:	16 16       	cp	r1, r22
    3650:	17 06       	cpc	r1, r23
    3652:	18 06       	cpc	r1, r24
    3654:	09 06       	cpc	r0, r25
    3656:	08 95       	ret

00003658 <__fp_pscB>:
    3658:	00 24       	eor	r0, r0
    365a:	0a 94       	dec	r0
    365c:	12 16       	cp	r1, r18
    365e:	13 06       	cpc	r1, r19
    3660:	14 06       	cpc	r1, r20
    3662:	05 06       	cpc	r0, r21
    3664:	08 95       	ret

00003666 <__fp_round>:
    3666:	09 2e       	mov	r0, r25
    3668:	03 94       	inc	r0
    366a:	00 0c       	add	r0, r0
    366c:	11 f4       	brne	.+4      	; 0x3672 <__fp_round+0xc>
    366e:	88 23       	and	r24, r24
    3670:	52 f0       	brmi	.+20     	; 0x3686 <__fp_round+0x20>
    3672:	bb 0f       	add	r27, r27
    3674:	40 f4       	brcc	.+16     	; 0x3686 <__fp_round+0x20>
    3676:	bf 2b       	or	r27, r31
    3678:	11 f4       	brne	.+4      	; 0x367e <__fp_round+0x18>
    367a:	60 ff       	sbrs	r22, 0
    367c:	04 c0       	rjmp	.+8      	; 0x3686 <__fp_round+0x20>
    367e:	6f 5f       	subi	r22, 0xFF	; 255
    3680:	7f 4f       	sbci	r23, 0xFF	; 255
    3682:	8f 4f       	sbci	r24, 0xFF	; 255
    3684:	9f 4f       	sbci	r25, 0xFF	; 255
    3686:	08 95       	ret

00003688 <__fp_zero>:
    3688:	e8 94       	clt

0000368a <__fp_szero>:
    368a:	bb 27       	eor	r27, r27
    368c:	66 27       	eor	r22, r22
    368e:	77 27       	eor	r23, r23
    3690:	cb 01       	movw	r24, r22
    3692:	97 f9       	bld	r25, 7
    3694:	08 95       	ret

00003696 <__fp_powser>:
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	1f 93       	push	r17
    369c:	0f 93       	push	r16
    369e:	ff 92       	push	r15
    36a0:	ef 92       	push	r14
    36a2:	df 92       	push	r13
    36a4:	7b 01       	movw	r14, r22
    36a6:	8c 01       	movw	r16, r24
    36a8:	68 94       	set
    36aa:	05 c0       	rjmp	.+10     	; 0x36b6 <__fp_powser+0x20>
    36ac:	da 2e       	mov	r13, r26
    36ae:	ef 01       	movw	r28, r30
    36b0:	21 d0       	rcall	.+66     	; 0x36f4 <__mulsf3x>
    36b2:	fe 01       	movw	r30, r28
    36b4:	e8 94       	clt
    36b6:	a5 91       	lpm	r26, Z+
    36b8:	25 91       	lpm	r18, Z+
    36ba:	35 91       	lpm	r19, Z+
    36bc:	45 91       	lpm	r20, Z+
    36be:	55 91       	lpm	r21, Z+
    36c0:	ae f3       	brts	.-22     	; 0x36ac <__fp_powser+0x16>
    36c2:	ef 01       	movw	r28, r30
    36c4:	47 df       	rcall	.-370    	; 0x3554 <__addsf3x>
    36c6:	fe 01       	movw	r30, r28
    36c8:	97 01       	movw	r18, r14
    36ca:	a8 01       	movw	r20, r16
    36cc:	da 94       	dec	r13
    36ce:	79 f7       	brne	.-34     	; 0x36ae <__fp_powser+0x18>
    36d0:	df 90       	pop	r13
    36d2:	ef 90       	pop	r14
    36d4:	ff 90       	pop	r15
    36d6:	0f 91       	pop	r16
    36d8:	1f 91       	pop	r17
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret
    36e0:	b4 df       	rcall	.-152    	; 0x364a <__fp_pscA>
    36e2:	28 f0       	brcs	.+10     	; 0x36ee <__fp_powser+0x58>
    36e4:	b9 df       	rcall	.-142    	; 0x3658 <__fp_pscB>
    36e6:	18 f0       	brcs	.+6      	; 0x36ee <__fp_powser+0x58>
    36e8:	95 23       	and	r25, r21
    36ea:	09 f0       	breq	.+2      	; 0x36ee <__fp_powser+0x58>
    36ec:	86 cf       	rjmp	.-244    	; 0x35fa <__fp_inf>
    36ee:	99 cf       	rjmp	.-206    	; 0x3622 <__fp_nan>
    36f0:	11 24       	eor	r1, r1
    36f2:	cb cf       	rjmp	.-106    	; 0x368a <__fp_szero>

000036f4 <__mulsf3x>:
    36f4:	fa de       	rcall	.-524    	; 0x34ea <__fp_split3>
    36f6:	a0 f3       	brcs	.-24     	; 0x36e0 <__fp_powser+0x4a>

000036f8 <__mulsf3_pse>:
    36f8:	95 9f       	mul	r25, r21
    36fa:	d1 f3       	breq	.-12     	; 0x36f0 <__fp_powser+0x5a>
    36fc:	95 0f       	add	r25, r21
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	55 1f       	adc	r21, r21
    3702:	62 9f       	mul	r22, r18
    3704:	f0 01       	movw	r30, r0
    3706:	72 9f       	mul	r23, r18
    3708:	bb 27       	eor	r27, r27
    370a:	f0 0d       	add	r31, r0
    370c:	b1 1d       	adc	r27, r1
    370e:	63 9f       	mul	r22, r19
    3710:	aa 27       	eor	r26, r26
    3712:	f0 0d       	add	r31, r0
    3714:	b1 1d       	adc	r27, r1
    3716:	aa 1f       	adc	r26, r26
    3718:	64 9f       	mul	r22, r20
    371a:	66 27       	eor	r22, r22
    371c:	b0 0d       	add	r27, r0
    371e:	a1 1d       	adc	r26, r1
    3720:	66 1f       	adc	r22, r22
    3722:	82 9f       	mul	r24, r18
    3724:	22 27       	eor	r18, r18
    3726:	b0 0d       	add	r27, r0
    3728:	a1 1d       	adc	r26, r1
    372a:	62 1f       	adc	r22, r18
    372c:	73 9f       	mul	r23, r19
    372e:	b0 0d       	add	r27, r0
    3730:	a1 1d       	adc	r26, r1
    3732:	62 1f       	adc	r22, r18
    3734:	83 9f       	mul	r24, r19
    3736:	a0 0d       	add	r26, r0
    3738:	61 1d       	adc	r22, r1
    373a:	22 1f       	adc	r18, r18
    373c:	74 9f       	mul	r23, r20
    373e:	33 27       	eor	r19, r19
    3740:	a0 0d       	add	r26, r0
    3742:	61 1d       	adc	r22, r1
    3744:	23 1f       	adc	r18, r19
    3746:	84 9f       	mul	r24, r20
    3748:	60 0d       	add	r22, r0
    374a:	21 1d       	adc	r18, r1
    374c:	82 2f       	mov	r24, r18
    374e:	76 2f       	mov	r23, r22
    3750:	6a 2f       	mov	r22, r26
    3752:	11 24       	eor	r1, r1
    3754:	9f 57       	subi	r25, 0x7F	; 127
    3756:	50 40       	sbci	r21, 0x00	; 0
    3758:	8a f0       	brmi	.+34     	; 0x377c <__mulsf3_pse+0x84>
    375a:	e1 f0       	breq	.+56     	; 0x3794 <__mulsf3_pse+0x9c>
    375c:	88 23       	and	r24, r24
    375e:	4a f0       	brmi	.+18     	; 0x3772 <__mulsf3_pse+0x7a>
    3760:	ee 0f       	add	r30, r30
    3762:	ff 1f       	adc	r31, r31
    3764:	bb 1f       	adc	r27, r27
    3766:	66 1f       	adc	r22, r22
    3768:	77 1f       	adc	r23, r23
    376a:	88 1f       	adc	r24, r24
    376c:	91 50       	subi	r25, 0x01	; 1
    376e:	50 40       	sbci	r21, 0x00	; 0
    3770:	a9 f7       	brne	.-22     	; 0x375c <__mulsf3_pse+0x64>
    3772:	9e 3f       	cpi	r25, 0xFE	; 254
    3774:	51 05       	cpc	r21, r1
    3776:	70 f0       	brcs	.+28     	; 0x3794 <__mulsf3_pse+0x9c>
    3778:	40 cf       	rjmp	.-384    	; 0x35fa <__fp_inf>
    377a:	87 cf       	rjmp	.-242    	; 0x368a <__fp_szero>
    377c:	5f 3f       	cpi	r21, 0xFF	; 255
    377e:	ec f3       	brlt	.-6      	; 0x377a <__mulsf3_pse+0x82>
    3780:	98 3e       	cpi	r25, 0xE8	; 232
    3782:	dc f3       	brlt	.-10     	; 0x377a <__mulsf3_pse+0x82>
    3784:	86 95       	lsr	r24
    3786:	77 95       	ror	r23
    3788:	67 95       	ror	r22
    378a:	b7 95       	ror	r27
    378c:	f7 95       	ror	r31
    378e:	e7 95       	ror	r30
    3790:	9f 5f       	subi	r25, 0xFF	; 255
    3792:	c1 f7       	brne	.-16     	; 0x3784 <__mulsf3_pse+0x8c>
    3794:	fe 2b       	or	r31, r30
    3796:	88 0f       	add	r24, r24
    3798:	91 1d       	adc	r25, r1
    379a:	96 95       	lsr	r25
    379c:	87 95       	ror	r24
    379e:	97 f9       	bld	r25, 7
    37a0:	08 95       	ret

000037a2 <_exit>:
    37a2:	f8 94       	cli

000037a4 <__stop_program>:
    37a4:	ff cf       	rjmp	.-2      	; 0x37a4 <__stop_program>
